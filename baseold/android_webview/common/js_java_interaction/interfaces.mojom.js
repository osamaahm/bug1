// android_webview/common/js_java_interaction/interfaces.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'android_webview/common/js_java_interaction/interfaces.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('androidWebview.mojom');
  var string16$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/string16.mojom', '../../../mojo/public/mojom/base/string16.mojom.js');
  }
  var proxy_config$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/proxy_config.mojom', '../../../services/network/public/mojom/proxy_config.mojom.js');
  }



  function JsObject(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  JsObject.prototype.initDefaults_ = function() {
    this.jsObjectName = null;
    this.jsToJavaMessaging = new associatedBindings.AssociatedInterfacePtrInfo();
    this.allowedOriginRules = null;
  };
  JsObject.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  JsObject.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate JsObject.jsObjectName
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, string16$.String16, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate JsObject.jsToJavaMessaging
    err = messageValidator.validateAssociatedInterface(offset + codec.kStructHeaderSize + 8, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate JsObject.allowedOriginRules
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, proxy_config$.ProxyBypassRules, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  JsObject.encodedSize = codec.kStructHeaderSize + 24;

  JsObject.decode = function(decoder) {
    var packed;
    var val = new JsObject();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.jsObjectName = decoder.decodeStructPointer(string16$.String16);
    val.jsToJavaMessaging = decoder.decodeStruct(codec.AssociatedInterfacePtrInfo);
    val.allowedOriginRules = decoder.decodeStructPointer(proxy_config$.ProxyBypassRules);
    return val;
  };

  JsObject.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(JsObject.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(string16$.String16, val.jsObjectName);
    encoder.encodeStruct(codec.AssociatedInterfacePtrInfo, val.jsToJavaMessaging);
    encoder.encodeStructPointer(proxy_config$.ProxyBypassRules, val.allowedOriginRules);
  };
  function JsToJavaMessaging_PostMessage_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  JsToJavaMessaging_PostMessage_Params.prototype.initDefaults_ = function() {
    this.message = null;
    this.ports = null;
  };
  JsToJavaMessaging_PostMessage_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  JsToJavaMessaging_PostMessage_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate JsToJavaMessaging_PostMessage_Params.message
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, string16$.String16, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate JsToJavaMessaging_PostMessage_Params.ports
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 4, codec.Handle, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  JsToJavaMessaging_PostMessage_Params.encodedSize = codec.kStructHeaderSize + 16;

  JsToJavaMessaging_PostMessage_Params.decode = function(decoder) {
    var packed;
    var val = new JsToJavaMessaging_PostMessage_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.message = decoder.decodeStructPointer(string16$.String16);
    val.ports = decoder.decodeArrayPointer(codec.Handle);
    return val;
  };

  JsToJavaMessaging_PostMessage_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(JsToJavaMessaging_PostMessage_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(string16$.String16, val.message);
    encoder.encodeArrayPointer(codec.Handle, val.ports);
  };
  function JsToJavaMessaging_SetJavaToJsMessaging_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  JsToJavaMessaging_SetJavaToJsMessaging_Params.prototype.initDefaults_ = function() {
    this.javaToJsMessaging = new JavaToJsMessagingPtr();
  };
  JsToJavaMessaging_SetJavaToJsMessaging_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  JsToJavaMessaging_SetJavaToJsMessaging_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate JsToJavaMessaging_SetJavaToJsMessaging_Params.javaToJsMessaging
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  JsToJavaMessaging_SetJavaToJsMessaging_Params.encodedSize = codec.kStructHeaderSize + 8;

  JsToJavaMessaging_SetJavaToJsMessaging_Params.decode = function(decoder) {
    var packed;
    var val = new JsToJavaMessaging_SetJavaToJsMessaging_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.javaToJsMessaging = decoder.decodeStruct(new codec.Interface(JavaToJsMessagingPtr));
    return val;
  };

  JsToJavaMessaging_SetJavaToJsMessaging_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(JsToJavaMessaging_SetJavaToJsMessaging_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(JavaToJsMessagingPtr), val.javaToJsMessaging);
  };
  function JavaToJsMessaging_OnPostMessage_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  JavaToJsMessaging_OnPostMessage_Params.prototype.initDefaults_ = function() {
    this.message = null;
  };
  JavaToJsMessaging_OnPostMessage_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  JavaToJsMessaging_OnPostMessage_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate JavaToJsMessaging_OnPostMessage_Params.message
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, string16$.String16, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  JavaToJsMessaging_OnPostMessage_Params.encodedSize = codec.kStructHeaderSize + 8;

  JavaToJsMessaging_OnPostMessage_Params.decode = function(decoder) {
    var packed;
    var val = new JavaToJsMessaging_OnPostMessage_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.message = decoder.decodeStructPointer(string16$.String16);
    return val;
  };

  JavaToJsMessaging_OnPostMessage_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(JavaToJsMessaging_OnPostMessage_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(string16$.String16, val.message);
  };
  function JsJavaConfigurator_SetJsObjects_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  JsJavaConfigurator_SetJsObjects_Params.prototype.initDefaults_ = function() {
    this.jsObjects = null;
  };
  JsJavaConfigurator_SetJsObjects_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  JsJavaConfigurator_SetJsObjects_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate JsJavaConfigurator_SetJsObjects_Params.jsObjects
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(JsObject), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  JsJavaConfigurator_SetJsObjects_Params.encodedSize = codec.kStructHeaderSize + 8;

  JsJavaConfigurator_SetJsObjects_Params.decode = function(decoder) {
    var packed;
    var val = new JsJavaConfigurator_SetJsObjects_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.jsObjects = decoder.decodeArrayPointer(new codec.PointerTo(JsObject));
    return val;
  };

  JsJavaConfigurator_SetJsObjects_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(JsJavaConfigurator_SetJsObjects_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(JsObject), val.jsObjects);
  };
  var kJsToJavaMessaging_PostMessage_Name = 0;
  var kJsToJavaMessaging_SetJavaToJsMessaging_Name = 1;

  function JsToJavaMessagingPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(JsToJavaMessaging,
                                                   handleOrPtrInfo);
  }

  function JsToJavaMessagingAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        JsToJavaMessaging, associatedInterfacePtrInfo);
  }

  JsToJavaMessagingAssociatedPtr.prototype =
      Object.create(JsToJavaMessagingPtr.prototype);
  JsToJavaMessagingAssociatedPtr.prototype.constructor =
      JsToJavaMessagingAssociatedPtr;

  function JsToJavaMessagingProxy(receiver) {
    this.receiver_ = receiver;
  }
  JsToJavaMessagingPtr.prototype.postMessage = function() {
    return JsToJavaMessagingProxy.prototype.postMessage
        .apply(this.ptr.getProxy(), arguments);
  };

  JsToJavaMessagingProxy.prototype.postMessage = function(message, ports) {
    var params_ = new JsToJavaMessaging_PostMessage_Params();
    params_.message = message;
    params_.ports = ports;
    var builder = new codec.MessageV0Builder(
        kJsToJavaMessaging_PostMessage_Name,
        codec.align(JsToJavaMessaging_PostMessage_Params.encodedSize));
    builder.encodeStruct(JsToJavaMessaging_PostMessage_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  JsToJavaMessagingPtr.prototype.setJavaToJsMessaging = function() {
    return JsToJavaMessagingProxy.prototype.setJavaToJsMessaging
        .apply(this.ptr.getProxy(), arguments);
  };

  JsToJavaMessagingProxy.prototype.setJavaToJsMessaging = function(javaToJsMessaging) {
    var params_ = new JsToJavaMessaging_SetJavaToJsMessaging_Params();
    params_.javaToJsMessaging = javaToJsMessaging;
    var builder = new codec.MessageV0Builder(
        kJsToJavaMessaging_SetJavaToJsMessaging_Name,
        codec.align(JsToJavaMessaging_SetJavaToJsMessaging_Params.encodedSize));
    builder.encodeStruct(JsToJavaMessaging_SetJavaToJsMessaging_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function JsToJavaMessagingStub(delegate) {
    this.delegate_ = delegate;
  }
  JsToJavaMessagingStub.prototype.postMessage = function(message, ports) {
    return this.delegate_ && this.delegate_.postMessage && this.delegate_.postMessage(message, ports);
  }
  JsToJavaMessagingStub.prototype.setJavaToJsMessaging = function(javaToJsMessaging) {
    return this.delegate_ && this.delegate_.setJavaToJsMessaging && this.delegate_.setJavaToJsMessaging(javaToJsMessaging);
  }

  JsToJavaMessagingStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kJsToJavaMessaging_PostMessage_Name:
      var params = reader.decodeStruct(JsToJavaMessaging_PostMessage_Params);
      this.postMessage(params.message, params.ports);
      return true;
    case kJsToJavaMessaging_SetJavaToJsMessaging_Name:
      var params = reader.decodeStruct(JsToJavaMessaging_SetJavaToJsMessaging_Params);
      this.setJavaToJsMessaging(params.javaToJsMessaging);
      return true;
    default:
      return false;
    }
  };

  JsToJavaMessagingStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateJsToJavaMessagingRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kJsToJavaMessaging_PostMessage_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = JsToJavaMessaging_PostMessage_Params;
      break;
      case kJsToJavaMessaging_SetJavaToJsMessaging_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = JsToJavaMessaging_SetJavaToJsMessaging_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateJsToJavaMessagingResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var JsToJavaMessaging = {
    name: 'android_webview.mojom.JsToJavaMessaging',
    kVersion: 0,
    ptrClass: JsToJavaMessagingPtr,
    proxyClass: JsToJavaMessagingProxy,
    stubClass: JsToJavaMessagingStub,
    validateRequest: validateJsToJavaMessagingRequest,
    validateResponse: null,
  };
  JsToJavaMessagingStub.prototype.validator = validateJsToJavaMessagingRequest;
  JsToJavaMessagingProxy.prototype.validator = null;
  var kJavaToJsMessaging_OnPostMessage_Name = 0;

  function JavaToJsMessagingPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(JavaToJsMessaging,
                                                   handleOrPtrInfo);
  }

  function JavaToJsMessagingAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        JavaToJsMessaging, associatedInterfacePtrInfo);
  }

  JavaToJsMessagingAssociatedPtr.prototype =
      Object.create(JavaToJsMessagingPtr.prototype);
  JavaToJsMessagingAssociatedPtr.prototype.constructor =
      JavaToJsMessagingAssociatedPtr;

  function JavaToJsMessagingProxy(receiver) {
    this.receiver_ = receiver;
  }
  JavaToJsMessagingPtr.prototype.onPostMessage = function() {
    return JavaToJsMessagingProxy.prototype.onPostMessage
        .apply(this.ptr.getProxy(), arguments);
  };

  JavaToJsMessagingProxy.prototype.onPostMessage = function(message) {
    var params_ = new JavaToJsMessaging_OnPostMessage_Params();
    params_.message = message;
    var builder = new codec.MessageV0Builder(
        kJavaToJsMessaging_OnPostMessage_Name,
        codec.align(JavaToJsMessaging_OnPostMessage_Params.encodedSize));
    builder.encodeStruct(JavaToJsMessaging_OnPostMessage_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function JavaToJsMessagingStub(delegate) {
    this.delegate_ = delegate;
  }
  JavaToJsMessagingStub.prototype.onPostMessage = function(message) {
    return this.delegate_ && this.delegate_.onPostMessage && this.delegate_.onPostMessage(message);
  }

  JavaToJsMessagingStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kJavaToJsMessaging_OnPostMessage_Name:
      var params = reader.decodeStruct(JavaToJsMessaging_OnPostMessage_Params);
      this.onPostMessage(params.message);
      return true;
    default:
      return false;
    }
  };

  JavaToJsMessagingStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateJavaToJsMessagingRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kJavaToJsMessaging_OnPostMessage_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = JavaToJsMessaging_OnPostMessage_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateJavaToJsMessagingResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var JavaToJsMessaging = {
    name: 'android_webview.mojom.JavaToJsMessaging',
    kVersion: 0,
    ptrClass: JavaToJsMessagingPtr,
    proxyClass: JavaToJsMessagingProxy,
    stubClass: JavaToJsMessagingStub,
    validateRequest: validateJavaToJsMessagingRequest,
    validateResponse: null,
  };
  JavaToJsMessagingStub.prototype.validator = validateJavaToJsMessagingRequest;
  JavaToJsMessagingProxy.prototype.validator = null;
  var kJsJavaConfigurator_SetJsObjects_Name = 0;

  function JsJavaConfiguratorPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(JsJavaConfigurator,
                                                   handleOrPtrInfo);
  }

  function JsJavaConfiguratorAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        JsJavaConfigurator, associatedInterfacePtrInfo);
  }

  JsJavaConfiguratorAssociatedPtr.prototype =
      Object.create(JsJavaConfiguratorPtr.prototype);
  JsJavaConfiguratorAssociatedPtr.prototype.constructor =
      JsJavaConfiguratorAssociatedPtr;

  function JsJavaConfiguratorProxy(receiver) {
    this.receiver_ = receiver;
  }
  JsJavaConfiguratorPtr.prototype.setJsObjects = function() {
    return JsJavaConfiguratorProxy.prototype.setJsObjects
        .apply(this.ptr.getProxy(), arguments);
  };

  JsJavaConfiguratorProxy.prototype.setJsObjects = function(jsObjects) {
    var params_ = new JsJavaConfigurator_SetJsObjects_Params();
    params_.jsObjects = jsObjects;
    var builder = new codec.MessageV2Builder(
        kJsJavaConfigurator_SetJsObjects_Name,
        codec.align(JsJavaConfigurator_SetJsObjects_Params.encodedSize));
    builder.setPayload(JsJavaConfigurator_SetJsObjects_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function JsJavaConfiguratorStub(delegate) {
    this.delegate_ = delegate;
  }
  JsJavaConfiguratorStub.prototype.setJsObjects = function(jsObjects) {
    return this.delegate_ && this.delegate_.setJsObjects && this.delegate_.setJsObjects(jsObjects);
  }

  JsJavaConfiguratorStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kJsJavaConfigurator_SetJsObjects_Name:
      var params = reader.decodeStruct(JsJavaConfigurator_SetJsObjects_Params);
      this.setJsObjects(params.jsObjects);
      return true;
    default:
      return false;
    }
  };

  JsJavaConfiguratorStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateJsJavaConfiguratorRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kJsJavaConfigurator_SetJsObjects_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = JsJavaConfigurator_SetJsObjects_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateJsJavaConfiguratorResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var JsJavaConfigurator = {
    name: 'android_webview.mojom.JsJavaConfigurator',
    kVersion: 0,
    ptrClass: JsJavaConfiguratorPtr,
    proxyClass: JsJavaConfiguratorProxy,
    stubClass: JsJavaConfiguratorStub,
    validateRequest: validateJsJavaConfiguratorRequest,
    validateResponse: null,
  };
  JsJavaConfiguratorStub.prototype.validator = validateJsJavaConfiguratorRequest;
  JsJavaConfiguratorProxy.prototype.validator = null;
  exports.JsObject = JsObject;
  exports.JsToJavaMessaging = JsToJavaMessaging;
  exports.JsToJavaMessagingPtr = JsToJavaMessagingPtr;
  exports.JsToJavaMessagingAssociatedPtr = JsToJavaMessagingAssociatedPtr;
  exports.JavaToJsMessaging = JavaToJsMessaging;
  exports.JavaToJsMessagingPtr = JavaToJsMessagingPtr;
  exports.JavaToJsMessagingAssociatedPtr = JavaToJsMessagingAssociatedPtr;
  exports.JsJavaConfigurator = JsJavaConfigurator;
  exports.JsJavaConfiguratorPtr = JsJavaConfiguratorPtr;
  exports.JsJavaConfiguratorAssociatedPtr = JsJavaConfiguratorAssociatedPtr;
})();