// content/test/data/web_ui_test_mojo_bindings.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'content/test/data/web_ui_test_mojo_bindings.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('content.mojom');



  function BrowserTarget_Start_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  BrowserTarget_Start_Params.prototype.initDefaults_ = function() {
  };
  BrowserTarget_Start_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  BrowserTarget_Start_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  BrowserTarget_Start_Params.encodedSize = codec.kStructHeaderSize + 0;

  BrowserTarget_Start_Params.decode = function(decoder) {
    var packed;
    var val = new BrowserTarget_Start_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  BrowserTarget_Start_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(BrowserTarget_Start_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function BrowserTarget_Start_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  BrowserTarget_Start_ResponseParams.prototype.initDefaults_ = function() {
  };
  BrowserTarget_Start_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  BrowserTarget_Start_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  BrowserTarget_Start_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  BrowserTarget_Start_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new BrowserTarget_Start_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  BrowserTarget_Start_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(BrowserTarget_Start_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function BrowserTarget_Stop_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  BrowserTarget_Stop_Params.prototype.initDefaults_ = function() {
  };
  BrowserTarget_Stop_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  BrowserTarget_Stop_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  BrowserTarget_Stop_Params.encodedSize = codec.kStructHeaderSize + 0;

  BrowserTarget_Stop_Params.decode = function(decoder) {
    var packed;
    var val = new BrowserTarget_Stop_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  BrowserTarget_Stop_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(BrowserTarget_Stop_Params.encodedSize);
    encoder.writeUint32(0);
  };
  var kBrowserTarget_Start_Name = 0;
  var kBrowserTarget_Stop_Name = 1;

  function BrowserTargetPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(BrowserTarget,
                                                   handleOrPtrInfo);
  }

  function BrowserTargetAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        BrowserTarget, associatedInterfacePtrInfo);
  }

  BrowserTargetAssociatedPtr.prototype =
      Object.create(BrowserTargetPtr.prototype);
  BrowserTargetAssociatedPtr.prototype.constructor =
      BrowserTargetAssociatedPtr;

  function BrowserTargetProxy(receiver) {
    this.receiver_ = receiver;
  }
  BrowserTargetPtr.prototype.start = function() {
    return BrowserTargetProxy.prototype.start
        .apply(this.ptr.getProxy(), arguments);
  };

  BrowserTargetProxy.prototype.start = function() {
    var params_ = new BrowserTarget_Start_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kBrowserTarget_Start_Name,
          codec.align(BrowserTarget_Start_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(BrowserTarget_Start_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(BrowserTarget_Start_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  BrowserTargetPtr.prototype.stop = function() {
    return BrowserTargetProxy.prototype.stop
        .apply(this.ptr.getProxy(), arguments);
  };

  BrowserTargetProxy.prototype.stop = function() {
    var params_ = new BrowserTarget_Stop_Params();
    var builder = new codec.MessageV0Builder(
        kBrowserTarget_Stop_Name,
        codec.align(BrowserTarget_Stop_Params.encodedSize));
    builder.encodeStruct(BrowserTarget_Stop_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function BrowserTargetStub(delegate) {
    this.delegate_ = delegate;
  }
  BrowserTargetStub.prototype.start = function() {
    return this.delegate_ && this.delegate_.start && this.delegate_.start();
  }
  BrowserTargetStub.prototype.stop = function() {
    return this.delegate_ && this.delegate_.stop && this.delegate_.stop();
  }

  BrowserTargetStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kBrowserTarget_Stop_Name:
      var params = reader.decodeStruct(BrowserTarget_Stop_Params);
      this.stop();
      return true;
    default:
      return false;
    }
  };

  BrowserTargetStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kBrowserTarget_Start_Name:
      var params = reader.decodeStruct(BrowserTarget_Start_Params);
      this.start().then(function(response) {
        var responseParams =
            new BrowserTarget_Start_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kBrowserTarget_Start_Name,
            codec.align(BrowserTarget_Start_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(BrowserTarget_Start_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateBrowserTargetRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kBrowserTarget_Start_Name:
        if (message.expectsResponse())
          paramsClass = BrowserTarget_Start_Params;
      break;
      case kBrowserTarget_Stop_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = BrowserTarget_Stop_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateBrowserTargetResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kBrowserTarget_Start_Name:
        if (message.isResponse())
          paramsClass = BrowserTarget_Start_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var BrowserTarget = {
    name: 'content.mojom.BrowserTarget',
    kVersion: 0,
    ptrClass: BrowserTargetPtr,
    proxyClass: BrowserTargetProxy,
    stubClass: BrowserTargetStub,
    validateRequest: validateBrowserTargetRequest,
    validateResponse: validateBrowserTargetResponse,
  };
  BrowserTargetStub.prototype.validator = validateBrowserTargetRequest;
  BrowserTargetProxy.prototype.validator = validateBrowserTargetResponse;
  exports.BrowserTarget = BrowserTarget;
  exports.BrowserTargetPtr = BrowserTargetPtr;
  exports.BrowserTargetAssociatedPtr = BrowserTargetAssociatedPtr;
})();