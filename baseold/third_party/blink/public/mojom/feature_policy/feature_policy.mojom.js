// third_party/blink/public/mojom/feature_policy/feature_policy.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'third_party/blink/public/mojom/feature_policy/feature_policy.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('blink.mojom');
  var origin$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/origin.mojom', '../../../../../url/mojom/origin.mojom.js');
  }
  var feature_policy_feature$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/feature_policy/feature_policy_feature.mojom', 'feature_policy_feature.mojom.js');
  }
  var policy_value$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/feature_policy/policy_value.mojom', 'policy_value.mojom.js');
  }


  var WebSandboxFlags = {};
  WebSandboxFlags.kNone = 0;
  WebSandboxFlags.kNavigation = 1;
  WebSandboxFlags.kPlugins = 2;
  WebSandboxFlags.kOrigin = 4;
  WebSandboxFlags.kForms = 8;
  WebSandboxFlags.kScripts = 16;
  WebSandboxFlags.kTopNavigation = 32;
  WebSandboxFlags.kPopups = 64;
  WebSandboxFlags.kAutomaticFeatures = 128;
  WebSandboxFlags.kPointerLock = 256;
  WebSandboxFlags.kDocumentDomain = 512;
  WebSandboxFlags.kOrientationLock = 1024;
  WebSandboxFlags.kPropagatesToAuxiliaryBrowsingContexts = 2048;
  WebSandboxFlags.kModals = 4096;
  WebSandboxFlags.kPresentationController = 8192;
  WebSandboxFlags.kTopNavigationByUserActivation = 16384;
  WebSandboxFlags.kDownloads = 32768;
  WebSandboxFlags.kStorageAccessByUserActivation = 65536;
  WebSandboxFlags.MIN_VALUE = 0,
  WebSandboxFlags.MAX_VALUE = 65536,

  WebSandboxFlags.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
    case 65536:
      return true;
    }
    return false;
  };

  WebSandboxFlags.validate = function(enumValue) {
    var isExtensible = true;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var FeaturePolicyDisposition = {};
  FeaturePolicyDisposition.kEnforce = 0;
  FeaturePolicyDisposition.kReport = FeaturePolicyDisposition.kEnforce + 1;
  FeaturePolicyDisposition.MIN_VALUE = 0,
  FeaturePolicyDisposition.MAX_VALUE = 1,

  FeaturePolicyDisposition.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
      return true;
    }
    return false;
  };

  FeaturePolicyDisposition.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function ParsedFeaturePolicyDeclaration(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ParsedFeaturePolicyDeclaration.prototype.initDefaults_ = function() {
    this.feature = 0;
    this.values = null;
    this.fallbackValue = null;
    this.opaqueValue = null;
  };
  ParsedFeaturePolicyDeclaration.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ParsedFeaturePolicyDeclaration.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ParsedFeaturePolicyDeclaration.feature
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, feature_policy_feature$.FeaturePolicyFeature);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ParsedFeaturePolicyDeclaration.values
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 8, false, new codec.PointerTo(origin$.Origin), new codec.PointerTo(policy_value$.PolicyValue), false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ParsedFeaturePolicyDeclaration.fallbackValue
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, policy_value$.PolicyValue, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ParsedFeaturePolicyDeclaration.opaqueValue
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, policy_value$.PolicyValue, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ParsedFeaturePolicyDeclaration.encodedSize = codec.kStructHeaderSize + 32;

  ParsedFeaturePolicyDeclaration.decode = function(decoder) {
    var packed;
    var val = new ParsedFeaturePolicyDeclaration();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.feature = decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.values = decoder.decodeMapPointer(new codec.PointerTo(origin$.Origin), new codec.PointerTo(policy_value$.PolicyValue));
    val.fallbackValue = decoder.decodeStructPointer(policy_value$.PolicyValue);
    val.opaqueValue = decoder.decodeStructPointer(policy_value$.PolicyValue);
    return val;
  };

  ParsedFeaturePolicyDeclaration.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ParsedFeaturePolicyDeclaration.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.feature);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeMapPointer(new codec.PointerTo(origin$.Origin), new codec.PointerTo(policy_value$.PolicyValue), val.values);
    encoder.encodeStructPointer(policy_value$.PolicyValue, val.fallbackValue);
    encoder.encodeStructPointer(policy_value$.PolicyValue, val.opaqueValue);
  };
  exports.WebSandboxFlags = WebSandboxFlags;
  exports.FeaturePolicyDisposition = FeaturePolicyDisposition;
  exports.ParsedFeaturePolicyDeclaration = ParsedFeaturePolicyDeclaration;
})();