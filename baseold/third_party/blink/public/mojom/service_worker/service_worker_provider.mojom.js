// third_party/blink/public/mojom/service_worker/service_worker_provider.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'third_party/blink/public/mojom/service_worker/service_worker_provider.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('blink.mojom');
  var url_loader_factory$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/url_loader_factory.mojom', '../../../../../services/network/public/mojom/url_loader_factory.mojom.js');
  }
  var browser_interface_broker$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/browser_interface_broker.mojom', '../browser_interface_broker.mojom.js');
  }
  var interface_provider$ =
      mojo.internal.exposeNamespace('serviceManager.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/service_manager/public/mojom/interface_provider.mojom', '../../../../../services/service_manager/public/mojom/interface_provider.mojom.js');
  }
  var cache_storage$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/cache_storage/cache_storage.mojom', '../cache_storage/cache_storage.mojom.js');
  }
  var controller_service_worker_mode$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/service_worker/controller_service_worker_mode.mojom', 'controller_service_worker_mode.mojom.js');
  }
  var service_worker_container$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/service_worker/service_worker_container.mojom', 'service_worker_container.mojom.js');
  }
  var service_worker_object$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/service_worker/service_worker_object.mojom', 'service_worker_object.mojom.js');
  }
  var service_worker_provider_type$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/service_worker/service_worker_provider_type.mojom', 'service_worker_provider_type.mojom.js');
  }
  var service_worker_registration$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/service_worker/service_worker_registration.mojom', 'service_worker_registration.mojom.js');
  }


  var NAVIGATION_SERVICE_WORKER_SPEC = "navigation:service_worker";

  function ServiceWorkerProviderInfoForClient(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorkerProviderInfoForClient.prototype.initDefaults_ = function() {
    this.hostRemote = new associatedBindings.AssociatedInterfacePtrInfo();
    this.clientReceiver = new associatedBindings.AssociatedInterfaceRequest();
  };
  ServiceWorkerProviderInfoForClient.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorkerProviderInfoForClient.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorkerProviderInfoForClient.hostRemote
    err = messageValidator.validateAssociatedInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorkerProviderInfoForClient.clientReceiver
    err = messageValidator.validateAssociatedInterfaceRequest(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorkerProviderInfoForClient.encodedSize = codec.kStructHeaderSize + 16;

  ServiceWorkerProviderInfoForClient.decode = function(decoder) {
    var packed;
    var val = new ServiceWorkerProviderInfoForClient();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.hostRemote = decoder.decodeStruct(codec.AssociatedInterfacePtrInfo);
    val.clientReceiver = decoder.decodeStruct(codec.AssociatedInterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ServiceWorkerProviderInfoForClient.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorkerProviderInfoForClient.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.AssociatedInterfacePtrInfo, val.hostRemote);
    encoder.encodeStruct(codec.AssociatedInterfaceRequest, val.clientReceiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ServiceWorkerProviderInfoForStartWorker(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorkerProviderInfoForStartWorker.prototype.initDefaults_ = function() {
    this.hostRemote = new associatedBindings.AssociatedInterfacePtrInfo();
    this.scriptLoaderFactoryPtrInfo = new url_loader_factory$.URLLoaderFactoryPtr();
    this.cacheStorage = new cache_storage$.CacheStoragePtr();
    this.interfaceProvider = new interface_provider$.InterfaceProviderPtr();
    this.browserInterfaceBroker = new browser_interface_broker$.BrowserInterfaceBrokerPtr();
  };
  ServiceWorkerProviderInfoForStartWorker.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorkerProviderInfoForStartWorker.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 48}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorkerProviderInfoForStartWorker.hostRemote
    err = messageValidator.validateAssociatedInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorkerProviderInfoForStartWorker.scriptLoaderFactoryPtrInfo
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 8, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorkerProviderInfoForStartWorker.cacheStorage
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 16, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorkerProviderInfoForStartWorker.interfaceProvider
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 24, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorkerProviderInfoForStartWorker.browserInterfaceBroker
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 32, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorkerProviderInfoForStartWorker.encodedSize = codec.kStructHeaderSize + 40;

  ServiceWorkerProviderInfoForStartWorker.decode = function(decoder) {
    var packed;
    var val = new ServiceWorkerProviderInfoForStartWorker();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.hostRemote = decoder.decodeStruct(codec.AssociatedInterfacePtrInfo);
    val.scriptLoaderFactoryPtrInfo = decoder.decodeStruct(new codec.NullableInterface(url_loader_factory$.URLLoaderFactoryPtr));
    val.cacheStorage = decoder.decodeStruct(new codec.NullableInterface(cache_storage$.CacheStoragePtr));
    val.interfaceProvider = decoder.decodeStruct(new codec.Interface(interface_provider$.InterfaceProviderPtr));
    val.browserInterfaceBroker = decoder.decodeStruct(new codec.Interface(browser_interface_broker$.BrowserInterfaceBrokerPtr));
    return val;
  };

  ServiceWorkerProviderInfoForStartWorker.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorkerProviderInfoForStartWorker.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.AssociatedInterfacePtrInfo, val.hostRemote);
    encoder.encodeStruct(new codec.NullableInterface(url_loader_factory$.URLLoaderFactoryPtr), val.scriptLoaderFactoryPtrInfo);
    encoder.encodeStruct(new codec.NullableInterface(cache_storage$.CacheStoragePtr), val.cacheStorage);
    encoder.encodeStruct(new codec.Interface(interface_provider$.InterfaceProviderPtr), val.interfaceProvider);
    encoder.encodeStruct(new codec.Interface(browser_interface_broker$.BrowserInterfaceBrokerPtr), val.browserInterfaceBroker);
  };
  function ServiceWorkerWorkerClient_OnControllerChanged_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorkerWorkerClient_OnControllerChanged_Params.prototype.initDefaults_ = function() {
    this.mode = 0;
  };
  ServiceWorkerWorkerClient_OnControllerChanged_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorkerWorkerClient_OnControllerChanged_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorkerWorkerClient_OnControllerChanged_Params.mode
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, controller_service_worker_mode$.ControllerServiceWorkerMode);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorkerWorkerClient_OnControllerChanged_Params.encodedSize = codec.kStructHeaderSize + 8;

  ServiceWorkerWorkerClient_OnControllerChanged_Params.decode = function(decoder) {
    var packed;
    var val = new ServiceWorkerWorkerClient_OnControllerChanged_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.mode = decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ServiceWorkerWorkerClient_OnControllerChanged_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorkerWorkerClient_OnControllerChanged_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.mode);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ServiceWorkerWorkerClientRegistry_RegisterWorkerClient_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorkerWorkerClientRegistry_RegisterWorkerClient_Params.prototype.initDefaults_ = function() {
    this.client = new ServiceWorkerWorkerClientPtr();
  };
  ServiceWorkerWorkerClientRegistry_RegisterWorkerClient_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorkerWorkerClientRegistry_RegisterWorkerClient_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorkerWorkerClientRegistry_RegisterWorkerClient_Params.client
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorkerWorkerClientRegistry_RegisterWorkerClient_Params.encodedSize = codec.kStructHeaderSize + 8;

  ServiceWorkerWorkerClientRegistry_RegisterWorkerClient_Params.decode = function(decoder) {
    var packed;
    var val = new ServiceWorkerWorkerClientRegistry_RegisterWorkerClient_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.client = decoder.decodeStruct(new codec.Interface(ServiceWorkerWorkerClientPtr));
    return val;
  };

  ServiceWorkerWorkerClientRegistry_RegisterWorkerClient_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorkerWorkerClientRegistry_RegisterWorkerClient_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(ServiceWorkerWorkerClientPtr), val.client);
  };
  function ServiceWorkerWorkerClientRegistry_CloneWorkerClientRegistry_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorkerWorkerClientRegistry_CloneWorkerClientRegistry_Params.prototype.initDefaults_ = function() {
    this.host = new bindings.InterfaceRequest();
  };
  ServiceWorkerWorkerClientRegistry_CloneWorkerClientRegistry_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorkerWorkerClientRegistry_CloneWorkerClientRegistry_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorkerWorkerClientRegistry_CloneWorkerClientRegistry_Params.host
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorkerWorkerClientRegistry_CloneWorkerClientRegistry_Params.encodedSize = codec.kStructHeaderSize + 8;

  ServiceWorkerWorkerClientRegistry_CloneWorkerClientRegistry_Params.decode = function(decoder) {
    var packed;
    var val = new ServiceWorkerWorkerClientRegistry_CloneWorkerClientRegistry_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.host = decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ServiceWorkerWorkerClientRegistry_CloneWorkerClientRegistry_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorkerWorkerClientRegistry_CloneWorkerClientRegistry_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.host);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  var kServiceWorkerWorkerClient_OnControllerChanged_Name = 0;

  function ServiceWorkerWorkerClientPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(ServiceWorkerWorkerClient,
                                                   handleOrPtrInfo);
  }

  function ServiceWorkerWorkerClientAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        ServiceWorkerWorkerClient, associatedInterfacePtrInfo);
  }

  ServiceWorkerWorkerClientAssociatedPtr.prototype =
      Object.create(ServiceWorkerWorkerClientPtr.prototype);
  ServiceWorkerWorkerClientAssociatedPtr.prototype.constructor =
      ServiceWorkerWorkerClientAssociatedPtr;

  function ServiceWorkerWorkerClientProxy(receiver) {
    this.receiver_ = receiver;
  }
  ServiceWorkerWorkerClientPtr.prototype.onControllerChanged = function() {
    return ServiceWorkerWorkerClientProxy.prototype.onControllerChanged
        .apply(this.ptr.getProxy(), arguments);
  };

  ServiceWorkerWorkerClientProxy.prototype.onControllerChanged = function(mode) {
    var params_ = new ServiceWorkerWorkerClient_OnControllerChanged_Params();
    params_.mode = mode;
    var builder = new codec.MessageV0Builder(
        kServiceWorkerWorkerClient_OnControllerChanged_Name,
        codec.align(ServiceWorkerWorkerClient_OnControllerChanged_Params.encodedSize));
    builder.encodeStruct(ServiceWorkerWorkerClient_OnControllerChanged_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function ServiceWorkerWorkerClientStub(delegate) {
    this.delegate_ = delegate;
  }
  ServiceWorkerWorkerClientStub.prototype.onControllerChanged = function(mode) {
    return this.delegate_ && this.delegate_.onControllerChanged && this.delegate_.onControllerChanged(mode);
  }

  ServiceWorkerWorkerClientStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kServiceWorkerWorkerClient_OnControllerChanged_Name:
      var params = reader.decodeStruct(ServiceWorkerWorkerClient_OnControllerChanged_Params);
      this.onControllerChanged(params.mode);
      return true;
    default:
      return false;
    }
  };

  ServiceWorkerWorkerClientStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateServiceWorkerWorkerClientRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kServiceWorkerWorkerClient_OnControllerChanged_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ServiceWorkerWorkerClient_OnControllerChanged_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateServiceWorkerWorkerClientResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var ServiceWorkerWorkerClient = {
    name: 'blink.mojom.ServiceWorkerWorkerClient',
    kVersion: 0,
    ptrClass: ServiceWorkerWorkerClientPtr,
    proxyClass: ServiceWorkerWorkerClientProxy,
    stubClass: ServiceWorkerWorkerClientStub,
    validateRequest: validateServiceWorkerWorkerClientRequest,
    validateResponse: null,
  };
  ServiceWorkerWorkerClientStub.prototype.validator = validateServiceWorkerWorkerClientRequest;
  ServiceWorkerWorkerClientProxy.prototype.validator = null;
  var kServiceWorkerWorkerClientRegistry_RegisterWorkerClient_Name = 0;
  var kServiceWorkerWorkerClientRegistry_CloneWorkerClientRegistry_Name = 1;

  function ServiceWorkerWorkerClientRegistryPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(ServiceWorkerWorkerClientRegistry,
                                                   handleOrPtrInfo);
  }

  function ServiceWorkerWorkerClientRegistryAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        ServiceWorkerWorkerClientRegistry, associatedInterfacePtrInfo);
  }

  ServiceWorkerWorkerClientRegistryAssociatedPtr.prototype =
      Object.create(ServiceWorkerWorkerClientRegistryPtr.prototype);
  ServiceWorkerWorkerClientRegistryAssociatedPtr.prototype.constructor =
      ServiceWorkerWorkerClientRegistryAssociatedPtr;

  function ServiceWorkerWorkerClientRegistryProxy(receiver) {
    this.receiver_ = receiver;
  }
  ServiceWorkerWorkerClientRegistryPtr.prototype.registerWorkerClient = function() {
    return ServiceWorkerWorkerClientRegistryProxy.prototype.registerWorkerClient
        .apply(this.ptr.getProxy(), arguments);
  };

  ServiceWorkerWorkerClientRegistryProxy.prototype.registerWorkerClient = function(client) {
    var params_ = new ServiceWorkerWorkerClientRegistry_RegisterWorkerClient_Params();
    params_.client = client;
    var builder = new codec.MessageV0Builder(
        kServiceWorkerWorkerClientRegistry_RegisterWorkerClient_Name,
        codec.align(ServiceWorkerWorkerClientRegistry_RegisterWorkerClient_Params.encodedSize));
    builder.encodeStruct(ServiceWorkerWorkerClientRegistry_RegisterWorkerClient_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ServiceWorkerWorkerClientRegistryPtr.prototype.cloneWorkerClientRegistry = function() {
    return ServiceWorkerWorkerClientRegistryProxy.prototype.cloneWorkerClientRegistry
        .apply(this.ptr.getProxy(), arguments);
  };

  ServiceWorkerWorkerClientRegistryProxy.prototype.cloneWorkerClientRegistry = function(host) {
    var params_ = new ServiceWorkerWorkerClientRegistry_CloneWorkerClientRegistry_Params();
    params_.host = host;
    var builder = new codec.MessageV0Builder(
        kServiceWorkerWorkerClientRegistry_CloneWorkerClientRegistry_Name,
        codec.align(ServiceWorkerWorkerClientRegistry_CloneWorkerClientRegistry_Params.encodedSize));
    builder.encodeStruct(ServiceWorkerWorkerClientRegistry_CloneWorkerClientRegistry_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function ServiceWorkerWorkerClientRegistryStub(delegate) {
    this.delegate_ = delegate;
  }
  ServiceWorkerWorkerClientRegistryStub.prototype.registerWorkerClient = function(client) {
    return this.delegate_ && this.delegate_.registerWorkerClient && this.delegate_.registerWorkerClient(client);
  }
  ServiceWorkerWorkerClientRegistryStub.prototype.cloneWorkerClientRegistry = function(host) {
    return this.delegate_ && this.delegate_.cloneWorkerClientRegistry && this.delegate_.cloneWorkerClientRegistry(host);
  }

  ServiceWorkerWorkerClientRegistryStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kServiceWorkerWorkerClientRegistry_RegisterWorkerClient_Name:
      var params = reader.decodeStruct(ServiceWorkerWorkerClientRegistry_RegisterWorkerClient_Params);
      this.registerWorkerClient(params.client);
      return true;
    case kServiceWorkerWorkerClientRegistry_CloneWorkerClientRegistry_Name:
      var params = reader.decodeStruct(ServiceWorkerWorkerClientRegistry_CloneWorkerClientRegistry_Params);
      this.cloneWorkerClientRegistry(params.host);
      return true;
    default:
      return false;
    }
  };

  ServiceWorkerWorkerClientRegistryStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateServiceWorkerWorkerClientRegistryRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kServiceWorkerWorkerClientRegistry_RegisterWorkerClient_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ServiceWorkerWorkerClientRegistry_RegisterWorkerClient_Params;
      break;
      case kServiceWorkerWorkerClientRegistry_CloneWorkerClientRegistry_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ServiceWorkerWorkerClientRegistry_CloneWorkerClientRegistry_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateServiceWorkerWorkerClientRegistryResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var ServiceWorkerWorkerClientRegistry = {
    name: 'blink.mojom.ServiceWorkerWorkerClientRegistry',
    kVersion: 0,
    ptrClass: ServiceWorkerWorkerClientRegistryPtr,
    proxyClass: ServiceWorkerWorkerClientRegistryProxy,
    stubClass: ServiceWorkerWorkerClientRegistryStub,
    validateRequest: validateServiceWorkerWorkerClientRegistryRequest,
    validateResponse: null,
  };
  ServiceWorkerWorkerClientRegistryStub.prototype.validator = validateServiceWorkerWorkerClientRegistryRequest;
  ServiceWorkerWorkerClientRegistryProxy.prototype.validator = null;
  exports.NAVIGATION_SERVICE_WORKER_SPEC = NAVIGATION_SERVICE_WORKER_SPEC;
  exports.ServiceWorkerProviderInfoForClient = ServiceWorkerProviderInfoForClient;
  exports.ServiceWorkerProviderInfoForStartWorker = ServiceWorkerProviderInfoForStartWorker;
  exports.ServiceWorkerWorkerClient = ServiceWorkerWorkerClient;
  exports.ServiceWorkerWorkerClientPtr = ServiceWorkerWorkerClientPtr;
  exports.ServiceWorkerWorkerClientAssociatedPtr = ServiceWorkerWorkerClientAssociatedPtr;
  exports.ServiceWorkerWorkerClientRegistry = ServiceWorkerWorkerClientRegistry;
  exports.ServiceWorkerWorkerClientRegistryPtr = ServiceWorkerWorkerClientRegistryPtr;
  exports.ServiceWorkerWorkerClientRegistryAssociatedPtr = ServiceWorkerWorkerClientRegistryAssociatedPtr;
})();