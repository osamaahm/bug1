// third_party/blink/public/mojom/frame/frame.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'third_party/blink/public/mojom/frame/frame.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('blink.mojom');
  var string16$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/string16.mojom', '../../../../../mojo/public/mojom/base/string16.mojom.js');
  }
  var fullscreen$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/frame/fullscreen.mojom', 'fullscreen.mojom.js');
  }



  function LocalFrameHost_EnterFullscreen_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  LocalFrameHost_EnterFullscreen_Params.prototype.initDefaults_ = function() {
    this.options = null;
  };
  LocalFrameHost_EnterFullscreen_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  LocalFrameHost_EnterFullscreen_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate LocalFrameHost_EnterFullscreen_Params.options
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, fullscreen$.FullscreenOptions, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  LocalFrameHost_EnterFullscreen_Params.encodedSize = codec.kStructHeaderSize + 8;

  LocalFrameHost_EnterFullscreen_Params.decode = function(decoder) {
    var packed;
    var val = new LocalFrameHost_EnterFullscreen_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.options = decoder.decodeStructPointer(fullscreen$.FullscreenOptions);
    return val;
  };

  LocalFrameHost_EnterFullscreen_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(LocalFrameHost_EnterFullscreen_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(fullscreen$.FullscreenOptions, val.options);
  };
  function LocalFrameHost_ExitFullscreen_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  LocalFrameHost_ExitFullscreen_Params.prototype.initDefaults_ = function() {
  };
  LocalFrameHost_ExitFullscreen_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  LocalFrameHost_ExitFullscreen_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  LocalFrameHost_ExitFullscreen_Params.encodedSize = codec.kStructHeaderSize + 0;

  LocalFrameHost_ExitFullscreen_Params.decode = function(decoder) {
    var packed;
    var val = new LocalFrameHost_ExitFullscreen_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  LocalFrameHost_ExitFullscreen_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(LocalFrameHost_ExitFullscreen_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function LocalFrameHost_FullscreenStateChanged_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  LocalFrameHost_FullscreenStateChanged_Params.prototype.initDefaults_ = function() {
    this.isFullscreen = false;
  };
  LocalFrameHost_FullscreenStateChanged_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  LocalFrameHost_FullscreenStateChanged_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  LocalFrameHost_FullscreenStateChanged_Params.encodedSize = codec.kStructHeaderSize + 8;

  LocalFrameHost_FullscreenStateChanged_Params.decode = function(decoder) {
    var packed;
    var val = new LocalFrameHost_FullscreenStateChanged_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.isFullscreen = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  LocalFrameHost_FullscreenStateChanged_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(LocalFrameHost_FullscreenStateChanged_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.isFullscreen & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function Frame_GetTextSurroundingSelection_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Frame_GetTextSurroundingSelection_Params.prototype.initDefaults_ = function() {
    this.maxLength = 0;
  };
  Frame_GetTextSurroundingSelection_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Frame_GetTextSurroundingSelection_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  Frame_GetTextSurroundingSelection_Params.encodedSize = codec.kStructHeaderSize + 8;

  Frame_GetTextSurroundingSelection_Params.decode = function(decoder) {
    var packed;
    var val = new Frame_GetTextSurroundingSelection_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.maxLength = decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Frame_GetTextSurroundingSelection_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Frame_GetTextSurroundingSelection_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.maxLength);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function Frame_GetTextSurroundingSelection_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Frame_GetTextSurroundingSelection_ResponseParams.prototype.initDefaults_ = function() {
    this.content = null;
    this.startOffset = 0;
    this.endOffset = 0;
  };
  Frame_GetTextSurroundingSelection_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Frame_GetTextSurroundingSelection_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Frame_GetTextSurroundingSelection_ResponseParams.content
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, string16$.String16, false);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  Frame_GetTextSurroundingSelection_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  Frame_GetTextSurroundingSelection_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new Frame_GetTextSurroundingSelection_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.content = decoder.decodeStructPointer(string16$.String16);
    val.startOffset = decoder.decodeStruct(codec.Uint32);
    val.endOffset = decoder.decodeStruct(codec.Uint32);
    return val;
  };

  Frame_GetTextSurroundingSelection_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Frame_GetTextSurroundingSelection_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(string16$.String16, val.content);
    encoder.encodeStruct(codec.Uint32, val.startOffset);
    encoder.encodeStruct(codec.Uint32, val.endOffset);
  };
  function Frame_SendInterventionReport_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Frame_SendInterventionReport_Params.prototype.initDefaults_ = function() {
    this.id = null;
    this.message = null;
  };
  Frame_SendInterventionReport_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Frame_SendInterventionReport_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Frame_SendInterventionReport_Params.id
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate Frame_SendInterventionReport_Params.message
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Frame_SendInterventionReport_Params.encodedSize = codec.kStructHeaderSize + 16;

  Frame_SendInterventionReport_Params.decode = function(decoder) {
    var packed;
    var val = new Frame_SendInterventionReport_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id = decoder.decodeStruct(codec.String);
    val.message = decoder.decodeStruct(codec.String);
    return val;
  };

  Frame_SendInterventionReport_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Frame_SendInterventionReport_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.id);
    encoder.encodeStruct(codec.String, val.message);
  };
  var kLocalFrameHost_EnterFullscreen_Name = 0;
  var kLocalFrameHost_ExitFullscreen_Name = 1;
  var kLocalFrameHost_FullscreenStateChanged_Name = 2;

  function LocalFrameHostPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(LocalFrameHost,
                                                   handleOrPtrInfo);
  }

  function LocalFrameHostAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        LocalFrameHost, associatedInterfacePtrInfo);
  }

  LocalFrameHostAssociatedPtr.prototype =
      Object.create(LocalFrameHostPtr.prototype);
  LocalFrameHostAssociatedPtr.prototype.constructor =
      LocalFrameHostAssociatedPtr;

  function LocalFrameHostProxy(receiver) {
    this.receiver_ = receiver;
  }
  LocalFrameHostPtr.prototype.enterFullscreen = function() {
    return LocalFrameHostProxy.prototype.enterFullscreen
        .apply(this.ptr.getProxy(), arguments);
  };

  LocalFrameHostProxy.prototype.enterFullscreen = function(options) {
    var params_ = new LocalFrameHost_EnterFullscreen_Params();
    params_.options = options;
    var builder = new codec.MessageV0Builder(
        kLocalFrameHost_EnterFullscreen_Name,
        codec.align(LocalFrameHost_EnterFullscreen_Params.encodedSize));
    builder.encodeStruct(LocalFrameHost_EnterFullscreen_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  LocalFrameHostPtr.prototype.exitFullscreen = function() {
    return LocalFrameHostProxy.prototype.exitFullscreen
        .apply(this.ptr.getProxy(), arguments);
  };

  LocalFrameHostProxy.prototype.exitFullscreen = function() {
    var params_ = new LocalFrameHost_ExitFullscreen_Params();
    var builder = new codec.MessageV0Builder(
        kLocalFrameHost_ExitFullscreen_Name,
        codec.align(LocalFrameHost_ExitFullscreen_Params.encodedSize));
    builder.encodeStruct(LocalFrameHost_ExitFullscreen_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  LocalFrameHostPtr.prototype.fullscreenStateChanged = function() {
    return LocalFrameHostProxy.prototype.fullscreenStateChanged
        .apply(this.ptr.getProxy(), arguments);
  };

  LocalFrameHostProxy.prototype.fullscreenStateChanged = function(isFullscreen) {
    var params_ = new LocalFrameHost_FullscreenStateChanged_Params();
    params_.isFullscreen = isFullscreen;
    var builder = new codec.MessageV0Builder(
        kLocalFrameHost_FullscreenStateChanged_Name,
        codec.align(LocalFrameHost_FullscreenStateChanged_Params.encodedSize));
    builder.encodeStruct(LocalFrameHost_FullscreenStateChanged_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function LocalFrameHostStub(delegate) {
    this.delegate_ = delegate;
  }
  LocalFrameHostStub.prototype.enterFullscreen = function(options) {
    return this.delegate_ && this.delegate_.enterFullscreen && this.delegate_.enterFullscreen(options);
  }
  LocalFrameHostStub.prototype.exitFullscreen = function() {
    return this.delegate_ && this.delegate_.exitFullscreen && this.delegate_.exitFullscreen();
  }
  LocalFrameHostStub.prototype.fullscreenStateChanged = function(isFullscreen) {
    return this.delegate_ && this.delegate_.fullscreenStateChanged && this.delegate_.fullscreenStateChanged(isFullscreen);
  }

  LocalFrameHostStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kLocalFrameHost_EnterFullscreen_Name:
      var params = reader.decodeStruct(LocalFrameHost_EnterFullscreen_Params);
      this.enterFullscreen(params.options);
      return true;
    case kLocalFrameHost_ExitFullscreen_Name:
      var params = reader.decodeStruct(LocalFrameHost_ExitFullscreen_Params);
      this.exitFullscreen();
      return true;
    case kLocalFrameHost_FullscreenStateChanged_Name:
      var params = reader.decodeStruct(LocalFrameHost_FullscreenStateChanged_Params);
      this.fullscreenStateChanged(params.isFullscreen);
      return true;
    default:
      return false;
    }
  };

  LocalFrameHostStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateLocalFrameHostRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kLocalFrameHost_EnterFullscreen_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = LocalFrameHost_EnterFullscreen_Params;
      break;
      case kLocalFrameHost_ExitFullscreen_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = LocalFrameHost_ExitFullscreen_Params;
      break;
      case kLocalFrameHost_FullscreenStateChanged_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = LocalFrameHost_FullscreenStateChanged_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateLocalFrameHostResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var LocalFrameHost = {
    name: 'blink.mojom.LocalFrameHost',
    kVersion: 0,
    ptrClass: LocalFrameHostPtr,
    proxyClass: LocalFrameHostProxy,
    stubClass: LocalFrameHostStub,
    validateRequest: validateLocalFrameHostRequest,
    validateResponse: null,
  };
  LocalFrameHostStub.prototype.validator = validateLocalFrameHostRequest;
  LocalFrameHostProxy.prototype.validator = null;
  var kFrame_GetTextSurroundingSelection_Name = 0;
  var kFrame_SendInterventionReport_Name = 1;

  function FramePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(Frame,
                                                   handleOrPtrInfo);
  }

  function FrameAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        Frame, associatedInterfacePtrInfo);
  }

  FrameAssociatedPtr.prototype =
      Object.create(FramePtr.prototype);
  FrameAssociatedPtr.prototype.constructor =
      FrameAssociatedPtr;

  function FrameProxy(receiver) {
    this.receiver_ = receiver;
  }
  FramePtr.prototype.getTextSurroundingSelection = function() {
    return FrameProxy.prototype.getTextSurroundingSelection
        .apply(this.ptr.getProxy(), arguments);
  };

  FrameProxy.prototype.getTextSurroundingSelection = function(maxLength) {
    var params_ = new Frame_GetTextSurroundingSelection_Params();
    params_.maxLength = maxLength;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kFrame_GetTextSurroundingSelection_Name,
          codec.align(Frame_GetTextSurroundingSelection_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(Frame_GetTextSurroundingSelection_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(Frame_GetTextSurroundingSelection_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  FramePtr.prototype.sendInterventionReport = function() {
    return FrameProxy.prototype.sendInterventionReport
        .apply(this.ptr.getProxy(), arguments);
  };

  FrameProxy.prototype.sendInterventionReport = function(id, message) {
    var params_ = new Frame_SendInterventionReport_Params();
    params_.id = id;
    params_.message = message;
    var builder = new codec.MessageV0Builder(
        kFrame_SendInterventionReport_Name,
        codec.align(Frame_SendInterventionReport_Params.encodedSize));
    builder.encodeStruct(Frame_SendInterventionReport_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function FrameStub(delegate) {
    this.delegate_ = delegate;
  }
  FrameStub.prototype.getTextSurroundingSelection = function(maxLength) {
    return this.delegate_ && this.delegate_.getTextSurroundingSelection && this.delegate_.getTextSurroundingSelection(maxLength);
  }
  FrameStub.prototype.sendInterventionReport = function(id, message) {
    return this.delegate_ && this.delegate_.sendInterventionReport && this.delegate_.sendInterventionReport(id, message);
  }

  FrameStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kFrame_SendInterventionReport_Name:
      var params = reader.decodeStruct(Frame_SendInterventionReport_Params);
      this.sendInterventionReport(params.id, params.message);
      return true;
    default:
      return false;
    }
  };

  FrameStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kFrame_GetTextSurroundingSelection_Name:
      var params = reader.decodeStruct(Frame_GetTextSurroundingSelection_Params);
      this.getTextSurroundingSelection(params.maxLength).then(function(response) {
        var responseParams =
            new Frame_GetTextSurroundingSelection_ResponseParams();
        responseParams.content = response.content;
        responseParams.startOffset = response.startOffset;
        responseParams.endOffset = response.endOffset;
        var builder = new codec.MessageV1Builder(
            kFrame_GetTextSurroundingSelection_Name,
            codec.align(Frame_GetTextSurroundingSelection_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(Frame_GetTextSurroundingSelection_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateFrameRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kFrame_GetTextSurroundingSelection_Name:
        if (message.expectsResponse())
          paramsClass = Frame_GetTextSurroundingSelection_Params;
      break;
      case kFrame_SendInterventionReport_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Frame_SendInterventionReport_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateFrameResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kFrame_GetTextSurroundingSelection_Name:
        if (message.isResponse())
          paramsClass = Frame_GetTextSurroundingSelection_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var Frame = {
    name: 'blink.mojom.Frame',
    kVersion: 0,
    ptrClass: FramePtr,
    proxyClass: FrameProxy,
    stubClass: FrameStub,
    validateRequest: validateFrameRequest,
    validateResponse: validateFrameResponse,
  };
  FrameStub.prototype.validator = validateFrameRequest;
  FrameProxy.prototype.validator = validateFrameResponse;
  exports.LocalFrameHost = LocalFrameHost;
  exports.LocalFrameHostPtr = LocalFrameHostPtr;
  exports.LocalFrameHostAssociatedPtr = LocalFrameHostAssociatedPtr;
  exports.Frame = Frame;
  exports.FramePtr = FramePtr;
  exports.FrameAssociatedPtr = FrameAssociatedPtr;
})();