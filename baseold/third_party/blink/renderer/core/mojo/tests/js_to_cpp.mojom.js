// third_party/blink/renderer/core/mojo/tests/js_to_cpp.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'third_party/blink/renderer/core/mojo/tests/js_to_cpp.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('jsToCpp');



  function EchoArgs(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  EchoArgs.prototype.initDefaults_ = function() {
    this.si64 = 0;
    this.si32 = 0;
    this.si16 = 0;
    this.si8 = 0;
    this.ui8 = 0;
    this.ui64 = 0;
    this.ui32 = 0;
    this.ui16 = 0;
    this.floatVal = 0;
    this.floatInf = 0;
    this.floatNan = 0;
    this.messageHandle = null;
    this.doubleVal = 0;
    this.doubleInf = 0;
    this.doubleNan = 0;
    this.name = null;
    this.stringArray = null;
    this.dataHandle = null;
  };
  EchoArgs.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  EchoArgs.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 104}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;
















    // validate EchoArgs.name
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 72, true)
    if (err !== validator.validationError.NONE)
        return err;


    // validate EchoArgs.stringArray
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 80, 8, codec.String, true, [0, 0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate EchoArgs.messageHandle
    err = messageValidator.validateHandle(offset + codec.kStructHeaderSize + 44, true)
    if (err !== validator.validationError.NONE)
        return err;


    // validate EchoArgs.dataHandle
    err = messageValidator.validateHandle(offset + codec.kStructHeaderSize + 88, true)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  EchoArgs.encodedSize = codec.kStructHeaderSize + 96;

  EchoArgs.decode = function(decoder) {
    var packed;
    var val = new EchoArgs();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.si64 = decoder.decodeStruct(codec.Int64);
    val.si32 = decoder.decodeStruct(codec.Int32);
    val.si16 = decoder.decodeStruct(codec.Int16);
    val.si8 = decoder.decodeStruct(codec.Int8);
    val.ui8 = decoder.decodeStruct(codec.Uint8);
    val.ui64 = decoder.decodeStruct(codec.Uint64);
    val.ui32 = decoder.decodeStruct(codec.Uint32);
    val.ui16 = decoder.decodeStruct(codec.Uint16);
    decoder.skip(1);
    decoder.skip(1);
    val.floatVal = decoder.decodeStruct(codec.Float);
    val.floatInf = decoder.decodeStruct(codec.Float);
    val.floatNan = decoder.decodeStruct(codec.Float);
    val.messageHandle = decoder.decodeStruct(codec.NullableHandle);
    val.doubleVal = decoder.decodeStruct(codec.Double);
    val.doubleInf = decoder.decodeStruct(codec.Double);
    val.doubleNan = decoder.decodeStruct(codec.Double);
    val.name = decoder.decodeStruct(codec.NullableString);
    val.stringArray = decoder.decodeArrayPointer(codec.String);
    val.dataHandle = decoder.decodeStruct(codec.NullableHandle);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  EchoArgs.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(EchoArgs.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int64, val.si64);
    encoder.encodeStruct(codec.Int32, val.si32);
    encoder.encodeStruct(codec.Int16, val.si16);
    encoder.encodeStruct(codec.Int8, val.si8);
    encoder.encodeStruct(codec.Uint8, val.ui8);
    encoder.encodeStruct(codec.Uint64, val.ui64);
    encoder.encodeStruct(codec.Uint32, val.ui32);
    encoder.encodeStruct(codec.Uint16, val.ui16);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Float, val.floatVal);
    encoder.encodeStruct(codec.Float, val.floatInf);
    encoder.encodeStruct(codec.Float, val.floatNan);
    encoder.encodeStruct(codec.NullableHandle, val.messageHandle);
    encoder.encodeStruct(codec.Double, val.doubleVal);
    encoder.encodeStruct(codec.Double, val.doubleInf);
    encoder.encodeStruct(codec.Double, val.doubleNan);
    encoder.encodeStruct(codec.NullableString, val.name);
    encoder.encodeArrayPointer(codec.String, val.stringArray);
    encoder.encodeStruct(codec.NullableHandle, val.dataHandle);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function EchoArgsList(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  EchoArgsList.prototype.initDefaults_ = function() {
    this.next = null;
    this.item = null;
  };
  EchoArgsList.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  EchoArgsList.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate EchoArgsList.next
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, EchoArgsList, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate EchoArgsList.item
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, EchoArgs, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  EchoArgsList.encodedSize = codec.kStructHeaderSize + 16;

  EchoArgsList.decode = function(decoder) {
    var packed;
    var val = new EchoArgsList();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.next = decoder.decodeStructPointer(EchoArgsList);
    val.item = decoder.decodeStructPointer(EchoArgs);
    return val;
  };

  EchoArgsList.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(EchoArgsList.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(EchoArgsList, val.next);
    encoder.encodeStructPointer(EchoArgs, val.item);
  };
  function CppSide_StartTest_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CppSide_StartTest_Params.prototype.initDefaults_ = function() {
  };
  CppSide_StartTest_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CppSide_StartTest_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CppSide_StartTest_Params.encodedSize = codec.kStructHeaderSize + 0;

  CppSide_StartTest_Params.decode = function(decoder) {
    var packed;
    var val = new CppSide_StartTest_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  CppSide_StartTest_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CppSide_StartTest_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function CppSide_TestFinished_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CppSide_TestFinished_Params.prototype.initDefaults_ = function() {
  };
  CppSide_TestFinished_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CppSide_TestFinished_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CppSide_TestFinished_Params.encodedSize = codec.kStructHeaderSize + 0;

  CppSide_TestFinished_Params.decode = function(decoder) {
    var packed;
    var val = new CppSide_TestFinished_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  CppSide_TestFinished_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CppSide_TestFinished_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function CppSide_PingResponse_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CppSide_PingResponse_Params.prototype.initDefaults_ = function() {
  };
  CppSide_PingResponse_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CppSide_PingResponse_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CppSide_PingResponse_Params.encodedSize = codec.kStructHeaderSize + 0;

  CppSide_PingResponse_Params.decode = function(decoder) {
    var packed;
    var val = new CppSide_PingResponse_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  CppSide_PingResponse_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CppSide_PingResponse_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function CppSide_EchoResponse_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CppSide_EchoResponse_Params.prototype.initDefaults_ = function() {
    this.list = null;
  };
  CppSide_EchoResponse_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CppSide_EchoResponse_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CppSide_EchoResponse_Params.list
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, EchoArgsList, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CppSide_EchoResponse_Params.encodedSize = codec.kStructHeaderSize + 8;

  CppSide_EchoResponse_Params.decode = function(decoder) {
    var packed;
    var val = new CppSide_EchoResponse_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.list = decoder.decodeStructPointer(EchoArgsList);
    return val;
  };

  CppSide_EchoResponse_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CppSide_EchoResponse_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(EchoArgsList, val.list);
  };
  function CppSide_BitFlipResponse_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CppSide_BitFlipResponse_Params.prototype.initDefaults_ = function() {
    this.arg = null;
    this.notUsed = new associatedBindings.AssociatedInterfacePtrInfo();
  };
  CppSide_BitFlipResponse_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CppSide_BitFlipResponse_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CppSide_BitFlipResponse_Params.arg
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, EchoArgsList, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CppSide_BitFlipResponse_Params.notUsed
    err = messageValidator.validateAssociatedInterface(offset + codec.kStructHeaderSize + 8, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CppSide_BitFlipResponse_Params.encodedSize = codec.kStructHeaderSize + 16;

  CppSide_BitFlipResponse_Params.decode = function(decoder) {
    var packed;
    var val = new CppSide_BitFlipResponse_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.arg = decoder.decodeStructPointer(EchoArgsList);
    val.notUsed = decoder.decodeStruct(codec.NullableAssociatedInterfacePtrInfo);
    return val;
  };

  CppSide_BitFlipResponse_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CppSide_BitFlipResponse_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(EchoArgsList, val.arg);
    encoder.encodeStruct(codec.NullableAssociatedInterfacePtrInfo, val.notUsed);
  };
  function CppSide_BackPointerResponse_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CppSide_BackPointerResponse_Params.prototype.initDefaults_ = function() {
    this.arg = null;
  };
  CppSide_BackPointerResponse_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CppSide_BackPointerResponse_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CppSide_BackPointerResponse_Params.arg
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, EchoArgsList, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CppSide_BackPointerResponse_Params.encodedSize = codec.kStructHeaderSize + 8;

  CppSide_BackPointerResponse_Params.decode = function(decoder) {
    var packed;
    var val = new CppSide_BackPointerResponse_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.arg = decoder.decodeStructPointer(EchoArgsList);
    return val;
  };

  CppSide_BackPointerResponse_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CppSide_BackPointerResponse_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(EchoArgsList, val.arg);
  };
  function JsSide_SetCppSide_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  JsSide_SetCppSide_Params.prototype.initDefaults_ = function() {
    this.cpp = new CppSidePtr();
  };
  JsSide_SetCppSide_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  JsSide_SetCppSide_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate JsSide_SetCppSide_Params.cpp
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  JsSide_SetCppSide_Params.encodedSize = codec.kStructHeaderSize + 8;

  JsSide_SetCppSide_Params.decode = function(decoder) {
    var packed;
    var val = new JsSide_SetCppSide_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.cpp = decoder.decodeStruct(new codec.Interface(CppSidePtr));
    return val;
  };

  JsSide_SetCppSide_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(JsSide_SetCppSide_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(CppSidePtr), val.cpp);
  };
  function JsSide_Ping_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  JsSide_Ping_Params.prototype.initDefaults_ = function() {
  };
  JsSide_Ping_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  JsSide_Ping_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  JsSide_Ping_Params.encodedSize = codec.kStructHeaderSize + 0;

  JsSide_Ping_Params.decode = function(decoder) {
    var packed;
    var val = new JsSide_Ping_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  JsSide_Ping_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(JsSide_Ping_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function JsSide_Echo_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  JsSide_Echo_Params.prototype.initDefaults_ = function() {
    this.numIterations = 0;
    this.arg = null;
  };
  JsSide_Echo_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  JsSide_Echo_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate JsSide_Echo_Params.arg
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, EchoArgs, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  JsSide_Echo_Params.encodedSize = codec.kStructHeaderSize + 16;

  JsSide_Echo_Params.decode = function(decoder) {
    var packed;
    var val = new JsSide_Echo_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.numIterations = decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.arg = decoder.decodeStructPointer(EchoArgs);
    return val;
  };

  JsSide_Echo_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(JsSide_Echo_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.numIterations);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(EchoArgs, val.arg);
  };
  function JsSide_BitFlip_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  JsSide_BitFlip_Params.prototype.initDefaults_ = function() {
    this.arg = null;
  };
  JsSide_BitFlip_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  JsSide_BitFlip_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate JsSide_BitFlip_Params.arg
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, EchoArgs, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  JsSide_BitFlip_Params.encodedSize = codec.kStructHeaderSize + 8;

  JsSide_BitFlip_Params.decode = function(decoder) {
    var packed;
    var val = new JsSide_BitFlip_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.arg = decoder.decodeStructPointer(EchoArgs);
    return val;
  };

  JsSide_BitFlip_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(JsSide_BitFlip_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(EchoArgs, val.arg);
  };
  function JsSide_BackPointer_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  JsSide_BackPointer_Params.prototype.initDefaults_ = function() {
    this.arg = null;
  };
  JsSide_BackPointer_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  JsSide_BackPointer_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate JsSide_BackPointer_Params.arg
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, EchoArgs, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  JsSide_BackPointer_Params.encodedSize = codec.kStructHeaderSize + 8;

  JsSide_BackPointer_Params.decode = function(decoder) {
    var packed;
    var val = new JsSide_BackPointer_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.arg = decoder.decodeStructPointer(EchoArgs);
    return val;
  };

  JsSide_BackPointer_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(JsSide_BackPointer_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(EchoArgs, val.arg);
  };

  function ForTestingPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(ForTesting,
                                                   handleOrPtrInfo);
  }

  function ForTestingAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        ForTesting, associatedInterfacePtrInfo);
  }

  ForTestingAssociatedPtr.prototype =
      Object.create(ForTestingPtr.prototype);
  ForTestingAssociatedPtr.prototype.constructor =
      ForTestingAssociatedPtr;

  function ForTestingProxy(receiver) {
    this.receiver_ = receiver;
  }

  function ForTestingStub(delegate) {
    this.delegate_ = delegate;
  }

  ForTestingStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  ForTestingStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateForTestingRequest(messageValidator) {
    return validator.validationError.NONE;
  }

  function validateForTestingResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var ForTesting = {
    name: 'js_to_cpp.ForTesting',
    kVersion: 0,
    ptrClass: ForTestingPtr,
    proxyClass: ForTestingProxy,
    stubClass: ForTestingStub,
    validateRequest: validateForTestingRequest,
    validateResponse: null,
  };
  ForTestingStub.prototype.validator = validateForTestingRequest;
  ForTestingProxy.prototype.validator = null;
  var kCppSide_StartTest_Name = 88888888;
  var kCppSide_TestFinished_Name = 99999999;
  var kCppSide_PingResponse_Name = 100000000;
  var kCppSide_EchoResponse_Name = 100000001;
  var kCppSide_BitFlipResponse_Name = 100000002;
  var kCppSide_BackPointerResponse_Name = 100000003;

  function CppSidePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(CppSide,
                                                   handleOrPtrInfo);
  }

  function CppSideAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        CppSide, associatedInterfacePtrInfo);
  }

  CppSideAssociatedPtr.prototype =
      Object.create(CppSidePtr.prototype);
  CppSideAssociatedPtr.prototype.constructor =
      CppSideAssociatedPtr;

  function CppSideProxy(receiver) {
    this.receiver_ = receiver;
  }
  CppSidePtr.prototype.startTest = function() {
    return CppSideProxy.prototype.startTest
        .apply(this.ptr.getProxy(), arguments);
  };

  CppSideProxy.prototype.startTest = function() {
    var params_ = new CppSide_StartTest_Params();
    var builder = new codec.MessageV0Builder(
        kCppSide_StartTest_Name,
        codec.align(CppSide_StartTest_Params.encodedSize));
    builder.encodeStruct(CppSide_StartTest_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  CppSidePtr.prototype.testFinished = function() {
    return CppSideProxy.prototype.testFinished
        .apply(this.ptr.getProxy(), arguments);
  };

  CppSideProxy.prototype.testFinished = function() {
    var params_ = new CppSide_TestFinished_Params();
    var builder = new codec.MessageV0Builder(
        kCppSide_TestFinished_Name,
        codec.align(CppSide_TestFinished_Params.encodedSize));
    builder.encodeStruct(CppSide_TestFinished_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  CppSidePtr.prototype.pingResponse = function() {
    return CppSideProxy.prototype.pingResponse
        .apply(this.ptr.getProxy(), arguments);
  };

  CppSideProxy.prototype.pingResponse = function() {
    var params_ = new CppSide_PingResponse_Params();
    var builder = new codec.MessageV0Builder(
        kCppSide_PingResponse_Name,
        codec.align(CppSide_PingResponse_Params.encodedSize));
    builder.encodeStruct(CppSide_PingResponse_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  CppSidePtr.prototype.echoResponse = function() {
    return CppSideProxy.prototype.echoResponse
        .apply(this.ptr.getProxy(), arguments);
  };

  CppSideProxy.prototype.echoResponse = function(list) {
    var params_ = new CppSide_EchoResponse_Params();
    params_.list = list;
    var builder = new codec.MessageV0Builder(
        kCppSide_EchoResponse_Name,
        codec.align(CppSide_EchoResponse_Params.encodedSize));
    builder.encodeStruct(CppSide_EchoResponse_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  CppSidePtr.prototype.bitFlipResponse = function() {
    return CppSideProxy.prototype.bitFlipResponse
        .apply(this.ptr.getProxy(), arguments);
  };

  CppSideProxy.prototype.bitFlipResponse = function(arg, notUsed) {
    var params_ = new CppSide_BitFlipResponse_Params();
    params_.arg = arg;
    params_.notUsed = notUsed;
    var builder = new codec.MessageV2Builder(
        kCppSide_BitFlipResponse_Name,
        codec.align(CppSide_BitFlipResponse_Params.encodedSize));
    builder.setPayload(CppSide_BitFlipResponse_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  CppSidePtr.prototype.backPointerResponse = function() {
    return CppSideProxy.prototype.backPointerResponse
        .apply(this.ptr.getProxy(), arguments);
  };

  CppSideProxy.prototype.backPointerResponse = function(arg) {
    var params_ = new CppSide_BackPointerResponse_Params();
    params_.arg = arg;
    var builder = new codec.MessageV0Builder(
        kCppSide_BackPointerResponse_Name,
        codec.align(CppSide_BackPointerResponse_Params.encodedSize));
    builder.encodeStruct(CppSide_BackPointerResponse_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function CppSideStub(delegate) {
    this.delegate_ = delegate;
  }
  CppSideStub.prototype.startTest = function() {
    return this.delegate_ && this.delegate_.startTest && this.delegate_.startTest();
  }
  CppSideStub.prototype.testFinished = function() {
    return this.delegate_ && this.delegate_.testFinished && this.delegate_.testFinished();
  }
  CppSideStub.prototype.pingResponse = function() {
    return this.delegate_ && this.delegate_.pingResponse && this.delegate_.pingResponse();
  }
  CppSideStub.prototype.echoResponse = function(list) {
    return this.delegate_ && this.delegate_.echoResponse && this.delegate_.echoResponse(list);
  }
  CppSideStub.prototype.bitFlipResponse = function(arg, notUsed) {
    return this.delegate_ && this.delegate_.bitFlipResponse && this.delegate_.bitFlipResponse(arg, notUsed);
  }
  CppSideStub.prototype.backPointerResponse = function(arg) {
    return this.delegate_ && this.delegate_.backPointerResponse && this.delegate_.backPointerResponse(arg);
  }

  CppSideStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kCppSide_StartTest_Name:
      var params = reader.decodeStruct(CppSide_StartTest_Params);
      this.startTest();
      return true;
    case kCppSide_TestFinished_Name:
      var params = reader.decodeStruct(CppSide_TestFinished_Params);
      this.testFinished();
      return true;
    case kCppSide_PingResponse_Name:
      var params = reader.decodeStruct(CppSide_PingResponse_Params);
      this.pingResponse();
      return true;
    case kCppSide_EchoResponse_Name:
      var params = reader.decodeStruct(CppSide_EchoResponse_Params);
      this.echoResponse(params.list);
      return true;
    case kCppSide_BitFlipResponse_Name:
      var params = reader.decodeStruct(CppSide_BitFlipResponse_Params);
      this.bitFlipResponse(params.arg, params.notUsed);
      return true;
    case kCppSide_BackPointerResponse_Name:
      var params = reader.decodeStruct(CppSide_BackPointerResponse_Params);
      this.backPointerResponse(params.arg);
      return true;
    default:
      return false;
    }
  };

  CppSideStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateCppSideRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kCppSide_StartTest_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = CppSide_StartTest_Params;
      break;
      case kCppSide_TestFinished_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = CppSide_TestFinished_Params;
      break;
      case kCppSide_PingResponse_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = CppSide_PingResponse_Params;
      break;
      case kCppSide_EchoResponse_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = CppSide_EchoResponse_Params;
      break;
      case kCppSide_BitFlipResponse_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = CppSide_BitFlipResponse_Params;
      break;
      case kCppSide_BackPointerResponse_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = CppSide_BackPointerResponse_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateCppSideResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var CppSide = {
    name: 'js_to_cpp.CppSide',
    kVersion: 0,
    ptrClass: CppSidePtr,
    proxyClass: CppSideProxy,
    stubClass: CppSideStub,
    validateRequest: validateCppSideRequest,
    validateResponse: null,
  };
  CppSideStub.prototype.validator = validateCppSideRequest;
  CppSideProxy.prototype.validator = null;
  var kJsSide_SetCppSide_Name = 0;
  var kJsSide_Ping_Name = 1;
  var kJsSide_Echo_Name = 2;
  var kJsSide_BitFlip_Name = 3;
  var kJsSide_BackPointer_Name = 4;

  function JsSidePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(JsSide,
                                                   handleOrPtrInfo);
  }

  function JsSideAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        JsSide, associatedInterfacePtrInfo);
  }

  JsSideAssociatedPtr.prototype =
      Object.create(JsSidePtr.prototype);
  JsSideAssociatedPtr.prototype.constructor =
      JsSideAssociatedPtr;

  function JsSideProxy(receiver) {
    this.receiver_ = receiver;
  }
  JsSidePtr.prototype.setCppSide = function() {
    return JsSideProxy.prototype.setCppSide
        .apply(this.ptr.getProxy(), arguments);
  };

  JsSideProxy.prototype.setCppSide = function(cpp) {
    var params_ = new JsSide_SetCppSide_Params();
    params_.cpp = cpp;
    var builder = new codec.MessageV0Builder(
        kJsSide_SetCppSide_Name,
        codec.align(JsSide_SetCppSide_Params.encodedSize));
    builder.encodeStruct(JsSide_SetCppSide_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  JsSidePtr.prototype.ping = function() {
    return JsSideProxy.prototype.ping
        .apply(this.ptr.getProxy(), arguments);
  };

  JsSideProxy.prototype.ping = function() {
    var params_ = new JsSide_Ping_Params();
    var builder = new codec.MessageV0Builder(
        kJsSide_Ping_Name,
        codec.align(JsSide_Ping_Params.encodedSize));
    builder.encodeStruct(JsSide_Ping_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  JsSidePtr.prototype.echo = function() {
    return JsSideProxy.prototype.echo
        .apply(this.ptr.getProxy(), arguments);
  };

  JsSideProxy.prototype.echo = function(numIterations, arg) {
    var params_ = new JsSide_Echo_Params();
    params_.numIterations = numIterations;
    params_.arg = arg;
    var builder = new codec.MessageV0Builder(
        kJsSide_Echo_Name,
        codec.align(JsSide_Echo_Params.encodedSize));
    builder.encodeStruct(JsSide_Echo_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  JsSidePtr.prototype.bitFlip = function() {
    return JsSideProxy.prototype.bitFlip
        .apply(this.ptr.getProxy(), arguments);
  };

  JsSideProxy.prototype.bitFlip = function(arg) {
    var params_ = new JsSide_BitFlip_Params();
    params_.arg = arg;
    var builder = new codec.MessageV0Builder(
        kJsSide_BitFlip_Name,
        codec.align(JsSide_BitFlip_Params.encodedSize));
    builder.encodeStruct(JsSide_BitFlip_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  JsSidePtr.prototype.backPointer = function() {
    return JsSideProxy.prototype.backPointer
        .apply(this.ptr.getProxy(), arguments);
  };

  JsSideProxy.prototype.backPointer = function(arg) {
    var params_ = new JsSide_BackPointer_Params();
    params_.arg = arg;
    var builder = new codec.MessageV0Builder(
        kJsSide_BackPointer_Name,
        codec.align(JsSide_BackPointer_Params.encodedSize));
    builder.encodeStruct(JsSide_BackPointer_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function JsSideStub(delegate) {
    this.delegate_ = delegate;
  }
  JsSideStub.prototype.setCppSide = function(cpp) {
    return this.delegate_ && this.delegate_.setCppSide && this.delegate_.setCppSide(cpp);
  }
  JsSideStub.prototype.ping = function() {
    return this.delegate_ && this.delegate_.ping && this.delegate_.ping();
  }
  JsSideStub.prototype.echo = function(numIterations, arg) {
    return this.delegate_ && this.delegate_.echo && this.delegate_.echo(numIterations, arg);
  }
  JsSideStub.prototype.bitFlip = function(arg) {
    return this.delegate_ && this.delegate_.bitFlip && this.delegate_.bitFlip(arg);
  }
  JsSideStub.prototype.backPointer = function(arg) {
    return this.delegate_ && this.delegate_.backPointer && this.delegate_.backPointer(arg);
  }

  JsSideStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kJsSide_SetCppSide_Name:
      var params = reader.decodeStruct(JsSide_SetCppSide_Params);
      this.setCppSide(params.cpp);
      return true;
    case kJsSide_Ping_Name:
      var params = reader.decodeStruct(JsSide_Ping_Params);
      this.ping();
      return true;
    case kJsSide_Echo_Name:
      var params = reader.decodeStruct(JsSide_Echo_Params);
      this.echo(params.numIterations, params.arg);
      return true;
    case kJsSide_BitFlip_Name:
      var params = reader.decodeStruct(JsSide_BitFlip_Params);
      this.bitFlip(params.arg);
      return true;
    case kJsSide_BackPointer_Name:
      var params = reader.decodeStruct(JsSide_BackPointer_Params);
      this.backPointer(params.arg);
      return true;
    default:
      return false;
    }
  };

  JsSideStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateJsSideRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kJsSide_SetCppSide_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = JsSide_SetCppSide_Params;
      break;
      case kJsSide_Ping_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = JsSide_Ping_Params;
      break;
      case kJsSide_Echo_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = JsSide_Echo_Params;
      break;
      case kJsSide_BitFlip_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = JsSide_BitFlip_Params;
      break;
      case kJsSide_BackPointer_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = JsSide_BackPointer_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateJsSideResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var JsSide = {
    name: 'js_to_cpp.JsSide',
    kVersion: 0,
    ptrClass: JsSidePtr,
    proxyClass: JsSideProxy,
    stubClass: JsSideStub,
    validateRequest: validateJsSideRequest,
    validateResponse: null,
  };
  JsSideStub.prototype.validator = validateJsSideRequest;
  JsSideProxy.prototype.validator = null;
  exports.EchoArgs = EchoArgs;
  exports.EchoArgsList = EchoArgsList;
  exports.ForTesting = ForTesting;
  exports.ForTestingPtr = ForTestingPtr;
  exports.ForTestingAssociatedPtr = ForTestingAssociatedPtr;
  exports.CppSide = CppSide;
  exports.CppSidePtr = CppSidePtr;
  exports.CppSideAssociatedPtr = CppSideAssociatedPtr;
  exports.JsSide = JsSide;
  exports.JsSidePtr = JsSidePtr;
  exports.JsSideAssociatedPtr = JsSideAssociatedPtr;
})();