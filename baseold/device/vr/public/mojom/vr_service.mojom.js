// device/vr/public/mojom/vr_service.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'device/vr/public/mojom/vr_service.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('device.mojom');
  var gamepad$ =
      mojo.internal.exposeNamespace('device.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'device/gamepad/public/mojom/gamepad.mojom', '../../../gamepad/public/mojom/gamepad.mojom.js');
  }
  var time$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/time.mojom', '../../../../mojo/public/mojom/base/time.mojom.js');
  }
  var mailbox_holder$ =
      mojo.internal.exposeNamespace('gpu.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'gpu/ipc/common/mailbox_holder.mojom', '../../../../gpu/ipc/common/mailbox_holder.mojom.js');
  }
  var sync_token$ =
      mojo.internal.exposeNamespace('gpu.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'gpu/ipc/common/sync_token.mojom', '../../../../gpu/ipc/common/sync_token.mojom.js');
  }
  var display$ =
      mojo.internal.exposeNamespace('display.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/display/mojom/display.mojom', '../../../../ui/display/mojom/display.mojom.js');
  }
  var geometry$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/geometry/mojom/geometry.mojom', '../../../../ui/gfx/geometry/mojom/geometry.mojom.js');
  }
  var gpu_fence_handle$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/mojom/gpu_fence_handle.mojom', '../../../../ui/gfx/mojom/gpu_fence_handle.mojom.js');
  }
  var transform$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/mojom/transform.mojom', '../../../../ui/gfx/mojom/transform.mojom.js');
  }


  var XRDeviceId = {};
  XRDeviceId.WEB_TEST_DEVICE_ID = 0;
  XRDeviceId.FAKE_DEVICE_ID = 1;
  XRDeviceId.ORIENTATION_DEVICE_ID = 2;
  XRDeviceId.GVR_DEVICE_ID = 3;
  XRDeviceId.ARCORE_DEVICE_ID = 7;
  XRDeviceId.MIN_VALUE = 0,
  XRDeviceId.MAX_VALUE = 7,

  XRDeviceId.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 7:
      return true;
    }
    return false;
  };

  XRDeviceId.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var XRHandedness = {};
  XRHandedness.NONE = 0;
  XRHandedness.LEFT = 1;
  XRHandedness.RIGHT = 2;
  XRHandedness.MIN_VALUE = 0,
  XRHandedness.MAX_VALUE = 2,

  XRHandedness.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    }
    return false;
  };

  XRHandedness.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var XRTargetRayMode = {};
  XRTargetRayMode.GAZING = 1;
  XRTargetRayMode.POINTING = 2;
  XRTargetRayMode.TAPPING = 3;
  XRTargetRayMode.MIN_VALUE = 1,
  XRTargetRayMode.MAX_VALUE = 3,

  XRTargetRayMode.isKnownEnumValue = function(value) {
    switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    }
    return false;
  };

  XRTargetRayMode.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var XRSessionFeature = {};
  XRSessionFeature.REF_SPACE_VIEWER = 1;
  XRSessionFeature.REF_SPACE_LOCAL = 2;
  XRSessionFeature.REF_SPACE_LOCAL_FLOOR = 3;
  XRSessionFeature.REF_SPACE_BOUNDED_FLOOR = 4;
  XRSessionFeature.REF_SPACE_UNBOUNDED = 5;
  XRSessionFeature.DOM_OVERLAY_FOR_HANDHELD_AR = 6;
  XRSessionFeature.MIN_VALUE = 1,
  XRSessionFeature.MAX_VALUE = 6,

  XRSessionFeature.isKnownEnumValue = function(value) {
    switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    }
    return false;
  };

  XRSessionFeature.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var XRPresentationTransportMethod = {};
  XRPresentationTransportMethod.NONE = 0;
  XRPresentationTransportMethod.SUBMIT_AS_TEXTURE_HANDLE = 1;
  XRPresentationTransportMethod.SUBMIT_AS_MAILBOX_HOLDER = 2;
  XRPresentationTransportMethod.DRAW_INTO_TEXTURE_MAILBOX = 3;
  XRPresentationTransportMethod.MIN_VALUE = 0,
  XRPresentationTransportMethod.MAX_VALUE = 3,

  XRPresentationTransportMethod.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    }
    return false;
  };

  XRPresentationTransportMethod.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var XRReferenceSpaceCategory = {};
  XRReferenceSpaceCategory.LOCAL = 0;
  XRReferenceSpaceCategory.LOCAL_FLOOR = XRReferenceSpaceCategory.LOCAL + 1;
  XRReferenceSpaceCategory.VIEWER = XRReferenceSpaceCategory.LOCAL_FLOOR + 1;
  XRReferenceSpaceCategory.BOUNDED_FLOOR = XRReferenceSpaceCategory.VIEWER + 1;
  XRReferenceSpaceCategory.UNBOUNDED = XRReferenceSpaceCategory.BOUNDED_FLOOR + 1;
  XRReferenceSpaceCategory.MIN_VALUE = 0,
  XRReferenceSpaceCategory.MAX_VALUE = 4,

  XRReferenceSpaceCategory.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    }
    return false;
  };

  XRReferenceSpaceCategory.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var XRPlaneOrientation = {};
  XRPlaneOrientation.UNKNOWN = 0;
  XRPlaneOrientation.HORIZONTAL = 1;
  XRPlaneOrientation.VERTICAL = 2;
  XRPlaneOrientation.MIN_VALUE = 0,
  XRPlaneOrientation.MAX_VALUE = 2,

  XRPlaneOrientation.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    }
    return false;
  };

  XRPlaneOrientation.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var VRDisplayEventReason = {};
  VRDisplayEventReason.NONE = 0;
  VRDisplayEventReason.NAVIGATION = 1;
  VRDisplayEventReason.MOUNTED = 2;
  VRDisplayEventReason.UNMOUNTED = 3;
  VRDisplayEventReason.MIN_VALUE = 0,
  VRDisplayEventReason.MAX_VALUE = 3,

  VRDisplayEventReason.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    }
    return false;
  };

  VRDisplayEventReason.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var RequestSessionError = {};
  RequestSessionError.ORIGIN_NOT_SECURE = 1;
  RequestSessionError.EXISTING_IMMERSIVE_SESSION = 2;
  RequestSessionError.INVALID_CLIENT = 3;
  RequestSessionError.USER_DENIED_CONSENT = 4;
  RequestSessionError.NO_RUNTIME_FOUND = 5;
  RequestSessionError.UNKNOWN_RUNTIME_ERROR = 6;
  RequestSessionError.MIN_VALUE = 1,
  RequestSessionError.MAX_VALUE = 6,

  RequestSessionError.isKnownEnumValue = function(value) {
    switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    }
    return false;
  };

  RequestSessionError.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var CreateAnchorResult = {};
  CreateAnchorResult.SUCCESS = 0;
  CreateAnchorResult.FAILURE = 1;
  CreateAnchorResult.MIN_VALUE = 0,
  CreateAnchorResult.MAX_VALUE = 1,

  CreateAnchorResult.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
      return true;
    }
    return false;
  };

  CreateAnchorResult.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var SubscribeToHitTestResult = {};
  SubscribeToHitTestResult.SUCCESS = 0;
  SubscribeToHitTestResult.FAILURE_GENERIC = 1;
  SubscribeToHitTestResult.MIN_VALUE = 0,
  SubscribeToHitTestResult.MAX_VALUE = 1,

  SubscribeToHitTestResult.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
      return true;
    }
    return false;
  };

  SubscribeToHitTestResult.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var XRVisibilityState = {};
  XRVisibilityState.VISIBLE = 1;
  XRVisibilityState.VISIBLE_BLURRED = 2;
  XRVisibilityState.HIDDEN = 3;
  XRVisibilityState.MIN_VALUE = 1,
  XRVisibilityState.MAX_VALUE = 3,

  XRVisibilityState.isKnownEnumValue = function(value) {
    switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    }
    return false;
  };

  XRVisibilityState.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function XRSessionOptions(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  XRSessionOptions.prototype.initDefaults_ = function() {
    this.immersive = false;
    this.environmentIntegration = false;
    this.isLegacyWebvr = false;
    this.requiredFeatures = null;
    this.optionalFeatures = null;
  };
  XRSessionOptions.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  XRSessionOptions.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;




    // validate XRSessionOptions.requiredFeatures
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 4, new codec.Enum(XRSessionFeature), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRSessionOptions.optionalFeatures
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 16, 4, new codec.Enum(XRSessionFeature), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  XRSessionOptions.encodedSize = codec.kStructHeaderSize + 24;

  XRSessionOptions.decode = function(decoder) {
    var packed;
    var val = new XRSessionOptions();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.immersive = (packed >> 0) & 1 ? true : false;
    val.environmentIntegration = (packed >> 1) & 1 ? true : false;
    val.isLegacyWebvr = (packed >> 2) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.requiredFeatures = decoder.decodeArrayPointer(new codec.Enum(XRSessionFeature));
    val.optionalFeatures = decoder.decodeArrayPointer(new codec.Enum(XRSessionFeature));
    return val;
  };

  XRSessionOptions.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(XRSessionOptions.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.immersive & 1) << 0
    packed |= (val.environmentIntegration & 1) << 1
    packed |= (val.isLegacyWebvr & 1) << 2
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeArrayPointer(new codec.Enum(XRSessionFeature), val.requiredFeatures);
    encoder.encodeArrayPointer(new codec.Enum(XRSessionFeature), val.optionalFeatures);
  };
  function XRSession(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  XRSession.prototype.initDefaults_ = function() {
    this.dataProvider = new XRFrameDataProviderPtr();
    this.clientReceiver = new bindings.InterfaceRequest();
    this.usesInputEventing = false;
    this.displayInfo = null;
    this.submitFrameSink = null;
    this.enabledFeatures = null;
  };
  XRSession.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  XRSession.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 48}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRSession.dataProvider
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRSession.clientReceiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 8, true)
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRSession.displayInfo
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, VRDisplayInfo, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRSession.submitFrameSink
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, XRPresentationConnection, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRSession.enabledFeatures
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 32, 4, new codec.Enum(XRSessionFeature), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  XRSession.encodedSize = codec.kStructHeaderSize + 40;

  XRSession.decode = function(decoder) {
    var packed;
    var val = new XRSession();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.dataProvider = decoder.decodeStruct(new codec.Interface(XRFrameDataProviderPtr));
    val.clientReceiver = decoder.decodeStruct(codec.NullableInterfaceRequest);
    packed = decoder.readUint8();
    val.usesInputEventing = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.displayInfo = decoder.decodeStructPointer(VRDisplayInfo);
    val.submitFrameSink = decoder.decodeStructPointer(XRPresentationConnection);
    val.enabledFeatures = decoder.decodeArrayPointer(new codec.Enum(XRSessionFeature));
    return val;
  };

  XRSession.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(XRSession.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(XRFrameDataProviderPtr), val.dataProvider);
    encoder.encodeStruct(codec.NullableInterfaceRequest, val.clientReceiver);
    packed = 0;
    packed |= (val.usesInputEventing & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(VRDisplayInfo, val.displayInfo);
    encoder.encodeStructPointer(XRPresentationConnection, val.submitFrameSink);
    encoder.encodeArrayPointer(new codec.Enum(XRSessionFeature), val.enabledFeatures);
  };
  function XRPresentationConnection(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  XRPresentationConnection.prototype.initDefaults_ = function() {
    this.provider = new XRPresentationProviderPtr();
    this.clientReceiver = new bindings.InterfaceRequest();
    this.transportOptions = null;
  };
  XRPresentationConnection.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  XRPresentationConnection.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRPresentationConnection.provider
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRPresentationConnection.clientReceiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRPresentationConnection.transportOptions
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, XRPresentationTransportOptions, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  XRPresentationConnection.encodedSize = codec.kStructHeaderSize + 24;

  XRPresentationConnection.decode = function(decoder) {
    var packed;
    var val = new XRPresentationConnection();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.provider = decoder.decodeStruct(new codec.Interface(XRPresentationProviderPtr));
    val.clientReceiver = decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.transportOptions = decoder.decodeStructPointer(XRPresentationTransportOptions);
    return val;
  };

  XRPresentationConnection.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(XRPresentationConnection.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(XRPresentationProviderPtr), val.provider);
    encoder.encodeStruct(codec.InterfaceRequest, val.clientReceiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(XRPresentationTransportOptions, val.transportOptions);
  };
  function XRInputSourceDescription(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  XRInputSourceDescription.prototype.initDefaults_ = function() {
    this.targetRayMode = 0;
    this.handedness = 0;
    this.pointerOffset = null;
    this.profiles = null;
  };
  XRInputSourceDescription.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  XRInputSourceDescription.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRInputSourceDescription.targetRayMode
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, XRTargetRayMode);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRInputSourceDescription.handedness
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 4, XRHandedness);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRInputSourceDescription.pointerOffset
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, transform$.Transform, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRInputSourceDescription.profiles
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 16, 8, codec.String, false, [0, 0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  XRInputSourceDescription.encodedSize = codec.kStructHeaderSize + 24;

  XRInputSourceDescription.decode = function(decoder) {
    var packed;
    var val = new XRInputSourceDescription();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.targetRayMode = decoder.decodeStruct(codec.Int32);
    val.handedness = decoder.decodeStruct(codec.Int32);
    val.pointerOffset = decoder.decodeStructPointer(transform$.Transform);
    val.profiles = decoder.decodeArrayPointer(codec.String);
    return val;
  };

  XRInputSourceDescription.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(XRInputSourceDescription.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.targetRayMode);
    encoder.encodeStruct(codec.Int32, val.handedness);
    encoder.encodeStructPointer(transform$.Transform, val.pointerOffset);
    encoder.encodeArrayPointer(codec.String, val.profiles);
  };
  function XRInputSourceState(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  XRInputSourceState.prototype.initDefaults_ = function() {
    this.sourceId = 0;
    this.emulatedPosition = false;
    this.primaryInputPressed = false;
    this.primaryInputClicked = false;
    this.description = null;
    this.grip = null;
    this.gamepad = null;
  };
  XRInputSourceState.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  XRInputSourceState.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate XRInputSourceState.description
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, XRInputSourceDescription, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRInputSourceState.grip
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, transform$.Transform, true);
    if (err !== validator.validationError.NONE)
        return err;





    // validate XRInputSourceState.gamepad
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, gamepad$.Gamepad, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  XRInputSourceState.encodedSize = codec.kStructHeaderSize + 32;

  XRInputSourceState.decode = function(decoder) {
    var packed;
    var val = new XRInputSourceState();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.sourceId = decoder.decodeStruct(codec.Uint32);
    packed = decoder.readUint8();
    val.emulatedPosition = (packed >> 0) & 1 ? true : false;
    val.primaryInputPressed = (packed >> 1) & 1 ? true : false;
    val.primaryInputClicked = (packed >> 2) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.description = decoder.decodeStructPointer(XRInputSourceDescription);
    val.grip = decoder.decodeStructPointer(transform$.Transform);
    val.gamepad = decoder.decodeStructPointer(gamepad$.Gamepad);
    return val;
  };

  XRInputSourceState.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(XRInputSourceState.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.sourceId);
    packed = 0;
    packed |= (val.emulatedPosition & 1) << 0
    packed |= (val.primaryInputPressed & 1) << 1
    packed |= (val.primaryInputClicked & 1) << 2
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(XRInputSourceDescription, val.description);
    encoder.encodeStructPointer(transform$.Transform, val.grip);
    encoder.encodeStructPointer(gamepad$.Gamepad, val.gamepad);
  };
  function VRFieldOfView(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  VRFieldOfView.prototype.initDefaults_ = function() {
    this.upDegrees = 0;
    this.downDegrees = 0;
    this.leftDegrees = 0;
    this.rightDegrees = 0;
  };
  VRFieldOfView.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  VRFieldOfView.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;





    return validator.validationError.NONE;
  };

  VRFieldOfView.encodedSize = codec.kStructHeaderSize + 16;

  VRFieldOfView.decode = function(decoder) {
    var packed;
    var val = new VRFieldOfView();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.upDegrees = decoder.decodeStruct(codec.Float);
    val.downDegrees = decoder.decodeStruct(codec.Float);
    val.leftDegrees = decoder.decodeStruct(codec.Float);
    val.rightDegrees = decoder.decodeStruct(codec.Float);
    return val;
  };

  VRFieldOfView.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(VRFieldOfView.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Float, val.upDegrees);
    encoder.encodeStruct(codec.Float, val.downDegrees);
    encoder.encodeStruct(codec.Float, val.leftDegrees);
    encoder.encodeStruct(codec.Float, val.rightDegrees);
  };
  function VRPose(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  VRPose.prototype.initDefaults_ = function() {
    this.orientation = null;
    this.position = null;
    this.emulatedPosition = false;
    this.poseReset = false;
    this.angularVelocity = null;
    this.linearVelocity = null;
    this.angularAcceleration = null;
    this.linearAcceleration = null;
    this.inputState = null;
  };
  VRPose.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  VRPose.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 72}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate VRPose.orientation
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, geometry$.Quaternion, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate VRPose.position
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, geometry$.Point3F, true);
    if (err !== validator.validationError.NONE)
        return err;



    // validate VRPose.angularVelocity
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, geometry$.Vector3dF, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate VRPose.linearVelocity
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 32, geometry$.Vector3dF, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate VRPose.angularAcceleration
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 40, geometry$.Vector3dF, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate VRPose.linearAcceleration
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 48, geometry$.Vector3dF, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate VRPose.inputState
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 56, 8, new codec.PointerTo(XRInputSourceState), true, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  VRPose.encodedSize = codec.kStructHeaderSize + 64;

  VRPose.decode = function(decoder) {
    var packed;
    var val = new VRPose();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.orientation = decoder.decodeStructPointer(geometry$.Quaternion);
    val.position = decoder.decodeStructPointer(geometry$.Point3F);
    packed = decoder.readUint8();
    val.emulatedPosition = (packed >> 0) & 1 ? true : false;
    val.poseReset = (packed >> 1) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.angularVelocity = decoder.decodeStructPointer(geometry$.Vector3dF);
    val.linearVelocity = decoder.decodeStructPointer(geometry$.Vector3dF);
    val.angularAcceleration = decoder.decodeStructPointer(geometry$.Vector3dF);
    val.linearAcceleration = decoder.decodeStructPointer(geometry$.Vector3dF);
    val.inputState = decoder.decodeArrayPointer(new codec.PointerTo(XRInputSourceState));
    return val;
  };

  VRPose.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(VRPose.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(geometry$.Quaternion, val.orientation);
    encoder.encodeStructPointer(geometry$.Point3F, val.position);
    packed = 0;
    packed |= (val.emulatedPosition & 1) << 0
    packed |= (val.poseReset & 1) << 1
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(geometry$.Vector3dF, val.angularVelocity);
    encoder.encodeStructPointer(geometry$.Vector3dF, val.linearVelocity);
    encoder.encodeStructPointer(geometry$.Vector3dF, val.angularAcceleration);
    encoder.encodeStructPointer(geometry$.Vector3dF, val.linearAcceleration);
    encoder.encodeArrayPointer(new codec.PointerTo(XRInputSourceState), val.inputState);
  };
  function XRRay(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  XRRay.prototype.initDefaults_ = function() {
    this.origin = null;
    this.direction = null;
  };
  XRRay.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  XRRay.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRRay.origin
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, geometry$.Point3F, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRRay.direction
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, geometry$.Vector3dF, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  XRRay.encodedSize = codec.kStructHeaderSize + 16;

  XRRay.decode = function(decoder) {
    var packed;
    var val = new XRRay();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.origin = decoder.decodeStructPointer(geometry$.Point3F);
    val.direction = decoder.decodeStructPointer(geometry$.Vector3dF);
    return val;
  };

  XRRay.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(XRRay.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(geometry$.Point3F, val.origin);
    encoder.encodeStructPointer(geometry$.Vector3dF, val.direction);
  };
  function XRHitResult(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  XRHitResult.prototype.initDefaults_ = function() {
    this.hitMatrix = null;
  };
  XRHitResult.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  XRHitResult.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRHitResult.hitMatrix
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, transform$.Transform, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  XRHitResult.encodedSize = codec.kStructHeaderSize + 8;

  XRHitResult.decode = function(decoder) {
    var packed;
    var val = new XRHitResult();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.hitMatrix = decoder.decodeStructPointer(transform$.Transform);
    return val;
  };

  XRHitResult.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(XRHitResult.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(transform$.Transform, val.hitMatrix);
  };
  function VRDisplayCapabilities(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  VRDisplayCapabilities.prototype.initDefaults_ = function() {
    this.hasPosition = false;
    this.hasExternalDisplay = false;
    this.canPresent = false;
    this.canProvideEnvironmentIntegration = false;
  };
  VRDisplayCapabilities.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  VRDisplayCapabilities.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;





    return validator.validationError.NONE;
  };

  VRDisplayCapabilities.encodedSize = codec.kStructHeaderSize + 8;

  VRDisplayCapabilities.decode = function(decoder) {
    var packed;
    var val = new VRDisplayCapabilities();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.hasPosition = (packed >> 0) & 1 ? true : false;
    val.hasExternalDisplay = (packed >> 1) & 1 ? true : false;
    val.canPresent = (packed >> 2) & 1 ? true : false;
    val.canProvideEnvironmentIntegration = (packed >> 3) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  VRDisplayCapabilities.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(VRDisplayCapabilities.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.hasPosition & 1) << 0
    packed |= (val.hasExternalDisplay & 1) << 1
    packed |= (val.canPresent & 1) << 2
    packed |= (val.canProvideEnvironmentIntegration & 1) << 3
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function VREyeParameters(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  VREyeParameters.prototype.initDefaults_ = function() {
    this.fieldOfView = null;
    this.headFromEye = null;
    this.renderWidth = 0;
    this.renderHeight = 0;
  };
  VREyeParameters.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  VREyeParameters.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate VREyeParameters.fieldOfView
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, VRFieldOfView, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate VREyeParameters.headFromEye
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, transform$.Transform, false);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  VREyeParameters.encodedSize = codec.kStructHeaderSize + 24;

  VREyeParameters.decode = function(decoder) {
    var packed;
    var val = new VREyeParameters();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.fieldOfView = decoder.decodeStructPointer(VRFieldOfView);
    val.headFromEye = decoder.decodeStructPointer(transform$.Transform);
    val.renderWidth = decoder.decodeStruct(codec.Uint32);
    val.renderHeight = decoder.decodeStruct(codec.Uint32);
    return val;
  };

  VREyeParameters.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(VREyeParameters.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(VRFieldOfView, val.fieldOfView);
    encoder.encodeStructPointer(transform$.Transform, val.headFromEye);
    encoder.encodeStruct(codec.Uint32, val.renderWidth);
    encoder.encodeStruct(codec.Uint32, val.renderHeight);
  };
  function VRStageParameters(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  VRStageParameters.prototype.initDefaults_ = function() {
    this.standingTransform = null;
    this.sizeX = 0;
    this.sizeZ = 0;
    this.bounds = null;
  };
  VRStageParameters.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  VRStageParameters.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate VRStageParameters.standingTransform
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, transform$.Transform, false);
    if (err !== validator.validationError.NONE)
        return err;




    // validate VRStageParameters.bounds
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 16, 8, new codec.PointerTo(geometry$.Point3F), true, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  VRStageParameters.encodedSize = codec.kStructHeaderSize + 24;

  VRStageParameters.decode = function(decoder) {
    var packed;
    var val = new VRStageParameters();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.standingTransform = decoder.decodeStructPointer(transform$.Transform);
    val.sizeX = decoder.decodeStruct(codec.Float);
    val.sizeZ = decoder.decodeStruct(codec.Float);
    val.bounds = decoder.decodeArrayPointer(new codec.PointerTo(geometry$.Point3F));
    return val;
  };

  VRStageParameters.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(VRStageParameters.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(transform$.Transform, val.standingTransform);
    encoder.encodeStruct(codec.Float, val.sizeX);
    encoder.encodeStruct(codec.Float, val.sizeZ);
    encoder.encodeArrayPointer(new codec.PointerTo(geometry$.Point3F), val.bounds);
  };
  function VRDisplayInfo(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  VRDisplayInfo.prototype.initDefaults_ = function() {
    this.id = 0;
    this.webvrDefaultFramebufferScale = 1.0;
    this.displayName = null;
    this.capabilities = null;
    this.stageParameters = null;
    this.leftEye = null;
    this.rightEye = null;
    this.webxrDefaultFramebufferScale = 1.0;
  };
  VRDisplayInfo.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  VRDisplayInfo.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 64}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate VRDisplayInfo.id
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, XRDeviceId);
    if (err !== validator.validationError.NONE)
        return err;


    // validate VRDisplayInfo.displayName
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate VRDisplayInfo.capabilities
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, VRDisplayCapabilities, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate VRDisplayInfo.stageParameters
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, VRStageParameters, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate VRDisplayInfo.leftEye
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 32, VREyeParameters, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate VRDisplayInfo.rightEye
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 40, VREyeParameters, true);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  VRDisplayInfo.encodedSize = codec.kStructHeaderSize + 56;

  VRDisplayInfo.decode = function(decoder) {
    var packed;
    var val = new VRDisplayInfo();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id = decoder.decodeStruct(codec.Int32);
    val.webvrDefaultFramebufferScale = decoder.decodeStruct(codec.Float);
    val.displayName = decoder.decodeStruct(codec.String);
    val.capabilities = decoder.decodeStructPointer(VRDisplayCapabilities);
    val.stageParameters = decoder.decodeStructPointer(VRStageParameters);
    val.leftEye = decoder.decodeStructPointer(VREyeParameters);
    val.rightEye = decoder.decodeStructPointer(VREyeParameters);
    val.webxrDefaultFramebufferScale = decoder.decodeStruct(codec.Float);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  VRDisplayInfo.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(VRDisplayInfo.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.id);
    encoder.encodeStruct(codec.Float, val.webvrDefaultFramebufferScale);
    encoder.encodeStruct(codec.String, val.displayName);
    encoder.encodeStructPointer(VRDisplayCapabilities, val.capabilities);
    encoder.encodeStructPointer(VRStageParameters, val.stageParameters);
    encoder.encodeStructPointer(VREyeParameters, val.leftEye);
    encoder.encodeStructPointer(VREyeParameters, val.rightEye);
    encoder.encodeStruct(codec.Float, val.webxrDefaultFramebufferScale);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function XRPresentationTransportOptions(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  XRPresentationTransportOptions.prototype.initDefaults_ = function() {
    this.transportMethod = 0;
    this.waitForTransferNotification = false;
    this.waitForRenderNotification = false;
    this.waitForGpuFence = false;
  };
  XRPresentationTransportOptions.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  XRPresentationTransportOptions.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRPresentationTransportOptions.transportMethod
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, XRPresentationTransportMethod);
    if (err !== validator.validationError.NONE)
        return err;




    return validator.validationError.NONE;
  };

  XRPresentationTransportOptions.encodedSize = codec.kStructHeaderSize + 8;

  XRPresentationTransportOptions.decode = function(decoder) {
    var packed;
    var val = new XRPresentationTransportOptions();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.transportMethod = decoder.decodeStruct(codec.Int32);
    packed = decoder.readUint8();
    val.waitForTransferNotification = (packed >> 0) & 1 ? true : false;
    val.waitForRenderNotification = (packed >> 1) & 1 ? true : false;
    val.waitForGpuFence = (packed >> 2) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  XRPresentationTransportOptions.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(XRPresentationTransportOptions.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.transportMethod);
    packed = 0;
    packed |= (val.waitForTransferNotification & 1) << 0
    packed |= (val.waitForRenderNotification & 1) << 1
    packed |= (val.waitForGpuFence & 1) << 2
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function XRPlanePointData(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  XRPlanePointData.prototype.initDefaults_ = function() {
    this.x = 0;
    this.z = 0;
  };
  XRPlanePointData.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  XRPlanePointData.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  XRPlanePointData.encodedSize = codec.kStructHeaderSize + 8;

  XRPlanePointData.decode = function(decoder) {
    var packed;
    var val = new XRPlanePointData();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.x = decoder.decodeStruct(codec.Float);
    val.z = decoder.decodeStruct(codec.Float);
    return val;
  };

  XRPlanePointData.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(XRPlanePointData.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Float, val.x);
    encoder.encodeStruct(codec.Float, val.z);
  };
  function XRPlaneData(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  XRPlaneData.prototype.initDefaults_ = function() {
    this.id = 0;
    this.orientation = 0;
    this.pose = null;
    this.polygon = null;
  };
  XRPlaneData.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  XRPlaneData.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate XRPlaneData.orientation
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 4, XRPlaneOrientation);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRPlaneData.pose
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, VRPose, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRPlaneData.polygon
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 16, 8, new codec.PointerTo(XRPlanePointData), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  XRPlaneData.encodedSize = codec.kStructHeaderSize + 24;

  XRPlaneData.decode = function(decoder) {
    var packed;
    var val = new XRPlaneData();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id = decoder.decodeStruct(codec.Uint32);
    val.orientation = decoder.decodeStruct(codec.Int32);
    val.pose = decoder.decodeStructPointer(VRPose);
    val.polygon = decoder.decodeArrayPointer(new codec.PointerTo(XRPlanePointData));
    return val;
  };

  XRPlaneData.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(XRPlaneData.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.id);
    encoder.encodeStruct(codec.Int32, val.orientation);
    encoder.encodeStructPointer(VRPose, val.pose);
    encoder.encodeArrayPointer(new codec.PointerTo(XRPlanePointData), val.polygon);
  };
  function XRPlaneDetectionData(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  XRPlaneDetectionData.prototype.initDefaults_ = function() {
    this.allPlanesIds = null;
    this.updatedPlanesData = null;
  };
  XRPlaneDetectionData.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  XRPlaneDetectionData.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRPlaneDetectionData.allPlanesIds
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 4, codec.Uint32, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRPlaneDetectionData.updatedPlanesData
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 8, new codec.PointerTo(XRPlaneData), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  XRPlaneDetectionData.encodedSize = codec.kStructHeaderSize + 16;

  XRPlaneDetectionData.decode = function(decoder) {
    var packed;
    var val = new XRPlaneDetectionData();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.allPlanesIds = decoder.decodeArrayPointer(codec.Uint32);
    val.updatedPlanesData = decoder.decodeArrayPointer(new codec.PointerTo(XRPlaneData));
    return val;
  };

  XRPlaneDetectionData.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(XRPlaneDetectionData.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(codec.Uint32, val.allPlanesIds);
    encoder.encodeArrayPointer(new codec.PointerTo(XRPlaneData), val.updatedPlanesData);
  };
  function XRAnchorData(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  XRAnchorData.prototype.initDefaults_ = function() {
    this.id = 0;
    this.pose = null;
  };
  XRAnchorData.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  XRAnchorData.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate XRAnchorData.pose
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, VRPose, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  XRAnchorData.encodedSize = codec.kStructHeaderSize + 16;

  XRAnchorData.decode = function(decoder) {
    var packed;
    var val = new XRAnchorData();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id = decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.pose = decoder.decodeStructPointer(VRPose);
    return val;
  };

  XRAnchorData.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(XRAnchorData.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.id);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(VRPose, val.pose);
  };
  function XRAnchorsData(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  XRAnchorsData.prototype.initDefaults_ = function() {
    this.allAnchorsIds = null;
    this.updatedAnchorsData = null;
  };
  XRAnchorsData.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  XRAnchorsData.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRAnchorsData.allAnchorsIds
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 4, codec.Uint32, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRAnchorsData.updatedAnchorsData
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 8, new codec.PointerTo(XRAnchorData), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  XRAnchorsData.encodedSize = codec.kStructHeaderSize + 16;

  XRAnchorsData.decode = function(decoder) {
    var packed;
    var val = new XRAnchorsData();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.allAnchorsIds = decoder.decodeArrayPointer(codec.Uint32);
    val.updatedAnchorsData = decoder.decodeArrayPointer(new codec.PointerTo(XRAnchorData));
    return val;
  };

  XRAnchorsData.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(XRAnchorsData.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(codec.Uint32, val.allAnchorsIds);
    encoder.encodeArrayPointer(new codec.PointerTo(XRAnchorData), val.updatedAnchorsData);
  };
  function XRHitTestSubscriptionResultData(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  XRHitTestSubscriptionResultData.prototype.initDefaults_ = function() {
    this.subscriptionId = 0;
    this.hitTestResults = null;
  };
  XRHitTestSubscriptionResultData.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  XRHitTestSubscriptionResultData.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate XRHitTestSubscriptionResultData.hitTestResults
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 8, new codec.PointerTo(XRHitResult), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  XRHitTestSubscriptionResultData.encodedSize = codec.kStructHeaderSize + 16;

  XRHitTestSubscriptionResultData.decode = function(decoder) {
    var packed;
    var val = new XRHitTestSubscriptionResultData();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.subscriptionId = decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.hitTestResults = decoder.decodeArrayPointer(new codec.PointerTo(XRHitResult));
    return val;
  };

  XRHitTestSubscriptionResultData.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(XRHitTestSubscriptionResultData.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.subscriptionId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeArrayPointer(new codec.PointerTo(XRHitResult), val.hitTestResults);
  };
  function XRHitTestSubscriptionResultsData(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  XRHitTestSubscriptionResultsData.prototype.initDefaults_ = function() {
    this.results = null;
  };
  XRHitTestSubscriptionResultsData.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  XRHitTestSubscriptionResultsData.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRHitTestSubscriptionResultsData.results
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(XRHitTestSubscriptionResultData), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  XRHitTestSubscriptionResultsData.encodedSize = codec.kStructHeaderSize + 8;

  XRHitTestSubscriptionResultsData.decode = function(decoder) {
    var packed;
    var val = new XRHitTestSubscriptionResultsData();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.results = decoder.decodeArrayPointer(new codec.PointerTo(XRHitTestSubscriptionResultData));
    return val;
  };

  XRHitTestSubscriptionResultsData.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(XRHitTestSubscriptionResultsData.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(XRHitTestSubscriptionResultData), val.results);
  };
  function XRFrameData(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  XRFrameData.prototype.initDefaults_ = function() {
    this.pose = null;
    this.timeDelta = null;
    this.bufferHolder = null;
    this.frameId = 0;
    this.stageParametersUpdated = false;
    this.leftEye = null;
    this.rightEye = null;
    this.stageParameters = null;
    this.detectedPlanesData = null;
    this.anchorsData = null;
    this.hitTestSubscriptionResults = null;
  };
  XRFrameData.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  XRFrameData.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 88}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRFrameData.pose
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, VRPose, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRFrameData.timeDelta
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, time$.TimeDelta, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRFrameData.bufferHolder
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, mailbox_holder$.MailboxHolder, true);
    if (err !== validator.validationError.NONE)
        return err;



    // validate XRFrameData.leftEye
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 32, VREyeParameters, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRFrameData.rightEye
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 40, VREyeParameters, true);
    if (err !== validator.validationError.NONE)
        return err;



    // validate XRFrameData.stageParameters
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 48, VRStageParameters, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRFrameData.detectedPlanesData
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 56, XRPlaneDetectionData, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRFrameData.anchorsData
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 64, XRAnchorsData, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRFrameData.hitTestSubscriptionResults
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 72, XRHitTestSubscriptionResultsData, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  XRFrameData.encodedSize = codec.kStructHeaderSize + 80;

  XRFrameData.decode = function(decoder) {
    var packed;
    var val = new XRFrameData();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.pose = decoder.decodeStructPointer(VRPose);
    val.timeDelta = decoder.decodeStructPointer(time$.TimeDelta);
    val.bufferHolder = decoder.decodeStructPointer(mailbox_holder$.MailboxHolder);
    val.frameId = decoder.decodeStruct(codec.Int16);
    packed = decoder.readUint8();
    val.stageParametersUpdated = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.leftEye = decoder.decodeStructPointer(VREyeParameters);
    val.rightEye = decoder.decodeStructPointer(VREyeParameters);
    val.stageParameters = decoder.decodeStructPointer(VRStageParameters);
    val.detectedPlanesData = decoder.decodeStructPointer(XRPlaneDetectionData);
    val.anchorsData = decoder.decodeStructPointer(XRAnchorsData);
    val.hitTestSubscriptionResults = decoder.decodeStructPointer(XRHitTestSubscriptionResultsData);
    return val;
  };

  XRFrameData.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(XRFrameData.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(VRPose, val.pose);
    encoder.encodeStructPointer(time$.TimeDelta, val.timeDelta);
    encoder.encodeStructPointer(mailbox_holder$.MailboxHolder, val.bufferHolder);
    encoder.encodeStruct(codec.Int16, val.frameId);
    packed = 0;
    packed |= (val.stageParametersUpdated & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(VREyeParameters, val.leftEye);
    encoder.encodeStructPointer(VREyeParameters, val.rightEye);
    encoder.encodeStructPointer(VRStageParameters, val.stageParameters);
    encoder.encodeStructPointer(XRPlaneDetectionData, val.detectedPlanesData);
    encoder.encodeStructPointer(XRAnchorsData, val.anchorsData);
    encoder.encodeStructPointer(XRHitTestSubscriptionResultsData, val.hitTestSubscriptionResults);
  };
  function XRFrameDataRequestOptions(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  XRFrameDataRequestOptions.prototype.initDefaults_ = function() {
    this.includePlaneData = false;
  };
  XRFrameDataRequestOptions.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  XRFrameDataRequestOptions.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  XRFrameDataRequestOptions.encodedSize = codec.kStructHeaderSize + 8;

  XRFrameDataRequestOptions.decode = function(decoder) {
    var packed;
    var val = new XRFrameDataRequestOptions();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.includePlaneData = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  XRFrameDataRequestOptions.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(XRFrameDataRequestOptions.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.includePlaneData & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function VRService_SetClient_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  VRService_SetClient_Params.prototype.initDefaults_ = function() {
    this.client = new VRServiceClientPtr();
  };
  VRService_SetClient_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  VRService_SetClient_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate VRService_SetClient_Params.client
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  VRService_SetClient_Params.encodedSize = codec.kStructHeaderSize + 8;

  VRService_SetClient_Params.decode = function(decoder) {
    var packed;
    var val = new VRService_SetClient_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.client = decoder.decodeStruct(new codec.Interface(VRServiceClientPtr));
    return val;
  };

  VRService_SetClient_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(VRService_SetClient_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(VRServiceClientPtr), val.client);
  };
  function VRService_SetListeningForActivate_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  VRService_SetListeningForActivate_Params.prototype.initDefaults_ = function() {
    this.client = new VRDisplayClientPtr();
  };
  VRService_SetListeningForActivate_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  VRService_SetListeningForActivate_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate VRService_SetListeningForActivate_Params.client
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  VRService_SetListeningForActivate_Params.encodedSize = codec.kStructHeaderSize + 8;

  VRService_SetListeningForActivate_Params.decode = function(decoder) {
    var packed;
    var val = new VRService_SetListeningForActivate_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.client = decoder.decodeStruct(new codec.NullableInterface(VRDisplayClientPtr));
    return val;
  };

  VRService_SetListeningForActivate_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(VRService_SetListeningForActivate_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.NullableInterface(VRDisplayClientPtr), val.client);
  };
  function VRService_RequestSession_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  VRService_RequestSession_Params.prototype.initDefaults_ = function() {
    this.options = null;
  };
  VRService_RequestSession_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  VRService_RequestSession_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate VRService_RequestSession_Params.options
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, XRSessionOptions, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  VRService_RequestSession_Params.encodedSize = codec.kStructHeaderSize + 8;

  VRService_RequestSession_Params.decode = function(decoder) {
    var packed;
    var val = new VRService_RequestSession_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.options = decoder.decodeStructPointer(XRSessionOptions);
    return val;
  };

  VRService_RequestSession_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(VRService_RequestSession_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(XRSessionOptions, val.options);
  };
  function VRService_RequestSession_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  VRService_RequestSession_ResponseParams.prototype.initDefaults_ = function() {
    this.result = null;
  };
  VRService_RequestSession_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  VRService_RequestSession_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate VRService_RequestSession_ResponseParams.result
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 0, RequestSessionResult, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  VRService_RequestSession_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  VRService_RequestSession_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new VRService_RequestSession_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.result = decoder.decodeStruct(RequestSessionResult);
    return val;
  };

  VRService_RequestSession_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(VRService_RequestSession_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(RequestSessionResult, val.result);
  };
  function VRService_SupportsSession_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  VRService_SupportsSession_Params.prototype.initDefaults_ = function() {
    this.options = null;
  };
  VRService_SupportsSession_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  VRService_SupportsSession_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate VRService_SupportsSession_Params.options
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, XRSessionOptions, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  VRService_SupportsSession_Params.encodedSize = codec.kStructHeaderSize + 8;

  VRService_SupportsSession_Params.decode = function(decoder) {
    var packed;
    var val = new VRService_SupportsSession_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.options = decoder.decodeStructPointer(XRSessionOptions);
    return val;
  };

  VRService_SupportsSession_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(VRService_SupportsSession_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(XRSessionOptions, val.options);
  };
  function VRService_SupportsSession_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  VRService_SupportsSession_ResponseParams.prototype.initDefaults_ = function() {
    this.supportsSession = false;
  };
  VRService_SupportsSession_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  VRService_SupportsSession_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  VRService_SupportsSession_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  VRService_SupportsSession_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new VRService_SupportsSession_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.supportsSession = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  VRService_SupportsSession_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(VRService_SupportsSession_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.supportsSession & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function VRService_GetImmersiveVRDisplayInfo_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  VRService_GetImmersiveVRDisplayInfo_Params.prototype.initDefaults_ = function() {
  };
  VRService_GetImmersiveVRDisplayInfo_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  VRService_GetImmersiveVRDisplayInfo_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  VRService_GetImmersiveVRDisplayInfo_Params.encodedSize = codec.kStructHeaderSize + 0;

  VRService_GetImmersiveVRDisplayInfo_Params.decode = function(decoder) {
    var packed;
    var val = new VRService_GetImmersiveVRDisplayInfo_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  VRService_GetImmersiveVRDisplayInfo_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(VRService_GetImmersiveVRDisplayInfo_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function VRService_GetImmersiveVRDisplayInfo_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  VRService_GetImmersiveVRDisplayInfo_ResponseParams.prototype.initDefaults_ = function() {
    this.info = null;
  };
  VRService_GetImmersiveVRDisplayInfo_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  VRService_GetImmersiveVRDisplayInfo_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate VRService_GetImmersiveVRDisplayInfo_ResponseParams.info
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, VRDisplayInfo, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  VRService_GetImmersiveVRDisplayInfo_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  VRService_GetImmersiveVRDisplayInfo_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new VRService_GetImmersiveVRDisplayInfo_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.info = decoder.decodeStructPointer(VRDisplayInfo);
    return val;
  };

  VRService_GetImmersiveVRDisplayInfo_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(VRService_GetImmersiveVRDisplayInfo_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(VRDisplayInfo, val.info);
  };
  function VRService_ExitPresent_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  VRService_ExitPresent_Params.prototype.initDefaults_ = function() {
  };
  VRService_ExitPresent_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  VRService_ExitPresent_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  VRService_ExitPresent_Params.encodedSize = codec.kStructHeaderSize + 0;

  VRService_ExitPresent_Params.decode = function(decoder) {
    var packed;
    var val = new VRService_ExitPresent_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  VRService_ExitPresent_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(VRService_ExitPresent_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function VRService_SetFramesThrottled_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  VRService_SetFramesThrottled_Params.prototype.initDefaults_ = function() {
    this.throttled = false;
  };
  VRService_SetFramesThrottled_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  VRService_SetFramesThrottled_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  VRService_SetFramesThrottled_Params.encodedSize = codec.kStructHeaderSize + 8;

  VRService_SetFramesThrottled_Params.decode = function(decoder) {
    var packed;
    var val = new VRService_SetFramesThrottled_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.throttled = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  VRService_SetFramesThrottled_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(VRService_SetFramesThrottled_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.throttled & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function VRServiceClient_OnDeviceChanged_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  VRServiceClient_OnDeviceChanged_Params.prototype.initDefaults_ = function() {
  };
  VRServiceClient_OnDeviceChanged_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  VRServiceClient_OnDeviceChanged_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  VRServiceClient_OnDeviceChanged_Params.encodedSize = codec.kStructHeaderSize + 0;

  VRServiceClient_OnDeviceChanged_Params.decode = function(decoder) {
    var packed;
    var val = new VRServiceClient_OnDeviceChanged_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  VRServiceClient_OnDeviceChanged_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(VRServiceClient_OnDeviceChanged_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function XREnvironmentIntegrationProvider_RequestHitTest_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  XREnvironmentIntegrationProvider_RequestHitTest_Params.prototype.initDefaults_ = function() {
    this.ray = null;
  };
  XREnvironmentIntegrationProvider_RequestHitTest_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  XREnvironmentIntegrationProvider_RequestHitTest_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XREnvironmentIntegrationProvider_RequestHitTest_Params.ray
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, XRRay, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  XREnvironmentIntegrationProvider_RequestHitTest_Params.encodedSize = codec.kStructHeaderSize + 8;

  XREnvironmentIntegrationProvider_RequestHitTest_Params.decode = function(decoder) {
    var packed;
    var val = new XREnvironmentIntegrationProvider_RequestHitTest_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.ray = decoder.decodeStructPointer(XRRay);
    return val;
  };

  XREnvironmentIntegrationProvider_RequestHitTest_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(XREnvironmentIntegrationProvider_RequestHitTest_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(XRRay, val.ray);
  };
  function XREnvironmentIntegrationProvider_RequestHitTest_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  XREnvironmentIntegrationProvider_RequestHitTest_ResponseParams.prototype.initDefaults_ = function() {
    this.results = null;
  };
  XREnvironmentIntegrationProvider_RequestHitTest_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  XREnvironmentIntegrationProvider_RequestHitTest_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XREnvironmentIntegrationProvider_RequestHitTest_ResponseParams.results
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(XRHitResult), true, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  XREnvironmentIntegrationProvider_RequestHitTest_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  XREnvironmentIntegrationProvider_RequestHitTest_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new XREnvironmentIntegrationProvider_RequestHitTest_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.results = decoder.decodeArrayPointer(new codec.PointerTo(XRHitResult));
    return val;
  };

  XREnvironmentIntegrationProvider_RequestHitTest_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(XREnvironmentIntegrationProvider_RequestHitTest_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(XRHitResult), val.results);
  };
  function XREnvironmentIntegrationProvider_SubscribeToHitTest_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  XREnvironmentIntegrationProvider_SubscribeToHitTest_Params.prototype.initDefaults_ = function() {
    this.nativeOriginInformation = null;
    this.ray = null;
  };
  XREnvironmentIntegrationProvider_SubscribeToHitTest_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  XREnvironmentIntegrationProvider_SubscribeToHitTest_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XREnvironmentIntegrationProvider_SubscribeToHitTest_Params.nativeOriginInformation
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 0, XRNativeOriginInformation, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XREnvironmentIntegrationProvider_SubscribeToHitTest_Params.ray
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, XRRay, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  XREnvironmentIntegrationProvider_SubscribeToHitTest_Params.encodedSize = codec.kStructHeaderSize + 24;

  XREnvironmentIntegrationProvider_SubscribeToHitTest_Params.decode = function(decoder) {
    var packed;
    var val = new XREnvironmentIntegrationProvider_SubscribeToHitTest_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.nativeOriginInformation = decoder.decodeStruct(XRNativeOriginInformation);
    val.ray = decoder.decodeStructPointer(XRRay);
    return val;
  };

  XREnvironmentIntegrationProvider_SubscribeToHitTest_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(XREnvironmentIntegrationProvider_SubscribeToHitTest_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(XRNativeOriginInformation, val.nativeOriginInformation);
    encoder.encodeStructPointer(XRRay, val.ray);
  };
  function XREnvironmentIntegrationProvider_SubscribeToHitTest_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  XREnvironmentIntegrationProvider_SubscribeToHitTest_ResponseParams.prototype.initDefaults_ = function() {
    this.result = 0;
    this.subscriptionId = 0;
  };
  XREnvironmentIntegrationProvider_SubscribeToHitTest_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  XREnvironmentIntegrationProvider_SubscribeToHitTest_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XREnvironmentIntegrationProvider_SubscribeToHitTest_ResponseParams.result
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, SubscribeToHitTestResult);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  XREnvironmentIntegrationProvider_SubscribeToHitTest_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  XREnvironmentIntegrationProvider_SubscribeToHitTest_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new XREnvironmentIntegrationProvider_SubscribeToHitTest_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.result = decoder.decodeStruct(codec.Int32);
    val.subscriptionId = decoder.decodeStruct(codec.Uint32);
    return val;
  };

  XREnvironmentIntegrationProvider_SubscribeToHitTest_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(XREnvironmentIntegrationProvider_SubscribeToHitTest_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.result);
    encoder.encodeStruct(codec.Uint32, val.subscriptionId);
  };
  function XREnvironmentIntegrationProvider_UnsubscribeFromHitTest_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  XREnvironmentIntegrationProvider_UnsubscribeFromHitTest_Params.prototype.initDefaults_ = function() {
    this.subscriptionId = 0;
  };
  XREnvironmentIntegrationProvider_UnsubscribeFromHitTest_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  XREnvironmentIntegrationProvider_UnsubscribeFromHitTest_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  XREnvironmentIntegrationProvider_UnsubscribeFromHitTest_Params.encodedSize = codec.kStructHeaderSize + 8;

  XREnvironmentIntegrationProvider_UnsubscribeFromHitTest_Params.decode = function(decoder) {
    var packed;
    var val = new XREnvironmentIntegrationProvider_UnsubscribeFromHitTest_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.subscriptionId = decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  XREnvironmentIntegrationProvider_UnsubscribeFromHitTest_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(XREnvironmentIntegrationProvider_UnsubscribeFromHitTest_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.subscriptionId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function XREnvironmentIntegrationProvider_CreateAnchor_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  XREnvironmentIntegrationProvider_CreateAnchor_Params.prototype.initDefaults_ = function() {
    this.anchorPose = null;
  };
  XREnvironmentIntegrationProvider_CreateAnchor_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  XREnvironmentIntegrationProvider_CreateAnchor_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XREnvironmentIntegrationProvider_CreateAnchor_Params.anchorPose
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, VRPose, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  XREnvironmentIntegrationProvider_CreateAnchor_Params.encodedSize = codec.kStructHeaderSize + 8;

  XREnvironmentIntegrationProvider_CreateAnchor_Params.decode = function(decoder) {
    var packed;
    var val = new XREnvironmentIntegrationProvider_CreateAnchor_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.anchorPose = decoder.decodeStructPointer(VRPose);
    return val;
  };

  XREnvironmentIntegrationProvider_CreateAnchor_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(XREnvironmentIntegrationProvider_CreateAnchor_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(VRPose, val.anchorPose);
  };
  function XREnvironmentIntegrationProvider_CreateAnchor_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  XREnvironmentIntegrationProvider_CreateAnchor_ResponseParams.prototype.initDefaults_ = function() {
    this.result = 0;
    this.anchorId = 0;
  };
  XREnvironmentIntegrationProvider_CreateAnchor_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  XREnvironmentIntegrationProvider_CreateAnchor_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XREnvironmentIntegrationProvider_CreateAnchor_ResponseParams.result
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, CreateAnchorResult);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  XREnvironmentIntegrationProvider_CreateAnchor_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  XREnvironmentIntegrationProvider_CreateAnchor_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new XREnvironmentIntegrationProvider_CreateAnchor_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.result = decoder.decodeStruct(codec.Int32);
    val.anchorId = decoder.decodeStruct(codec.Uint32);
    return val;
  };

  XREnvironmentIntegrationProvider_CreateAnchor_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(XREnvironmentIntegrationProvider_CreateAnchor_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.result);
    encoder.encodeStruct(codec.Uint32, val.anchorId);
  };
  function XREnvironmentIntegrationProvider_CreatePlaneAnchor_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  XREnvironmentIntegrationProvider_CreatePlaneAnchor_Params.prototype.initDefaults_ = function() {
    this.anchorPose = null;
    this.planeId = 0;
  };
  XREnvironmentIntegrationProvider_CreatePlaneAnchor_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  XREnvironmentIntegrationProvider_CreatePlaneAnchor_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XREnvironmentIntegrationProvider_CreatePlaneAnchor_Params.anchorPose
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, VRPose, false);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  XREnvironmentIntegrationProvider_CreatePlaneAnchor_Params.encodedSize = codec.kStructHeaderSize + 16;

  XREnvironmentIntegrationProvider_CreatePlaneAnchor_Params.decode = function(decoder) {
    var packed;
    var val = new XREnvironmentIntegrationProvider_CreatePlaneAnchor_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.anchorPose = decoder.decodeStructPointer(VRPose);
    val.planeId = decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  XREnvironmentIntegrationProvider_CreatePlaneAnchor_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(XREnvironmentIntegrationProvider_CreatePlaneAnchor_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(VRPose, val.anchorPose);
    encoder.encodeStruct(codec.Uint32, val.planeId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function XREnvironmentIntegrationProvider_CreatePlaneAnchor_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  XREnvironmentIntegrationProvider_CreatePlaneAnchor_ResponseParams.prototype.initDefaults_ = function() {
    this.result = 0;
    this.anchorId = 0;
  };
  XREnvironmentIntegrationProvider_CreatePlaneAnchor_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  XREnvironmentIntegrationProvider_CreatePlaneAnchor_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XREnvironmentIntegrationProvider_CreatePlaneAnchor_ResponseParams.result
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, CreateAnchorResult);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  XREnvironmentIntegrationProvider_CreatePlaneAnchor_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  XREnvironmentIntegrationProvider_CreatePlaneAnchor_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new XREnvironmentIntegrationProvider_CreatePlaneAnchor_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.result = decoder.decodeStruct(codec.Int32);
    val.anchorId = decoder.decodeStruct(codec.Uint32);
    return val;
  };

  XREnvironmentIntegrationProvider_CreatePlaneAnchor_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(XREnvironmentIntegrationProvider_CreatePlaneAnchor_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.result);
    encoder.encodeStruct(codec.Uint32, val.anchorId);
  };
  function XREnvironmentIntegrationProvider_DetachAnchor_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  XREnvironmentIntegrationProvider_DetachAnchor_Params.prototype.initDefaults_ = function() {
    this.anchorId = 0;
  };
  XREnvironmentIntegrationProvider_DetachAnchor_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  XREnvironmentIntegrationProvider_DetachAnchor_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  XREnvironmentIntegrationProvider_DetachAnchor_Params.encodedSize = codec.kStructHeaderSize + 8;

  XREnvironmentIntegrationProvider_DetachAnchor_Params.decode = function(decoder) {
    var packed;
    var val = new XREnvironmentIntegrationProvider_DetachAnchor_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.anchorId = decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  XREnvironmentIntegrationProvider_DetachAnchor_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(XREnvironmentIntegrationProvider_DetachAnchor_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.anchorId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function XRInputSourceButtonListener_OnButtonEvent_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  XRInputSourceButtonListener_OnButtonEvent_Params.prototype.initDefaults_ = function() {
    this.inputSource = null;
  };
  XRInputSourceButtonListener_OnButtonEvent_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  XRInputSourceButtonListener_OnButtonEvent_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRInputSourceButtonListener_OnButtonEvent_Params.inputSource
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, XRInputSourceState, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  XRInputSourceButtonListener_OnButtonEvent_Params.encodedSize = codec.kStructHeaderSize + 8;

  XRInputSourceButtonListener_OnButtonEvent_Params.decode = function(decoder) {
    var packed;
    var val = new XRInputSourceButtonListener_OnButtonEvent_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.inputSource = decoder.decodeStructPointer(XRInputSourceState);
    return val;
  };

  XRInputSourceButtonListener_OnButtonEvent_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(XRInputSourceButtonListener_OnButtonEvent_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(XRInputSourceState, val.inputSource);
  };
  function XRFrameDataProvider_GetFrameData_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  XRFrameDataProvider_GetFrameData_Params.prototype.initDefaults_ = function() {
    this.options = null;
  };
  XRFrameDataProvider_GetFrameData_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  XRFrameDataProvider_GetFrameData_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRFrameDataProvider_GetFrameData_Params.options
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, XRFrameDataRequestOptions, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  XRFrameDataProvider_GetFrameData_Params.encodedSize = codec.kStructHeaderSize + 8;

  XRFrameDataProvider_GetFrameData_Params.decode = function(decoder) {
    var packed;
    var val = new XRFrameDataProvider_GetFrameData_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.options = decoder.decodeStructPointer(XRFrameDataRequestOptions);
    return val;
  };

  XRFrameDataProvider_GetFrameData_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(XRFrameDataProvider_GetFrameData_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(XRFrameDataRequestOptions, val.options);
  };
  function XRFrameDataProvider_GetFrameData_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  XRFrameDataProvider_GetFrameData_ResponseParams.prototype.initDefaults_ = function() {
    this.frameData = null;
  };
  XRFrameDataProvider_GetFrameData_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  XRFrameDataProvider_GetFrameData_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRFrameDataProvider_GetFrameData_ResponseParams.frameData
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, XRFrameData, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  XRFrameDataProvider_GetFrameData_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  XRFrameDataProvider_GetFrameData_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new XRFrameDataProvider_GetFrameData_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.frameData = decoder.decodeStructPointer(XRFrameData);
    return val;
  };

  XRFrameDataProvider_GetFrameData_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(XRFrameDataProvider_GetFrameData_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(XRFrameData, val.frameData);
  };
  function XRFrameDataProvider_GetEnvironmentIntegrationProvider_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  XRFrameDataProvider_GetEnvironmentIntegrationProvider_Params.prototype.initDefaults_ = function() {
    this.environmentProvider = new associatedBindings.AssociatedInterfaceRequest();
  };
  XRFrameDataProvider_GetEnvironmentIntegrationProvider_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  XRFrameDataProvider_GetEnvironmentIntegrationProvider_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRFrameDataProvider_GetEnvironmentIntegrationProvider_Params.environmentProvider
    err = messageValidator.validateAssociatedInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  XRFrameDataProvider_GetEnvironmentIntegrationProvider_Params.encodedSize = codec.kStructHeaderSize + 8;

  XRFrameDataProvider_GetEnvironmentIntegrationProvider_Params.decode = function(decoder) {
    var packed;
    var val = new XRFrameDataProvider_GetEnvironmentIntegrationProvider_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.environmentProvider = decoder.decodeStruct(codec.AssociatedInterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  XRFrameDataProvider_GetEnvironmentIntegrationProvider_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(XRFrameDataProvider_GetEnvironmentIntegrationProvider_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.AssociatedInterfaceRequest, val.environmentProvider);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function XRFrameDataProvider_SetInputSourceButtonListener_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  XRFrameDataProvider_SetInputSourceButtonListener_Params.prototype.initDefaults_ = function() {
    this.eventListener = new associatedBindings.AssociatedInterfacePtrInfo();
  };
  XRFrameDataProvider_SetInputSourceButtonListener_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  XRFrameDataProvider_SetInputSourceButtonListener_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRFrameDataProvider_SetInputSourceButtonListener_Params.eventListener
    err = messageValidator.validateAssociatedInterface(offset + codec.kStructHeaderSize + 0, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  XRFrameDataProvider_SetInputSourceButtonListener_Params.encodedSize = codec.kStructHeaderSize + 8;

  XRFrameDataProvider_SetInputSourceButtonListener_Params.decode = function(decoder) {
    var packed;
    var val = new XRFrameDataProvider_SetInputSourceButtonListener_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.eventListener = decoder.decodeStruct(codec.NullableAssociatedInterfacePtrInfo);
    return val;
  };

  XRFrameDataProvider_SetInputSourceButtonListener_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(XRFrameDataProvider_SetInputSourceButtonListener_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.NullableAssociatedInterfacePtrInfo, val.eventListener);
  };
  function XRPresentationProvider_UpdateLayerBounds_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  XRPresentationProvider_UpdateLayerBounds_Params.prototype.initDefaults_ = function() {
    this.frameId = 0;
    this.leftBounds = null;
    this.rightBounds = null;
    this.sourceSize = null;
  };
  XRPresentationProvider_UpdateLayerBounds_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  XRPresentationProvider_UpdateLayerBounds_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate XRPresentationProvider_UpdateLayerBounds_Params.leftBounds
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, geometry$.RectF, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRPresentationProvider_UpdateLayerBounds_Params.rightBounds
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, geometry$.RectF, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRPresentationProvider_UpdateLayerBounds_Params.sourceSize
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, geometry$.Size, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  XRPresentationProvider_UpdateLayerBounds_Params.encodedSize = codec.kStructHeaderSize + 32;

  XRPresentationProvider_UpdateLayerBounds_Params.decode = function(decoder) {
    var packed;
    var val = new XRPresentationProvider_UpdateLayerBounds_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.frameId = decoder.decodeStruct(codec.Int16);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.leftBounds = decoder.decodeStructPointer(geometry$.RectF);
    val.rightBounds = decoder.decodeStructPointer(geometry$.RectF);
    val.sourceSize = decoder.decodeStructPointer(geometry$.Size);
    return val;
  };

  XRPresentationProvider_UpdateLayerBounds_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(XRPresentationProvider_UpdateLayerBounds_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int16, val.frameId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(geometry$.RectF, val.leftBounds);
    encoder.encodeStructPointer(geometry$.RectF, val.rightBounds);
    encoder.encodeStructPointer(geometry$.Size, val.sourceSize);
  };
  function XRPresentationProvider_SubmitFrameMissing_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  XRPresentationProvider_SubmitFrameMissing_Params.prototype.initDefaults_ = function() {
    this.frameId = 0;
    this.syncToken = null;
  };
  XRPresentationProvider_SubmitFrameMissing_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  XRPresentationProvider_SubmitFrameMissing_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate XRPresentationProvider_SubmitFrameMissing_Params.syncToken
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, sync_token$.SyncToken, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  XRPresentationProvider_SubmitFrameMissing_Params.encodedSize = codec.kStructHeaderSize + 16;

  XRPresentationProvider_SubmitFrameMissing_Params.decode = function(decoder) {
    var packed;
    var val = new XRPresentationProvider_SubmitFrameMissing_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.frameId = decoder.decodeStruct(codec.Int16);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.syncToken = decoder.decodeStructPointer(sync_token$.SyncToken);
    return val;
  };

  XRPresentationProvider_SubmitFrameMissing_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(XRPresentationProvider_SubmitFrameMissing_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int16, val.frameId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(sync_token$.SyncToken, val.syncToken);
  };
  function XRPresentationProvider_SubmitFrame_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  XRPresentationProvider_SubmitFrame_Params.prototype.initDefaults_ = function() {
    this.frameId = 0;
    this.mailboxHolder = null;
    this.timeWaited = null;
  };
  XRPresentationProvider_SubmitFrame_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  XRPresentationProvider_SubmitFrame_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate XRPresentationProvider_SubmitFrame_Params.mailboxHolder
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, mailbox_holder$.MailboxHolder, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRPresentationProvider_SubmitFrame_Params.timeWaited
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, time$.TimeDelta, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  XRPresentationProvider_SubmitFrame_Params.encodedSize = codec.kStructHeaderSize + 24;

  XRPresentationProvider_SubmitFrame_Params.decode = function(decoder) {
    var packed;
    var val = new XRPresentationProvider_SubmitFrame_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.frameId = decoder.decodeStruct(codec.Int16);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.mailboxHolder = decoder.decodeStructPointer(mailbox_holder$.MailboxHolder);
    val.timeWaited = decoder.decodeStructPointer(time$.TimeDelta);
    return val;
  };

  XRPresentationProvider_SubmitFrame_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(XRPresentationProvider_SubmitFrame_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int16, val.frameId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(mailbox_holder$.MailboxHolder, val.mailboxHolder);
    encoder.encodeStructPointer(time$.TimeDelta, val.timeWaited);
  };
  function XRPresentationProvider_SubmitFrameWithTextureHandle_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  XRPresentationProvider_SubmitFrameWithTextureHandle_Params.prototype.initDefaults_ = function() {
    this.frameId = 0;
    this.texture = null;
  };
  XRPresentationProvider_SubmitFrameWithTextureHandle_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  XRPresentationProvider_SubmitFrameWithTextureHandle_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate XRPresentationProvider_SubmitFrameWithTextureHandle_Params.texture
    err = messageValidator.validateHandle(offset + codec.kStructHeaderSize + 4, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  XRPresentationProvider_SubmitFrameWithTextureHandle_Params.encodedSize = codec.kStructHeaderSize + 8;

  XRPresentationProvider_SubmitFrameWithTextureHandle_Params.decode = function(decoder) {
    var packed;
    var val = new XRPresentationProvider_SubmitFrameWithTextureHandle_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.frameId = decoder.decodeStruct(codec.Int16);
    decoder.skip(1);
    decoder.skip(1);
    val.texture = decoder.decodeStruct(codec.Handle);
    return val;
  };

  XRPresentationProvider_SubmitFrameWithTextureHandle_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(XRPresentationProvider_SubmitFrameWithTextureHandle_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int16, val.frameId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Handle, val.texture);
  };
  function XRPresentationProvider_SubmitFrameDrawnIntoTexture_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  XRPresentationProvider_SubmitFrameDrawnIntoTexture_Params.prototype.initDefaults_ = function() {
    this.frameId = 0;
    this.syncToken = null;
    this.timeWaited = null;
  };
  XRPresentationProvider_SubmitFrameDrawnIntoTexture_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  XRPresentationProvider_SubmitFrameDrawnIntoTexture_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate XRPresentationProvider_SubmitFrameDrawnIntoTexture_Params.syncToken
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, sync_token$.SyncToken, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRPresentationProvider_SubmitFrameDrawnIntoTexture_Params.timeWaited
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, time$.TimeDelta, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  XRPresentationProvider_SubmitFrameDrawnIntoTexture_Params.encodedSize = codec.kStructHeaderSize + 24;

  XRPresentationProvider_SubmitFrameDrawnIntoTexture_Params.decode = function(decoder) {
    var packed;
    var val = new XRPresentationProvider_SubmitFrameDrawnIntoTexture_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.frameId = decoder.decodeStruct(codec.Int16);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.syncToken = decoder.decodeStructPointer(sync_token$.SyncToken);
    val.timeWaited = decoder.decodeStructPointer(time$.TimeDelta);
    return val;
  };

  XRPresentationProvider_SubmitFrameDrawnIntoTexture_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(XRPresentationProvider_SubmitFrameDrawnIntoTexture_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int16, val.frameId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(sync_token$.SyncToken, val.syncToken);
    encoder.encodeStructPointer(time$.TimeDelta, val.timeWaited);
  };
  function XRPresentationClient_OnSubmitFrameTransferred_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  XRPresentationClient_OnSubmitFrameTransferred_Params.prototype.initDefaults_ = function() {
    this.success = false;
  };
  XRPresentationClient_OnSubmitFrameTransferred_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  XRPresentationClient_OnSubmitFrameTransferred_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  XRPresentationClient_OnSubmitFrameTransferred_Params.encodedSize = codec.kStructHeaderSize + 8;

  XRPresentationClient_OnSubmitFrameTransferred_Params.decode = function(decoder) {
    var packed;
    var val = new XRPresentationClient_OnSubmitFrameTransferred_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.success = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  XRPresentationClient_OnSubmitFrameTransferred_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(XRPresentationClient_OnSubmitFrameTransferred_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.success & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function XRPresentationClient_OnSubmitFrameRendered_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  XRPresentationClient_OnSubmitFrameRendered_Params.prototype.initDefaults_ = function() {
  };
  XRPresentationClient_OnSubmitFrameRendered_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  XRPresentationClient_OnSubmitFrameRendered_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  XRPresentationClient_OnSubmitFrameRendered_Params.encodedSize = codec.kStructHeaderSize + 0;

  XRPresentationClient_OnSubmitFrameRendered_Params.decode = function(decoder) {
    var packed;
    var val = new XRPresentationClient_OnSubmitFrameRendered_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  XRPresentationClient_OnSubmitFrameRendered_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(XRPresentationClient_OnSubmitFrameRendered_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function XRPresentationClient_OnSubmitFrameGpuFence_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  XRPresentationClient_OnSubmitFrameGpuFence_Params.prototype.initDefaults_ = function() {
    this.gpuFenceHandle = null;
  };
  XRPresentationClient_OnSubmitFrameGpuFence_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  XRPresentationClient_OnSubmitFrameGpuFence_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRPresentationClient_OnSubmitFrameGpuFence_Params.gpuFenceHandle
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, gpu_fence_handle$.GpuFenceHandle, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  XRPresentationClient_OnSubmitFrameGpuFence_Params.encodedSize = codec.kStructHeaderSize + 8;

  XRPresentationClient_OnSubmitFrameGpuFence_Params.decode = function(decoder) {
    var packed;
    var val = new XRPresentationClient_OnSubmitFrameGpuFence_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.gpuFenceHandle = decoder.decodeStructPointer(gpu_fence_handle$.GpuFenceHandle);
    return val;
  };

  XRPresentationClient_OnSubmitFrameGpuFence_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(XRPresentationClient_OnSubmitFrameGpuFence_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(gpu_fence_handle$.GpuFenceHandle, val.gpuFenceHandle);
  };
  function XRSessionClient_OnChanged_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  XRSessionClient_OnChanged_Params.prototype.initDefaults_ = function() {
    this.display = null;
  };
  XRSessionClient_OnChanged_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  XRSessionClient_OnChanged_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRSessionClient_OnChanged_Params.display
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, VRDisplayInfo, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  XRSessionClient_OnChanged_Params.encodedSize = codec.kStructHeaderSize + 8;

  XRSessionClient_OnChanged_Params.decode = function(decoder) {
    var packed;
    var val = new XRSessionClient_OnChanged_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.display = decoder.decodeStructPointer(VRDisplayInfo);
    return val;
  };

  XRSessionClient_OnChanged_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(XRSessionClient_OnChanged_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(VRDisplayInfo, val.display);
  };
  function XRSessionClient_OnExitPresent_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  XRSessionClient_OnExitPresent_Params.prototype.initDefaults_ = function() {
  };
  XRSessionClient_OnExitPresent_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  XRSessionClient_OnExitPresent_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  XRSessionClient_OnExitPresent_Params.encodedSize = codec.kStructHeaderSize + 0;

  XRSessionClient_OnExitPresent_Params.decode = function(decoder) {
    var packed;
    var val = new XRSessionClient_OnExitPresent_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  XRSessionClient_OnExitPresent_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(XRSessionClient_OnExitPresent_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function XRSessionClient_OnVisibilityStateChanged_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  XRSessionClient_OnVisibilityStateChanged_Params.prototype.initDefaults_ = function() {
    this.visibilityState = 0;
  };
  XRSessionClient_OnVisibilityStateChanged_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  XRSessionClient_OnVisibilityStateChanged_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRSessionClient_OnVisibilityStateChanged_Params.visibilityState
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, XRVisibilityState);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  XRSessionClient_OnVisibilityStateChanged_Params.encodedSize = codec.kStructHeaderSize + 8;

  XRSessionClient_OnVisibilityStateChanged_Params.decode = function(decoder) {
    var packed;
    var val = new XRSessionClient_OnVisibilityStateChanged_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.visibilityState = decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  XRSessionClient_OnVisibilityStateChanged_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(XRSessionClient_OnVisibilityStateChanged_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.visibilityState);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function VRDisplayClient_OnActivate_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  VRDisplayClient_OnActivate_Params.prototype.initDefaults_ = function() {
    this.reason = 0;
  };
  VRDisplayClient_OnActivate_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  VRDisplayClient_OnActivate_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate VRDisplayClient_OnActivate_Params.reason
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, VRDisplayEventReason);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  VRDisplayClient_OnActivate_Params.encodedSize = codec.kStructHeaderSize + 8;

  VRDisplayClient_OnActivate_Params.decode = function(decoder) {
    var packed;
    var val = new VRDisplayClient_OnActivate_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.reason = decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  VRDisplayClient_OnActivate_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(VRDisplayClient_OnActivate_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.reason);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function VRDisplayClient_OnActivate_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  VRDisplayClient_OnActivate_ResponseParams.prototype.initDefaults_ = function() {
    this.willNotPresent = false;
  };
  VRDisplayClient_OnActivate_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  VRDisplayClient_OnActivate_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  VRDisplayClient_OnActivate_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  VRDisplayClient_OnActivate_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new VRDisplayClient_OnActivate_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.willNotPresent = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  VRDisplayClient_OnActivate_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(VRDisplayClient_OnActivate_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.willNotPresent & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function VRDisplayClient_OnDeactivate_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  VRDisplayClient_OnDeactivate_Params.prototype.initDefaults_ = function() {
    this.reason = 0;
  };
  VRDisplayClient_OnDeactivate_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  VRDisplayClient_OnDeactivate_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate VRDisplayClient_OnDeactivate_Params.reason
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, VRDisplayEventReason);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  VRDisplayClient_OnDeactivate_Params.encodedSize = codec.kStructHeaderSize + 8;

  VRDisplayClient_OnDeactivate_Params.decode = function(decoder) {
    var packed;
    var val = new VRDisplayClient_OnDeactivate_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.reason = decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  VRDisplayClient_OnDeactivate_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(VRDisplayClient_OnDeactivate_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.reason);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };

  function XRNativeOriginInformation(value) {
    this.initDefault_();
    this.initValue_(value);
  }


  XRNativeOriginInformation.Tags = {
    inputSourceId: 0,
    planeId: 1,
    anchorId: 2,
    referenceSpaceCategory: 3,
  };

  XRNativeOriginInformation.prototype.initDefault_ = function() {
    this.$data = null;
    this.$tag = undefined;
  }

  XRNativeOriginInformation.prototype.initValue_ = function(value) {
    if (value == undefined) {
      return;
    }

    var keys = Object.keys(value);
    if (keys.length == 0) {
      return;
    }

    if (keys.length > 1) {
      throw new TypeError("You may set only one member on a union.");
    }

    var fields = [
        "inputSourceId",
        "planeId",
        "anchorId",
        "referenceSpaceCategory",
    ];

    if (fields.indexOf(keys[0]) < 0) {
      throw new ReferenceError(keys[0] + " is not a XRNativeOriginInformation member.");

    }

    this[keys[0]] = value[keys[0]];
  }
  Object.defineProperty(XRNativeOriginInformation.prototype, "inputSourceId", {
    get: function() {
      if (this.$tag != XRNativeOriginInformation.Tags.inputSourceId) {
        throw new ReferenceError(
            "XRNativeOriginInformation.inputSourceId is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = XRNativeOriginInformation.Tags.inputSourceId;
      this.$data = value;
    }
  });
  Object.defineProperty(XRNativeOriginInformation.prototype, "planeId", {
    get: function() {
      if (this.$tag != XRNativeOriginInformation.Tags.planeId) {
        throw new ReferenceError(
            "XRNativeOriginInformation.planeId is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = XRNativeOriginInformation.Tags.planeId;
      this.$data = value;
    }
  });
  Object.defineProperty(XRNativeOriginInformation.prototype, "anchorId", {
    get: function() {
      if (this.$tag != XRNativeOriginInformation.Tags.anchorId) {
        throw new ReferenceError(
            "XRNativeOriginInformation.anchorId is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = XRNativeOriginInformation.Tags.anchorId;
      this.$data = value;
    }
  });
  Object.defineProperty(XRNativeOriginInformation.prototype, "referenceSpaceCategory", {
    get: function() {
      if (this.$tag != XRNativeOriginInformation.Tags.referenceSpaceCategory) {
        throw new ReferenceError(
            "XRNativeOriginInformation.referenceSpaceCategory is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = XRNativeOriginInformation.Tags.referenceSpaceCategory;
      this.$data = value;
    }
  });


    XRNativeOriginInformation.encode = function(encoder, val) {
      if (val == null) {
        encoder.writeUint64(0);
        encoder.writeUint64(0);
        return;
      }
      if (val.$tag == undefined) {
        throw new TypeError("Cannot encode unions with an unknown member set.");
      }

      encoder.writeUint32(16);
      encoder.writeUint32(val.$tag);
      switch (val.$tag) {
        case XRNativeOriginInformation.Tags.inputSourceId:
          encoder.encodeStruct(codec.Uint32, val.inputSourceId);
          break;
        case XRNativeOriginInformation.Tags.planeId:
          encoder.encodeStruct(codec.Uint32, val.planeId);
          break;
        case XRNativeOriginInformation.Tags.anchorId:
          encoder.encodeStruct(codec.Uint32, val.anchorId);
          break;
        case XRNativeOriginInformation.Tags.referenceSpaceCategory:
          encoder.encodeStruct(codec.Int32, val.referenceSpaceCategory);
          break;
      }
      encoder.align();
    };


    XRNativeOriginInformation.decode = function(decoder) {
      var size = decoder.readUint32();
      if (size == 0) {
        decoder.readUint32();
        decoder.readUint64();
        return null;
      }

      var result = new XRNativeOriginInformation();
      var tag = decoder.readUint32();
      switch (tag) {
        case XRNativeOriginInformation.Tags.inputSourceId:
          result.inputSourceId = decoder.decodeStruct(codec.Uint32);
          break;
        case XRNativeOriginInformation.Tags.planeId:
          result.planeId = decoder.decodeStruct(codec.Uint32);
          break;
        case XRNativeOriginInformation.Tags.anchorId:
          result.anchorId = decoder.decodeStruct(codec.Uint32);
          break;
        case XRNativeOriginInformation.Tags.referenceSpaceCategory:
          result.referenceSpaceCategory = decoder.decodeStruct(codec.Int32);
          break;
      }
      decoder.align();

      return result;
    };


    XRNativeOriginInformation.validate = function(messageValidator, offset) {
      var size = messageValidator.decodeUnionSize(offset);
      if (size != 16) {
        return validator.validationError.INVALID_UNION_SIZE;
      }

      var tag = messageValidator.decodeUnionTag(offset);
      var data_offset = offset + 8;
      var err;
      switch (tag) {
        case XRNativeOriginInformation.Tags.inputSourceId:
          

          break;
        case XRNativeOriginInformation.Tags.planeId:
          

          break;
        case XRNativeOriginInformation.Tags.anchorId:
          

          break;
        case XRNativeOriginInformation.Tags.referenceSpaceCategory:
          

    // validate XRNativeOriginInformation.referenceSpaceCategory
    err = messageValidator.validateEnum(data_offset, XRReferenceSpaceCategory);
    if (err !== validator.validationError.NONE)
        return err;
          break;
      }

      return validator.validationError.NONE;
    };

  XRNativeOriginInformation.encodedSize = 16;

  function RequestSessionResult(value) {
    this.initDefault_();
    this.initValue_(value);
  }


  RequestSessionResult.Tags = {
    session: 0,
    failureReason: 1,
  };

  RequestSessionResult.prototype.initDefault_ = function() {
    this.$data = null;
    this.$tag = undefined;
  }

  RequestSessionResult.prototype.initValue_ = function(value) {
    if (value == undefined) {
      return;
    }

    var keys = Object.keys(value);
    if (keys.length == 0) {
      return;
    }

    if (keys.length > 1) {
      throw new TypeError("You may set only one member on a union.");
    }

    var fields = [
        "session",
        "failureReason",
    ];

    if (fields.indexOf(keys[0]) < 0) {
      throw new ReferenceError(keys[0] + " is not a RequestSessionResult member.");

    }

    this[keys[0]] = value[keys[0]];
  }
  Object.defineProperty(RequestSessionResult.prototype, "session", {
    get: function() {
      if (this.$tag != RequestSessionResult.Tags.session) {
        throw new ReferenceError(
            "RequestSessionResult.session is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = RequestSessionResult.Tags.session;
      this.$data = value;
    }
  });
  Object.defineProperty(RequestSessionResult.prototype, "failureReason", {
    get: function() {
      if (this.$tag != RequestSessionResult.Tags.failureReason) {
        throw new ReferenceError(
            "RequestSessionResult.failureReason is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = RequestSessionResult.Tags.failureReason;
      this.$data = value;
    }
  });


    RequestSessionResult.encode = function(encoder, val) {
      if (val == null) {
        encoder.writeUint64(0);
        encoder.writeUint64(0);
        return;
      }
      if (val.$tag == undefined) {
        throw new TypeError("Cannot encode unions with an unknown member set.");
      }

      encoder.writeUint32(16);
      encoder.writeUint32(val.$tag);
      switch (val.$tag) {
        case RequestSessionResult.Tags.session:
          encoder.encodeStructPointer(XRSession, val.session);
          break;
        case RequestSessionResult.Tags.failureReason:
          encoder.encodeStruct(codec.Int32, val.failureReason);
          break;
      }
      encoder.align();
    };


    RequestSessionResult.decode = function(decoder) {
      var size = decoder.readUint32();
      if (size == 0) {
        decoder.readUint32();
        decoder.readUint64();
        return null;
      }

      var result = new RequestSessionResult();
      var tag = decoder.readUint32();
      switch (tag) {
        case RequestSessionResult.Tags.session:
          result.session = decoder.decodeStructPointer(XRSession);
          break;
        case RequestSessionResult.Tags.failureReason:
          result.failureReason = decoder.decodeStruct(codec.Int32);
          break;
      }
      decoder.align();

      return result;
    };


    RequestSessionResult.validate = function(messageValidator, offset) {
      var size = messageValidator.decodeUnionSize(offset);
      if (size != 16) {
        return validator.validationError.INVALID_UNION_SIZE;
      }

      var tag = messageValidator.decodeUnionTag(offset);
      var data_offset = offset + 8;
      var err;
      switch (tag) {
        case RequestSessionResult.Tags.session:
          

    // validate RequestSessionResult.session
    err = messageValidator.validateStructPointer(data_offset, XRSession, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case RequestSessionResult.Tags.failureReason:
          

    // validate RequestSessionResult.failureReason
    err = messageValidator.validateEnum(data_offset, RequestSessionError);
    if (err !== validator.validationError.NONE)
        return err;
          break;
      }

      return validator.validationError.NONE;
    };

  RequestSessionResult.encodedSize = 16;
  var kVRService_SetClient_Name = 0;
  var kVRService_SetListeningForActivate_Name = 1;
  var kVRService_RequestSession_Name = 2;
  var kVRService_SupportsSession_Name = 3;
  var kVRService_GetImmersiveVRDisplayInfo_Name = 4;
  var kVRService_ExitPresent_Name = 5;
  var kVRService_SetFramesThrottled_Name = 6;

  function VRServicePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(VRService,
                                                   handleOrPtrInfo);
  }

  function VRServiceAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        VRService, associatedInterfacePtrInfo);
  }

  VRServiceAssociatedPtr.prototype =
      Object.create(VRServicePtr.prototype);
  VRServiceAssociatedPtr.prototype.constructor =
      VRServiceAssociatedPtr;

  function VRServiceProxy(receiver) {
    this.receiver_ = receiver;
  }
  VRServicePtr.prototype.setClient = function() {
    return VRServiceProxy.prototype.setClient
        .apply(this.ptr.getProxy(), arguments);
  };

  VRServiceProxy.prototype.setClient = function(client) {
    var params_ = new VRService_SetClient_Params();
    params_.client = client;
    var builder = new codec.MessageV0Builder(
        kVRService_SetClient_Name,
        codec.align(VRService_SetClient_Params.encodedSize));
    builder.encodeStruct(VRService_SetClient_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  VRServicePtr.prototype.setListeningForActivate = function() {
    return VRServiceProxy.prototype.setListeningForActivate
        .apply(this.ptr.getProxy(), arguments);
  };

  VRServiceProxy.prototype.setListeningForActivate = function(client) {
    var params_ = new VRService_SetListeningForActivate_Params();
    params_.client = client;
    var builder = new codec.MessageV0Builder(
        kVRService_SetListeningForActivate_Name,
        codec.align(VRService_SetListeningForActivate_Params.encodedSize));
    builder.encodeStruct(VRService_SetListeningForActivate_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  VRServicePtr.prototype.requestSession = function() {
    return VRServiceProxy.prototype.requestSession
        .apply(this.ptr.getProxy(), arguments);
  };

  VRServiceProxy.prototype.requestSession = function(options) {
    var params_ = new VRService_RequestSession_Params();
    params_.options = options;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kVRService_RequestSession_Name,
          codec.align(VRService_RequestSession_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(VRService_RequestSession_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(VRService_RequestSession_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  VRServicePtr.prototype.supportsSession = function() {
    return VRServiceProxy.prototype.supportsSession
        .apply(this.ptr.getProxy(), arguments);
  };

  VRServiceProxy.prototype.supportsSession = function(options) {
    var params_ = new VRService_SupportsSession_Params();
    params_.options = options;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kVRService_SupportsSession_Name,
          codec.align(VRService_SupportsSession_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(VRService_SupportsSession_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(VRService_SupportsSession_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  VRServicePtr.prototype.getImmersiveVRDisplayInfo = function() {
    return VRServiceProxy.prototype.getImmersiveVRDisplayInfo
        .apply(this.ptr.getProxy(), arguments);
  };

  VRServiceProxy.prototype.getImmersiveVRDisplayInfo = function() {
    var params_ = new VRService_GetImmersiveVRDisplayInfo_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kVRService_GetImmersiveVRDisplayInfo_Name,
          codec.align(VRService_GetImmersiveVRDisplayInfo_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(VRService_GetImmersiveVRDisplayInfo_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(VRService_GetImmersiveVRDisplayInfo_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  VRServicePtr.prototype.exitPresent = function() {
    return VRServiceProxy.prototype.exitPresent
        .apply(this.ptr.getProxy(), arguments);
  };

  VRServiceProxy.prototype.exitPresent = function() {
    var params_ = new VRService_ExitPresent_Params();
    var builder = new codec.MessageV0Builder(
        kVRService_ExitPresent_Name,
        codec.align(VRService_ExitPresent_Params.encodedSize));
    builder.encodeStruct(VRService_ExitPresent_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  VRServicePtr.prototype.setFramesThrottled = function() {
    return VRServiceProxy.prototype.setFramesThrottled
        .apply(this.ptr.getProxy(), arguments);
  };

  VRServiceProxy.prototype.setFramesThrottled = function(throttled) {
    var params_ = new VRService_SetFramesThrottled_Params();
    params_.throttled = throttled;
    var builder = new codec.MessageV0Builder(
        kVRService_SetFramesThrottled_Name,
        codec.align(VRService_SetFramesThrottled_Params.encodedSize));
    builder.encodeStruct(VRService_SetFramesThrottled_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function VRServiceStub(delegate) {
    this.delegate_ = delegate;
  }
  VRServiceStub.prototype.setClient = function(client) {
    return this.delegate_ && this.delegate_.setClient && this.delegate_.setClient(client);
  }
  VRServiceStub.prototype.setListeningForActivate = function(client) {
    return this.delegate_ && this.delegate_.setListeningForActivate && this.delegate_.setListeningForActivate(client);
  }
  VRServiceStub.prototype.requestSession = function(options) {
    return this.delegate_ && this.delegate_.requestSession && this.delegate_.requestSession(options);
  }
  VRServiceStub.prototype.supportsSession = function(options) {
    return this.delegate_ && this.delegate_.supportsSession && this.delegate_.supportsSession(options);
  }
  VRServiceStub.prototype.getImmersiveVRDisplayInfo = function() {
    return this.delegate_ && this.delegate_.getImmersiveVRDisplayInfo && this.delegate_.getImmersiveVRDisplayInfo();
  }
  VRServiceStub.prototype.exitPresent = function() {
    return this.delegate_ && this.delegate_.exitPresent && this.delegate_.exitPresent();
  }
  VRServiceStub.prototype.setFramesThrottled = function(throttled) {
    return this.delegate_ && this.delegate_.setFramesThrottled && this.delegate_.setFramesThrottled(throttled);
  }

  VRServiceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kVRService_SetClient_Name:
      var params = reader.decodeStruct(VRService_SetClient_Params);
      this.setClient(params.client);
      return true;
    case kVRService_SetListeningForActivate_Name:
      var params = reader.decodeStruct(VRService_SetListeningForActivate_Params);
      this.setListeningForActivate(params.client);
      return true;
    case kVRService_ExitPresent_Name:
      var params = reader.decodeStruct(VRService_ExitPresent_Params);
      this.exitPresent();
      return true;
    case kVRService_SetFramesThrottled_Name:
      var params = reader.decodeStruct(VRService_SetFramesThrottled_Params);
      this.setFramesThrottled(params.throttled);
      return true;
    default:
      return false;
    }
  };

  VRServiceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kVRService_RequestSession_Name:
      var params = reader.decodeStruct(VRService_RequestSession_Params);
      this.requestSession(params.options).then(function(response) {
        var responseParams =
            new VRService_RequestSession_ResponseParams();
        responseParams.result = response.result;
        var builder = new codec.MessageV1Builder(
            kVRService_RequestSession_Name,
            codec.align(VRService_RequestSession_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(VRService_RequestSession_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kVRService_SupportsSession_Name:
      var params = reader.decodeStruct(VRService_SupportsSession_Params);
      this.supportsSession(params.options).then(function(response) {
        var responseParams =
            new VRService_SupportsSession_ResponseParams();
        responseParams.supportsSession = response.supportsSession;
        var builder = new codec.MessageV1Builder(
            kVRService_SupportsSession_Name,
            codec.align(VRService_SupportsSession_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(VRService_SupportsSession_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kVRService_GetImmersiveVRDisplayInfo_Name:
      var params = reader.decodeStruct(VRService_GetImmersiveVRDisplayInfo_Params);
      this.getImmersiveVRDisplayInfo().then(function(response) {
        var responseParams =
            new VRService_GetImmersiveVRDisplayInfo_ResponseParams();
        responseParams.info = response.info;
        var builder = new codec.MessageV1Builder(
            kVRService_GetImmersiveVRDisplayInfo_Name,
            codec.align(VRService_GetImmersiveVRDisplayInfo_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(VRService_GetImmersiveVRDisplayInfo_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateVRServiceRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kVRService_SetClient_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = VRService_SetClient_Params;
      break;
      case kVRService_SetListeningForActivate_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = VRService_SetListeningForActivate_Params;
      break;
      case kVRService_RequestSession_Name:
        if (message.expectsResponse())
          paramsClass = VRService_RequestSession_Params;
      break;
      case kVRService_SupportsSession_Name:
        if (message.expectsResponse())
          paramsClass = VRService_SupportsSession_Params;
      break;
      case kVRService_GetImmersiveVRDisplayInfo_Name:
        if (message.expectsResponse())
          paramsClass = VRService_GetImmersiveVRDisplayInfo_Params;
      break;
      case kVRService_ExitPresent_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = VRService_ExitPresent_Params;
      break;
      case kVRService_SetFramesThrottled_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = VRService_SetFramesThrottled_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateVRServiceResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kVRService_RequestSession_Name:
        if (message.isResponse())
          paramsClass = VRService_RequestSession_ResponseParams;
        break;
      case kVRService_SupportsSession_Name:
        if (message.isResponse())
          paramsClass = VRService_SupportsSession_ResponseParams;
        break;
      case kVRService_GetImmersiveVRDisplayInfo_Name:
        if (message.isResponse())
          paramsClass = VRService_GetImmersiveVRDisplayInfo_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var VRService = {
    name: 'device.mojom.VRService',
    kVersion: 0,
    ptrClass: VRServicePtr,
    proxyClass: VRServiceProxy,
    stubClass: VRServiceStub,
    validateRequest: validateVRServiceRequest,
    validateResponse: validateVRServiceResponse,
  };
  VRServiceStub.prototype.validator = validateVRServiceRequest;
  VRServiceProxy.prototype.validator = validateVRServiceResponse;
  var kVRServiceClient_OnDeviceChanged_Name = 0;

  function VRServiceClientPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(VRServiceClient,
                                                   handleOrPtrInfo);
  }

  function VRServiceClientAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        VRServiceClient, associatedInterfacePtrInfo);
  }

  VRServiceClientAssociatedPtr.prototype =
      Object.create(VRServiceClientPtr.prototype);
  VRServiceClientAssociatedPtr.prototype.constructor =
      VRServiceClientAssociatedPtr;

  function VRServiceClientProxy(receiver) {
    this.receiver_ = receiver;
  }
  VRServiceClientPtr.prototype.onDeviceChanged = function() {
    return VRServiceClientProxy.prototype.onDeviceChanged
        .apply(this.ptr.getProxy(), arguments);
  };

  VRServiceClientProxy.prototype.onDeviceChanged = function() {
    var params_ = new VRServiceClient_OnDeviceChanged_Params();
    var builder = new codec.MessageV0Builder(
        kVRServiceClient_OnDeviceChanged_Name,
        codec.align(VRServiceClient_OnDeviceChanged_Params.encodedSize));
    builder.encodeStruct(VRServiceClient_OnDeviceChanged_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function VRServiceClientStub(delegate) {
    this.delegate_ = delegate;
  }
  VRServiceClientStub.prototype.onDeviceChanged = function() {
    return this.delegate_ && this.delegate_.onDeviceChanged && this.delegate_.onDeviceChanged();
  }

  VRServiceClientStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kVRServiceClient_OnDeviceChanged_Name:
      var params = reader.decodeStruct(VRServiceClient_OnDeviceChanged_Params);
      this.onDeviceChanged();
      return true;
    default:
      return false;
    }
  };

  VRServiceClientStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateVRServiceClientRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kVRServiceClient_OnDeviceChanged_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = VRServiceClient_OnDeviceChanged_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateVRServiceClientResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var VRServiceClient = {
    name: 'device.mojom.VRServiceClient',
    kVersion: 0,
    ptrClass: VRServiceClientPtr,
    proxyClass: VRServiceClientProxy,
    stubClass: VRServiceClientStub,
    validateRequest: validateVRServiceClientRequest,
    validateResponse: null,
  };
  VRServiceClientStub.prototype.validator = validateVRServiceClientRequest;
  VRServiceClientProxy.prototype.validator = null;
  var kXREnvironmentIntegrationProvider_RequestHitTest_Name = 0;
  var kXREnvironmentIntegrationProvider_SubscribeToHitTest_Name = 1;
  var kXREnvironmentIntegrationProvider_UnsubscribeFromHitTest_Name = 2;
  var kXREnvironmentIntegrationProvider_CreateAnchor_Name = 3;
  var kXREnvironmentIntegrationProvider_CreatePlaneAnchor_Name = 4;
  var kXREnvironmentIntegrationProvider_DetachAnchor_Name = 5;

  function XREnvironmentIntegrationProviderPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(XREnvironmentIntegrationProvider,
                                                   handleOrPtrInfo);
  }

  function XREnvironmentIntegrationProviderAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        XREnvironmentIntegrationProvider, associatedInterfacePtrInfo);
  }

  XREnvironmentIntegrationProviderAssociatedPtr.prototype =
      Object.create(XREnvironmentIntegrationProviderPtr.prototype);
  XREnvironmentIntegrationProviderAssociatedPtr.prototype.constructor =
      XREnvironmentIntegrationProviderAssociatedPtr;

  function XREnvironmentIntegrationProviderProxy(receiver) {
    this.receiver_ = receiver;
  }
  XREnvironmentIntegrationProviderPtr.prototype.requestHitTest = function() {
    return XREnvironmentIntegrationProviderProxy.prototype.requestHitTest
        .apply(this.ptr.getProxy(), arguments);
  };

  XREnvironmentIntegrationProviderProxy.prototype.requestHitTest = function(ray) {
    var params_ = new XREnvironmentIntegrationProvider_RequestHitTest_Params();
    params_.ray = ray;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kXREnvironmentIntegrationProvider_RequestHitTest_Name,
          codec.align(XREnvironmentIntegrationProvider_RequestHitTest_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(XREnvironmentIntegrationProvider_RequestHitTest_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(XREnvironmentIntegrationProvider_RequestHitTest_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  XREnvironmentIntegrationProviderPtr.prototype.subscribeToHitTest = function() {
    return XREnvironmentIntegrationProviderProxy.prototype.subscribeToHitTest
        .apply(this.ptr.getProxy(), arguments);
  };

  XREnvironmentIntegrationProviderProxy.prototype.subscribeToHitTest = function(nativeOriginInformation, ray) {
    var params_ = new XREnvironmentIntegrationProvider_SubscribeToHitTest_Params();
    params_.nativeOriginInformation = nativeOriginInformation;
    params_.ray = ray;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kXREnvironmentIntegrationProvider_SubscribeToHitTest_Name,
          codec.align(XREnvironmentIntegrationProvider_SubscribeToHitTest_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(XREnvironmentIntegrationProvider_SubscribeToHitTest_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(XREnvironmentIntegrationProvider_SubscribeToHitTest_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  XREnvironmentIntegrationProviderPtr.prototype.unsubscribeFromHitTest = function() {
    return XREnvironmentIntegrationProviderProxy.prototype.unsubscribeFromHitTest
        .apply(this.ptr.getProxy(), arguments);
  };

  XREnvironmentIntegrationProviderProxy.prototype.unsubscribeFromHitTest = function(subscriptionId) {
    var params_ = new XREnvironmentIntegrationProvider_UnsubscribeFromHitTest_Params();
    params_.subscriptionId = subscriptionId;
    var builder = new codec.MessageV0Builder(
        kXREnvironmentIntegrationProvider_UnsubscribeFromHitTest_Name,
        codec.align(XREnvironmentIntegrationProvider_UnsubscribeFromHitTest_Params.encodedSize));
    builder.encodeStruct(XREnvironmentIntegrationProvider_UnsubscribeFromHitTest_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  XREnvironmentIntegrationProviderPtr.prototype.createAnchor = function() {
    return XREnvironmentIntegrationProviderProxy.prototype.createAnchor
        .apply(this.ptr.getProxy(), arguments);
  };

  XREnvironmentIntegrationProviderProxy.prototype.createAnchor = function(anchorPose) {
    var params_ = new XREnvironmentIntegrationProvider_CreateAnchor_Params();
    params_.anchorPose = anchorPose;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kXREnvironmentIntegrationProvider_CreateAnchor_Name,
          codec.align(XREnvironmentIntegrationProvider_CreateAnchor_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(XREnvironmentIntegrationProvider_CreateAnchor_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(XREnvironmentIntegrationProvider_CreateAnchor_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  XREnvironmentIntegrationProviderPtr.prototype.createPlaneAnchor = function() {
    return XREnvironmentIntegrationProviderProxy.prototype.createPlaneAnchor
        .apply(this.ptr.getProxy(), arguments);
  };

  XREnvironmentIntegrationProviderProxy.prototype.createPlaneAnchor = function(anchorPose, planeId) {
    var params_ = new XREnvironmentIntegrationProvider_CreatePlaneAnchor_Params();
    params_.anchorPose = anchorPose;
    params_.planeId = planeId;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kXREnvironmentIntegrationProvider_CreatePlaneAnchor_Name,
          codec.align(XREnvironmentIntegrationProvider_CreatePlaneAnchor_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(XREnvironmentIntegrationProvider_CreatePlaneAnchor_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(XREnvironmentIntegrationProvider_CreatePlaneAnchor_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  XREnvironmentIntegrationProviderPtr.prototype.detachAnchor = function() {
    return XREnvironmentIntegrationProviderProxy.prototype.detachAnchor
        .apply(this.ptr.getProxy(), arguments);
  };

  XREnvironmentIntegrationProviderProxy.prototype.detachAnchor = function(anchorId) {
    var params_ = new XREnvironmentIntegrationProvider_DetachAnchor_Params();
    params_.anchorId = anchorId;
    var builder = new codec.MessageV0Builder(
        kXREnvironmentIntegrationProvider_DetachAnchor_Name,
        codec.align(XREnvironmentIntegrationProvider_DetachAnchor_Params.encodedSize));
    builder.encodeStruct(XREnvironmentIntegrationProvider_DetachAnchor_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function XREnvironmentIntegrationProviderStub(delegate) {
    this.delegate_ = delegate;
  }
  XREnvironmentIntegrationProviderStub.prototype.requestHitTest = function(ray) {
    return this.delegate_ && this.delegate_.requestHitTest && this.delegate_.requestHitTest(ray);
  }
  XREnvironmentIntegrationProviderStub.prototype.subscribeToHitTest = function(nativeOriginInformation, ray) {
    return this.delegate_ && this.delegate_.subscribeToHitTest && this.delegate_.subscribeToHitTest(nativeOriginInformation, ray);
  }
  XREnvironmentIntegrationProviderStub.prototype.unsubscribeFromHitTest = function(subscriptionId) {
    return this.delegate_ && this.delegate_.unsubscribeFromHitTest && this.delegate_.unsubscribeFromHitTest(subscriptionId);
  }
  XREnvironmentIntegrationProviderStub.prototype.createAnchor = function(anchorPose) {
    return this.delegate_ && this.delegate_.createAnchor && this.delegate_.createAnchor(anchorPose);
  }
  XREnvironmentIntegrationProviderStub.prototype.createPlaneAnchor = function(anchorPose, planeId) {
    return this.delegate_ && this.delegate_.createPlaneAnchor && this.delegate_.createPlaneAnchor(anchorPose, planeId);
  }
  XREnvironmentIntegrationProviderStub.prototype.detachAnchor = function(anchorId) {
    return this.delegate_ && this.delegate_.detachAnchor && this.delegate_.detachAnchor(anchorId);
  }

  XREnvironmentIntegrationProviderStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kXREnvironmentIntegrationProvider_UnsubscribeFromHitTest_Name:
      var params = reader.decodeStruct(XREnvironmentIntegrationProvider_UnsubscribeFromHitTest_Params);
      this.unsubscribeFromHitTest(params.subscriptionId);
      return true;
    case kXREnvironmentIntegrationProvider_DetachAnchor_Name:
      var params = reader.decodeStruct(XREnvironmentIntegrationProvider_DetachAnchor_Params);
      this.detachAnchor(params.anchorId);
      return true;
    default:
      return false;
    }
  };

  XREnvironmentIntegrationProviderStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kXREnvironmentIntegrationProvider_RequestHitTest_Name:
      var params = reader.decodeStruct(XREnvironmentIntegrationProvider_RequestHitTest_Params);
      this.requestHitTest(params.ray).then(function(response) {
        var responseParams =
            new XREnvironmentIntegrationProvider_RequestHitTest_ResponseParams();
        responseParams.results = response.results;
        var builder = new codec.MessageV1Builder(
            kXREnvironmentIntegrationProvider_RequestHitTest_Name,
            codec.align(XREnvironmentIntegrationProvider_RequestHitTest_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(XREnvironmentIntegrationProvider_RequestHitTest_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kXREnvironmentIntegrationProvider_SubscribeToHitTest_Name:
      var params = reader.decodeStruct(XREnvironmentIntegrationProvider_SubscribeToHitTest_Params);
      this.subscribeToHitTest(params.nativeOriginInformation, params.ray).then(function(response) {
        var responseParams =
            new XREnvironmentIntegrationProvider_SubscribeToHitTest_ResponseParams();
        responseParams.result = response.result;
        responseParams.subscriptionId = response.subscriptionId;
        var builder = new codec.MessageV1Builder(
            kXREnvironmentIntegrationProvider_SubscribeToHitTest_Name,
            codec.align(XREnvironmentIntegrationProvider_SubscribeToHitTest_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(XREnvironmentIntegrationProvider_SubscribeToHitTest_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kXREnvironmentIntegrationProvider_CreateAnchor_Name:
      var params = reader.decodeStruct(XREnvironmentIntegrationProvider_CreateAnchor_Params);
      this.createAnchor(params.anchorPose).then(function(response) {
        var responseParams =
            new XREnvironmentIntegrationProvider_CreateAnchor_ResponseParams();
        responseParams.result = response.result;
        responseParams.anchorId = response.anchorId;
        var builder = new codec.MessageV1Builder(
            kXREnvironmentIntegrationProvider_CreateAnchor_Name,
            codec.align(XREnvironmentIntegrationProvider_CreateAnchor_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(XREnvironmentIntegrationProvider_CreateAnchor_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kXREnvironmentIntegrationProvider_CreatePlaneAnchor_Name:
      var params = reader.decodeStruct(XREnvironmentIntegrationProvider_CreatePlaneAnchor_Params);
      this.createPlaneAnchor(params.anchorPose, params.planeId).then(function(response) {
        var responseParams =
            new XREnvironmentIntegrationProvider_CreatePlaneAnchor_ResponseParams();
        responseParams.result = response.result;
        responseParams.anchorId = response.anchorId;
        var builder = new codec.MessageV1Builder(
            kXREnvironmentIntegrationProvider_CreatePlaneAnchor_Name,
            codec.align(XREnvironmentIntegrationProvider_CreatePlaneAnchor_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(XREnvironmentIntegrationProvider_CreatePlaneAnchor_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateXREnvironmentIntegrationProviderRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kXREnvironmentIntegrationProvider_RequestHitTest_Name:
        if (message.expectsResponse())
          paramsClass = XREnvironmentIntegrationProvider_RequestHitTest_Params;
      break;
      case kXREnvironmentIntegrationProvider_SubscribeToHitTest_Name:
        if (message.expectsResponse())
          paramsClass = XREnvironmentIntegrationProvider_SubscribeToHitTest_Params;
      break;
      case kXREnvironmentIntegrationProvider_UnsubscribeFromHitTest_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = XREnvironmentIntegrationProvider_UnsubscribeFromHitTest_Params;
      break;
      case kXREnvironmentIntegrationProvider_CreateAnchor_Name:
        if (message.expectsResponse())
          paramsClass = XREnvironmentIntegrationProvider_CreateAnchor_Params;
      break;
      case kXREnvironmentIntegrationProvider_CreatePlaneAnchor_Name:
        if (message.expectsResponse())
          paramsClass = XREnvironmentIntegrationProvider_CreatePlaneAnchor_Params;
      break;
      case kXREnvironmentIntegrationProvider_DetachAnchor_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = XREnvironmentIntegrationProvider_DetachAnchor_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateXREnvironmentIntegrationProviderResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kXREnvironmentIntegrationProvider_RequestHitTest_Name:
        if (message.isResponse())
          paramsClass = XREnvironmentIntegrationProvider_RequestHitTest_ResponseParams;
        break;
      case kXREnvironmentIntegrationProvider_SubscribeToHitTest_Name:
        if (message.isResponse())
          paramsClass = XREnvironmentIntegrationProvider_SubscribeToHitTest_ResponseParams;
        break;
      case kXREnvironmentIntegrationProvider_CreateAnchor_Name:
        if (message.isResponse())
          paramsClass = XREnvironmentIntegrationProvider_CreateAnchor_ResponseParams;
        break;
      case kXREnvironmentIntegrationProvider_CreatePlaneAnchor_Name:
        if (message.isResponse())
          paramsClass = XREnvironmentIntegrationProvider_CreatePlaneAnchor_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var XREnvironmentIntegrationProvider = {
    name: 'device.mojom.XREnvironmentIntegrationProvider',
    kVersion: 0,
    ptrClass: XREnvironmentIntegrationProviderPtr,
    proxyClass: XREnvironmentIntegrationProviderProxy,
    stubClass: XREnvironmentIntegrationProviderStub,
    validateRequest: validateXREnvironmentIntegrationProviderRequest,
    validateResponse: validateXREnvironmentIntegrationProviderResponse,
  };
  XREnvironmentIntegrationProviderStub.prototype.validator = validateXREnvironmentIntegrationProviderRequest;
  XREnvironmentIntegrationProviderProxy.prototype.validator = validateXREnvironmentIntegrationProviderResponse;
  var kXRInputSourceButtonListener_OnButtonEvent_Name = 0;

  function XRInputSourceButtonListenerPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(XRInputSourceButtonListener,
                                                   handleOrPtrInfo);
  }

  function XRInputSourceButtonListenerAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        XRInputSourceButtonListener, associatedInterfacePtrInfo);
  }

  XRInputSourceButtonListenerAssociatedPtr.prototype =
      Object.create(XRInputSourceButtonListenerPtr.prototype);
  XRInputSourceButtonListenerAssociatedPtr.prototype.constructor =
      XRInputSourceButtonListenerAssociatedPtr;

  function XRInputSourceButtonListenerProxy(receiver) {
    this.receiver_ = receiver;
  }
  XRInputSourceButtonListenerPtr.prototype.onButtonEvent = function() {
    return XRInputSourceButtonListenerProxy.prototype.onButtonEvent
        .apply(this.ptr.getProxy(), arguments);
  };

  XRInputSourceButtonListenerProxy.prototype.onButtonEvent = function(inputSource) {
    var params_ = new XRInputSourceButtonListener_OnButtonEvent_Params();
    params_.inputSource = inputSource;
    var builder = new codec.MessageV0Builder(
        kXRInputSourceButtonListener_OnButtonEvent_Name,
        codec.align(XRInputSourceButtonListener_OnButtonEvent_Params.encodedSize));
    builder.encodeStruct(XRInputSourceButtonListener_OnButtonEvent_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function XRInputSourceButtonListenerStub(delegate) {
    this.delegate_ = delegate;
  }
  XRInputSourceButtonListenerStub.prototype.onButtonEvent = function(inputSource) {
    return this.delegate_ && this.delegate_.onButtonEvent && this.delegate_.onButtonEvent(inputSource);
  }

  XRInputSourceButtonListenerStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kXRInputSourceButtonListener_OnButtonEvent_Name:
      var params = reader.decodeStruct(XRInputSourceButtonListener_OnButtonEvent_Params);
      this.onButtonEvent(params.inputSource);
      return true;
    default:
      return false;
    }
  };

  XRInputSourceButtonListenerStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateXRInputSourceButtonListenerRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kXRInputSourceButtonListener_OnButtonEvent_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = XRInputSourceButtonListener_OnButtonEvent_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateXRInputSourceButtonListenerResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var XRInputSourceButtonListener = {
    name: 'device.mojom.XRInputSourceButtonListener',
    kVersion: 0,
    ptrClass: XRInputSourceButtonListenerPtr,
    proxyClass: XRInputSourceButtonListenerProxy,
    stubClass: XRInputSourceButtonListenerStub,
    validateRequest: validateXRInputSourceButtonListenerRequest,
    validateResponse: null,
  };
  XRInputSourceButtonListenerStub.prototype.validator = validateXRInputSourceButtonListenerRequest;
  XRInputSourceButtonListenerProxy.prototype.validator = null;
  var kXRFrameDataProvider_GetFrameData_Name = 0;
  var kXRFrameDataProvider_GetEnvironmentIntegrationProvider_Name = 1;
  var kXRFrameDataProvider_SetInputSourceButtonListener_Name = 2;

  function XRFrameDataProviderPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(XRFrameDataProvider,
                                                   handleOrPtrInfo);
  }

  function XRFrameDataProviderAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        XRFrameDataProvider, associatedInterfacePtrInfo);
  }

  XRFrameDataProviderAssociatedPtr.prototype =
      Object.create(XRFrameDataProviderPtr.prototype);
  XRFrameDataProviderAssociatedPtr.prototype.constructor =
      XRFrameDataProviderAssociatedPtr;

  function XRFrameDataProviderProxy(receiver) {
    this.receiver_ = receiver;
  }
  XRFrameDataProviderPtr.prototype.getFrameData = function() {
    return XRFrameDataProviderProxy.prototype.getFrameData
        .apply(this.ptr.getProxy(), arguments);
  };

  XRFrameDataProviderProxy.prototype.getFrameData = function(options) {
    var params_ = new XRFrameDataProvider_GetFrameData_Params();
    params_.options = options;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kXRFrameDataProvider_GetFrameData_Name,
          codec.align(XRFrameDataProvider_GetFrameData_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(XRFrameDataProvider_GetFrameData_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(XRFrameDataProvider_GetFrameData_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  XRFrameDataProviderPtr.prototype.getEnvironmentIntegrationProvider = function() {
    return XRFrameDataProviderProxy.prototype.getEnvironmentIntegrationProvider
        .apply(this.ptr.getProxy(), arguments);
  };

  XRFrameDataProviderProxy.prototype.getEnvironmentIntegrationProvider = function(environmentProvider) {
    var params_ = new XRFrameDataProvider_GetEnvironmentIntegrationProvider_Params();
    params_.environmentProvider = environmentProvider;
    var builder = new codec.MessageV2Builder(
        kXRFrameDataProvider_GetEnvironmentIntegrationProvider_Name,
        codec.align(XRFrameDataProvider_GetEnvironmentIntegrationProvider_Params.encodedSize));
    builder.setPayload(XRFrameDataProvider_GetEnvironmentIntegrationProvider_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  XRFrameDataProviderPtr.prototype.setInputSourceButtonListener = function() {
    return XRFrameDataProviderProxy.prototype.setInputSourceButtonListener
        .apply(this.ptr.getProxy(), arguments);
  };

  XRFrameDataProviderProxy.prototype.setInputSourceButtonListener = function(eventListener) {
    var params_ = new XRFrameDataProvider_SetInputSourceButtonListener_Params();
    params_.eventListener = eventListener;
    var builder = new codec.MessageV2Builder(
        kXRFrameDataProvider_SetInputSourceButtonListener_Name,
        codec.align(XRFrameDataProvider_SetInputSourceButtonListener_Params.encodedSize));
    builder.setPayload(XRFrameDataProvider_SetInputSourceButtonListener_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function XRFrameDataProviderStub(delegate) {
    this.delegate_ = delegate;
  }
  XRFrameDataProviderStub.prototype.getFrameData = function(options) {
    return this.delegate_ && this.delegate_.getFrameData && this.delegate_.getFrameData(options);
  }
  XRFrameDataProviderStub.prototype.getEnvironmentIntegrationProvider = function(environmentProvider) {
    return this.delegate_ && this.delegate_.getEnvironmentIntegrationProvider && this.delegate_.getEnvironmentIntegrationProvider(environmentProvider);
  }
  XRFrameDataProviderStub.prototype.setInputSourceButtonListener = function(eventListener) {
    return this.delegate_ && this.delegate_.setInputSourceButtonListener && this.delegate_.setInputSourceButtonListener(eventListener);
  }

  XRFrameDataProviderStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kXRFrameDataProvider_GetEnvironmentIntegrationProvider_Name:
      var params = reader.decodeStruct(XRFrameDataProvider_GetEnvironmentIntegrationProvider_Params);
      this.getEnvironmentIntegrationProvider(params.environmentProvider);
      return true;
    case kXRFrameDataProvider_SetInputSourceButtonListener_Name:
      var params = reader.decodeStruct(XRFrameDataProvider_SetInputSourceButtonListener_Params);
      this.setInputSourceButtonListener(params.eventListener);
      return true;
    default:
      return false;
    }
  };

  XRFrameDataProviderStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kXRFrameDataProvider_GetFrameData_Name:
      var params = reader.decodeStruct(XRFrameDataProvider_GetFrameData_Params);
      this.getFrameData(params.options).then(function(response) {
        var responseParams =
            new XRFrameDataProvider_GetFrameData_ResponseParams();
        responseParams.frameData = response.frameData;
        var builder = new codec.MessageV1Builder(
            kXRFrameDataProvider_GetFrameData_Name,
            codec.align(XRFrameDataProvider_GetFrameData_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(XRFrameDataProvider_GetFrameData_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateXRFrameDataProviderRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kXRFrameDataProvider_GetFrameData_Name:
        if (message.expectsResponse())
          paramsClass = XRFrameDataProvider_GetFrameData_Params;
      break;
      case kXRFrameDataProvider_GetEnvironmentIntegrationProvider_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = XRFrameDataProvider_GetEnvironmentIntegrationProvider_Params;
      break;
      case kXRFrameDataProvider_SetInputSourceButtonListener_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = XRFrameDataProvider_SetInputSourceButtonListener_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateXRFrameDataProviderResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kXRFrameDataProvider_GetFrameData_Name:
        if (message.isResponse())
          paramsClass = XRFrameDataProvider_GetFrameData_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var XRFrameDataProvider = {
    name: 'device.mojom.XRFrameDataProvider',
    kVersion: 0,
    ptrClass: XRFrameDataProviderPtr,
    proxyClass: XRFrameDataProviderProxy,
    stubClass: XRFrameDataProviderStub,
    validateRequest: validateXRFrameDataProviderRequest,
    validateResponse: validateXRFrameDataProviderResponse,
  };
  XRFrameDataProviderStub.prototype.validator = validateXRFrameDataProviderRequest;
  XRFrameDataProviderProxy.prototype.validator = validateXRFrameDataProviderResponse;
  var kXRPresentationProvider_UpdateLayerBounds_Name = 0;
  var kXRPresentationProvider_SubmitFrameMissing_Name = 1;
  var kXRPresentationProvider_SubmitFrame_Name = 2;
  var kXRPresentationProvider_SubmitFrameWithTextureHandle_Name = 3;
  var kXRPresentationProvider_SubmitFrameDrawnIntoTexture_Name = 4;

  function XRPresentationProviderPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(XRPresentationProvider,
                                                   handleOrPtrInfo);
  }

  function XRPresentationProviderAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        XRPresentationProvider, associatedInterfacePtrInfo);
  }

  XRPresentationProviderAssociatedPtr.prototype =
      Object.create(XRPresentationProviderPtr.prototype);
  XRPresentationProviderAssociatedPtr.prototype.constructor =
      XRPresentationProviderAssociatedPtr;

  function XRPresentationProviderProxy(receiver) {
    this.receiver_ = receiver;
  }
  XRPresentationProviderPtr.prototype.updateLayerBounds = function() {
    return XRPresentationProviderProxy.prototype.updateLayerBounds
        .apply(this.ptr.getProxy(), arguments);
  };

  XRPresentationProviderProxy.prototype.updateLayerBounds = function(frameId, leftBounds, rightBounds, sourceSize) {
    var params_ = new XRPresentationProvider_UpdateLayerBounds_Params();
    params_.frameId = frameId;
    params_.leftBounds = leftBounds;
    params_.rightBounds = rightBounds;
    params_.sourceSize = sourceSize;
    var builder = new codec.MessageV0Builder(
        kXRPresentationProvider_UpdateLayerBounds_Name,
        codec.align(XRPresentationProvider_UpdateLayerBounds_Params.encodedSize));
    builder.encodeStruct(XRPresentationProvider_UpdateLayerBounds_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  XRPresentationProviderPtr.prototype.submitFrameMissing = function() {
    return XRPresentationProviderProxy.prototype.submitFrameMissing
        .apply(this.ptr.getProxy(), arguments);
  };

  XRPresentationProviderProxy.prototype.submitFrameMissing = function(frameId, syncToken) {
    var params_ = new XRPresentationProvider_SubmitFrameMissing_Params();
    params_.frameId = frameId;
    params_.syncToken = syncToken;
    var builder = new codec.MessageV0Builder(
        kXRPresentationProvider_SubmitFrameMissing_Name,
        codec.align(XRPresentationProvider_SubmitFrameMissing_Params.encodedSize));
    builder.encodeStruct(XRPresentationProvider_SubmitFrameMissing_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  XRPresentationProviderPtr.prototype.submitFrame = function() {
    return XRPresentationProviderProxy.prototype.submitFrame
        .apply(this.ptr.getProxy(), arguments);
  };

  XRPresentationProviderProxy.prototype.submitFrame = function(frameId, mailboxHolder, timeWaited) {
    var params_ = new XRPresentationProvider_SubmitFrame_Params();
    params_.frameId = frameId;
    params_.mailboxHolder = mailboxHolder;
    params_.timeWaited = timeWaited;
    var builder = new codec.MessageV0Builder(
        kXRPresentationProvider_SubmitFrame_Name,
        codec.align(XRPresentationProvider_SubmitFrame_Params.encodedSize));
    builder.encodeStruct(XRPresentationProvider_SubmitFrame_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  XRPresentationProviderPtr.prototype.submitFrameWithTextureHandle = function() {
    return XRPresentationProviderProxy.prototype.submitFrameWithTextureHandle
        .apply(this.ptr.getProxy(), arguments);
  };

  XRPresentationProviderProxy.prototype.submitFrameWithTextureHandle = function(frameId, texture) {
    var params_ = new XRPresentationProvider_SubmitFrameWithTextureHandle_Params();
    params_.frameId = frameId;
    params_.texture = texture;
    var builder = new codec.MessageV0Builder(
        kXRPresentationProvider_SubmitFrameWithTextureHandle_Name,
        codec.align(XRPresentationProvider_SubmitFrameWithTextureHandle_Params.encodedSize));
    builder.encodeStruct(XRPresentationProvider_SubmitFrameWithTextureHandle_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  XRPresentationProviderPtr.prototype.submitFrameDrawnIntoTexture = function() {
    return XRPresentationProviderProxy.prototype.submitFrameDrawnIntoTexture
        .apply(this.ptr.getProxy(), arguments);
  };

  XRPresentationProviderProxy.prototype.submitFrameDrawnIntoTexture = function(frameId, syncToken, timeWaited) {
    var params_ = new XRPresentationProvider_SubmitFrameDrawnIntoTexture_Params();
    params_.frameId = frameId;
    params_.syncToken = syncToken;
    params_.timeWaited = timeWaited;
    var builder = new codec.MessageV0Builder(
        kXRPresentationProvider_SubmitFrameDrawnIntoTexture_Name,
        codec.align(XRPresentationProvider_SubmitFrameDrawnIntoTexture_Params.encodedSize));
    builder.encodeStruct(XRPresentationProvider_SubmitFrameDrawnIntoTexture_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function XRPresentationProviderStub(delegate) {
    this.delegate_ = delegate;
  }
  XRPresentationProviderStub.prototype.updateLayerBounds = function(frameId, leftBounds, rightBounds, sourceSize) {
    return this.delegate_ && this.delegate_.updateLayerBounds && this.delegate_.updateLayerBounds(frameId, leftBounds, rightBounds, sourceSize);
  }
  XRPresentationProviderStub.prototype.submitFrameMissing = function(frameId, syncToken) {
    return this.delegate_ && this.delegate_.submitFrameMissing && this.delegate_.submitFrameMissing(frameId, syncToken);
  }
  XRPresentationProviderStub.prototype.submitFrame = function(frameId, mailboxHolder, timeWaited) {
    return this.delegate_ && this.delegate_.submitFrame && this.delegate_.submitFrame(frameId, mailboxHolder, timeWaited);
  }
  XRPresentationProviderStub.prototype.submitFrameWithTextureHandle = function(frameId, texture) {
    return this.delegate_ && this.delegate_.submitFrameWithTextureHandle && this.delegate_.submitFrameWithTextureHandle(frameId, texture);
  }
  XRPresentationProviderStub.prototype.submitFrameDrawnIntoTexture = function(frameId, syncToken, timeWaited) {
    return this.delegate_ && this.delegate_.submitFrameDrawnIntoTexture && this.delegate_.submitFrameDrawnIntoTexture(frameId, syncToken, timeWaited);
  }

  XRPresentationProviderStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kXRPresentationProvider_UpdateLayerBounds_Name:
      var params = reader.decodeStruct(XRPresentationProvider_UpdateLayerBounds_Params);
      this.updateLayerBounds(params.frameId, params.leftBounds, params.rightBounds, params.sourceSize);
      return true;
    case kXRPresentationProvider_SubmitFrameMissing_Name:
      var params = reader.decodeStruct(XRPresentationProvider_SubmitFrameMissing_Params);
      this.submitFrameMissing(params.frameId, params.syncToken);
      return true;
    case kXRPresentationProvider_SubmitFrame_Name:
      var params = reader.decodeStruct(XRPresentationProvider_SubmitFrame_Params);
      this.submitFrame(params.frameId, params.mailboxHolder, params.timeWaited);
      return true;
    case kXRPresentationProvider_SubmitFrameWithTextureHandle_Name:
      var params = reader.decodeStruct(XRPresentationProvider_SubmitFrameWithTextureHandle_Params);
      this.submitFrameWithTextureHandle(params.frameId, params.texture);
      return true;
    case kXRPresentationProvider_SubmitFrameDrawnIntoTexture_Name:
      var params = reader.decodeStruct(XRPresentationProvider_SubmitFrameDrawnIntoTexture_Params);
      this.submitFrameDrawnIntoTexture(params.frameId, params.syncToken, params.timeWaited);
      return true;
    default:
      return false;
    }
  };

  XRPresentationProviderStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateXRPresentationProviderRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kXRPresentationProvider_UpdateLayerBounds_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = XRPresentationProvider_UpdateLayerBounds_Params;
      break;
      case kXRPresentationProvider_SubmitFrameMissing_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = XRPresentationProvider_SubmitFrameMissing_Params;
      break;
      case kXRPresentationProvider_SubmitFrame_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = XRPresentationProvider_SubmitFrame_Params;
      break;
      case kXRPresentationProvider_SubmitFrameWithTextureHandle_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = XRPresentationProvider_SubmitFrameWithTextureHandle_Params;
      break;
      case kXRPresentationProvider_SubmitFrameDrawnIntoTexture_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = XRPresentationProvider_SubmitFrameDrawnIntoTexture_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateXRPresentationProviderResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var XRPresentationProvider = {
    name: 'device.mojom.XRPresentationProvider',
    kVersion: 0,
    ptrClass: XRPresentationProviderPtr,
    proxyClass: XRPresentationProviderProxy,
    stubClass: XRPresentationProviderStub,
    validateRequest: validateXRPresentationProviderRequest,
    validateResponse: null,
  };
  XRPresentationProviderStub.prototype.validator = validateXRPresentationProviderRequest;
  XRPresentationProviderProxy.prototype.validator = null;
  var kXRPresentationClient_OnSubmitFrameTransferred_Name = 0;
  var kXRPresentationClient_OnSubmitFrameRendered_Name = 1;
  var kXRPresentationClient_OnSubmitFrameGpuFence_Name = 2;

  function XRPresentationClientPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(XRPresentationClient,
                                                   handleOrPtrInfo);
  }

  function XRPresentationClientAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        XRPresentationClient, associatedInterfacePtrInfo);
  }

  XRPresentationClientAssociatedPtr.prototype =
      Object.create(XRPresentationClientPtr.prototype);
  XRPresentationClientAssociatedPtr.prototype.constructor =
      XRPresentationClientAssociatedPtr;

  function XRPresentationClientProxy(receiver) {
    this.receiver_ = receiver;
  }
  XRPresentationClientPtr.prototype.onSubmitFrameTransferred = function() {
    return XRPresentationClientProxy.prototype.onSubmitFrameTransferred
        .apply(this.ptr.getProxy(), arguments);
  };

  XRPresentationClientProxy.prototype.onSubmitFrameTransferred = function(success) {
    var params_ = new XRPresentationClient_OnSubmitFrameTransferred_Params();
    params_.success = success;
    var builder = new codec.MessageV0Builder(
        kXRPresentationClient_OnSubmitFrameTransferred_Name,
        codec.align(XRPresentationClient_OnSubmitFrameTransferred_Params.encodedSize));
    builder.encodeStruct(XRPresentationClient_OnSubmitFrameTransferred_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  XRPresentationClientPtr.prototype.onSubmitFrameRendered = function() {
    return XRPresentationClientProxy.prototype.onSubmitFrameRendered
        .apply(this.ptr.getProxy(), arguments);
  };

  XRPresentationClientProxy.prototype.onSubmitFrameRendered = function() {
    var params_ = new XRPresentationClient_OnSubmitFrameRendered_Params();
    var builder = new codec.MessageV0Builder(
        kXRPresentationClient_OnSubmitFrameRendered_Name,
        codec.align(XRPresentationClient_OnSubmitFrameRendered_Params.encodedSize));
    builder.encodeStruct(XRPresentationClient_OnSubmitFrameRendered_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  XRPresentationClientPtr.prototype.onSubmitFrameGpuFence = function() {
    return XRPresentationClientProxy.prototype.onSubmitFrameGpuFence
        .apply(this.ptr.getProxy(), arguments);
  };

  XRPresentationClientProxy.prototype.onSubmitFrameGpuFence = function(gpuFenceHandle) {
    var params_ = new XRPresentationClient_OnSubmitFrameGpuFence_Params();
    params_.gpuFenceHandle = gpuFenceHandle;
    var builder = new codec.MessageV0Builder(
        kXRPresentationClient_OnSubmitFrameGpuFence_Name,
        codec.align(XRPresentationClient_OnSubmitFrameGpuFence_Params.encodedSize));
    builder.encodeStruct(XRPresentationClient_OnSubmitFrameGpuFence_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function XRPresentationClientStub(delegate) {
    this.delegate_ = delegate;
  }
  XRPresentationClientStub.prototype.onSubmitFrameTransferred = function(success) {
    return this.delegate_ && this.delegate_.onSubmitFrameTransferred && this.delegate_.onSubmitFrameTransferred(success);
  }
  XRPresentationClientStub.prototype.onSubmitFrameRendered = function() {
    return this.delegate_ && this.delegate_.onSubmitFrameRendered && this.delegate_.onSubmitFrameRendered();
  }
  XRPresentationClientStub.prototype.onSubmitFrameGpuFence = function(gpuFenceHandle) {
    return this.delegate_ && this.delegate_.onSubmitFrameGpuFence && this.delegate_.onSubmitFrameGpuFence(gpuFenceHandle);
  }

  XRPresentationClientStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kXRPresentationClient_OnSubmitFrameTransferred_Name:
      var params = reader.decodeStruct(XRPresentationClient_OnSubmitFrameTransferred_Params);
      this.onSubmitFrameTransferred(params.success);
      return true;
    case kXRPresentationClient_OnSubmitFrameRendered_Name:
      var params = reader.decodeStruct(XRPresentationClient_OnSubmitFrameRendered_Params);
      this.onSubmitFrameRendered();
      return true;
    case kXRPresentationClient_OnSubmitFrameGpuFence_Name:
      var params = reader.decodeStruct(XRPresentationClient_OnSubmitFrameGpuFence_Params);
      this.onSubmitFrameGpuFence(params.gpuFenceHandle);
      return true;
    default:
      return false;
    }
  };

  XRPresentationClientStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateXRPresentationClientRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kXRPresentationClient_OnSubmitFrameTransferred_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = XRPresentationClient_OnSubmitFrameTransferred_Params;
      break;
      case kXRPresentationClient_OnSubmitFrameRendered_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = XRPresentationClient_OnSubmitFrameRendered_Params;
      break;
      case kXRPresentationClient_OnSubmitFrameGpuFence_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = XRPresentationClient_OnSubmitFrameGpuFence_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateXRPresentationClientResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var XRPresentationClient = {
    name: 'device.mojom.XRPresentationClient',
    kVersion: 0,
    ptrClass: XRPresentationClientPtr,
    proxyClass: XRPresentationClientProxy,
    stubClass: XRPresentationClientStub,
    validateRequest: validateXRPresentationClientRequest,
    validateResponse: null,
  };
  XRPresentationClientStub.prototype.validator = validateXRPresentationClientRequest;
  XRPresentationClientProxy.prototype.validator = null;
  var kXRSessionClient_OnChanged_Name = 0;
  var kXRSessionClient_OnExitPresent_Name = 1;
  var kXRSessionClient_OnVisibilityStateChanged_Name = 2;

  function XRSessionClientPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(XRSessionClient,
                                                   handleOrPtrInfo);
  }

  function XRSessionClientAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        XRSessionClient, associatedInterfacePtrInfo);
  }

  XRSessionClientAssociatedPtr.prototype =
      Object.create(XRSessionClientPtr.prototype);
  XRSessionClientAssociatedPtr.prototype.constructor =
      XRSessionClientAssociatedPtr;

  function XRSessionClientProxy(receiver) {
    this.receiver_ = receiver;
  }
  XRSessionClientPtr.prototype.onChanged = function() {
    return XRSessionClientProxy.prototype.onChanged
        .apply(this.ptr.getProxy(), arguments);
  };

  XRSessionClientProxy.prototype.onChanged = function(display) {
    var params_ = new XRSessionClient_OnChanged_Params();
    params_.display = display;
    var builder = new codec.MessageV0Builder(
        kXRSessionClient_OnChanged_Name,
        codec.align(XRSessionClient_OnChanged_Params.encodedSize));
    builder.encodeStruct(XRSessionClient_OnChanged_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  XRSessionClientPtr.prototype.onExitPresent = function() {
    return XRSessionClientProxy.prototype.onExitPresent
        .apply(this.ptr.getProxy(), arguments);
  };

  XRSessionClientProxy.prototype.onExitPresent = function() {
    var params_ = new XRSessionClient_OnExitPresent_Params();
    var builder = new codec.MessageV0Builder(
        kXRSessionClient_OnExitPresent_Name,
        codec.align(XRSessionClient_OnExitPresent_Params.encodedSize));
    builder.encodeStruct(XRSessionClient_OnExitPresent_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  XRSessionClientPtr.prototype.onVisibilityStateChanged = function() {
    return XRSessionClientProxy.prototype.onVisibilityStateChanged
        .apply(this.ptr.getProxy(), arguments);
  };

  XRSessionClientProxy.prototype.onVisibilityStateChanged = function(visibilityState) {
    var params_ = new XRSessionClient_OnVisibilityStateChanged_Params();
    params_.visibilityState = visibilityState;
    var builder = new codec.MessageV0Builder(
        kXRSessionClient_OnVisibilityStateChanged_Name,
        codec.align(XRSessionClient_OnVisibilityStateChanged_Params.encodedSize));
    builder.encodeStruct(XRSessionClient_OnVisibilityStateChanged_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function XRSessionClientStub(delegate) {
    this.delegate_ = delegate;
  }
  XRSessionClientStub.prototype.onChanged = function(display) {
    return this.delegate_ && this.delegate_.onChanged && this.delegate_.onChanged(display);
  }
  XRSessionClientStub.prototype.onExitPresent = function() {
    return this.delegate_ && this.delegate_.onExitPresent && this.delegate_.onExitPresent();
  }
  XRSessionClientStub.prototype.onVisibilityStateChanged = function(visibilityState) {
    return this.delegate_ && this.delegate_.onVisibilityStateChanged && this.delegate_.onVisibilityStateChanged(visibilityState);
  }

  XRSessionClientStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kXRSessionClient_OnChanged_Name:
      var params = reader.decodeStruct(XRSessionClient_OnChanged_Params);
      this.onChanged(params.display);
      return true;
    case kXRSessionClient_OnExitPresent_Name:
      var params = reader.decodeStruct(XRSessionClient_OnExitPresent_Params);
      this.onExitPresent();
      return true;
    case kXRSessionClient_OnVisibilityStateChanged_Name:
      var params = reader.decodeStruct(XRSessionClient_OnVisibilityStateChanged_Params);
      this.onVisibilityStateChanged(params.visibilityState);
      return true;
    default:
      return false;
    }
  };

  XRSessionClientStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateXRSessionClientRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kXRSessionClient_OnChanged_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = XRSessionClient_OnChanged_Params;
      break;
      case kXRSessionClient_OnExitPresent_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = XRSessionClient_OnExitPresent_Params;
      break;
      case kXRSessionClient_OnVisibilityStateChanged_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = XRSessionClient_OnVisibilityStateChanged_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateXRSessionClientResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var XRSessionClient = {
    name: 'device.mojom.XRSessionClient',
    kVersion: 0,
    ptrClass: XRSessionClientPtr,
    proxyClass: XRSessionClientProxy,
    stubClass: XRSessionClientStub,
    validateRequest: validateXRSessionClientRequest,
    validateResponse: null,
  };
  XRSessionClientStub.prototype.validator = validateXRSessionClientRequest;
  XRSessionClientProxy.prototype.validator = null;
  var kVRDisplayClient_OnActivate_Name = 0;
  var kVRDisplayClient_OnDeactivate_Name = 1;

  function VRDisplayClientPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(VRDisplayClient,
                                                   handleOrPtrInfo);
  }

  function VRDisplayClientAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        VRDisplayClient, associatedInterfacePtrInfo);
  }

  VRDisplayClientAssociatedPtr.prototype =
      Object.create(VRDisplayClientPtr.prototype);
  VRDisplayClientAssociatedPtr.prototype.constructor =
      VRDisplayClientAssociatedPtr;

  function VRDisplayClientProxy(receiver) {
    this.receiver_ = receiver;
  }
  VRDisplayClientPtr.prototype.onActivate = function() {
    return VRDisplayClientProxy.prototype.onActivate
        .apply(this.ptr.getProxy(), arguments);
  };

  VRDisplayClientProxy.prototype.onActivate = function(reason) {
    var params_ = new VRDisplayClient_OnActivate_Params();
    params_.reason = reason;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kVRDisplayClient_OnActivate_Name,
          codec.align(VRDisplayClient_OnActivate_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(VRDisplayClient_OnActivate_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(VRDisplayClient_OnActivate_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  VRDisplayClientPtr.prototype.onDeactivate = function() {
    return VRDisplayClientProxy.prototype.onDeactivate
        .apply(this.ptr.getProxy(), arguments);
  };

  VRDisplayClientProxy.prototype.onDeactivate = function(reason) {
    var params_ = new VRDisplayClient_OnDeactivate_Params();
    params_.reason = reason;
    var builder = new codec.MessageV0Builder(
        kVRDisplayClient_OnDeactivate_Name,
        codec.align(VRDisplayClient_OnDeactivate_Params.encodedSize));
    builder.encodeStruct(VRDisplayClient_OnDeactivate_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function VRDisplayClientStub(delegate) {
    this.delegate_ = delegate;
  }
  VRDisplayClientStub.prototype.onActivate = function(reason) {
    return this.delegate_ && this.delegate_.onActivate && this.delegate_.onActivate(reason);
  }
  VRDisplayClientStub.prototype.onDeactivate = function(reason) {
    return this.delegate_ && this.delegate_.onDeactivate && this.delegate_.onDeactivate(reason);
  }

  VRDisplayClientStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kVRDisplayClient_OnDeactivate_Name:
      var params = reader.decodeStruct(VRDisplayClient_OnDeactivate_Params);
      this.onDeactivate(params.reason);
      return true;
    default:
      return false;
    }
  };

  VRDisplayClientStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kVRDisplayClient_OnActivate_Name:
      var params = reader.decodeStruct(VRDisplayClient_OnActivate_Params);
      this.onActivate(params.reason).then(function(response) {
        var responseParams =
            new VRDisplayClient_OnActivate_ResponseParams();
        responseParams.willNotPresent = response.willNotPresent;
        var builder = new codec.MessageV1Builder(
            kVRDisplayClient_OnActivate_Name,
            codec.align(VRDisplayClient_OnActivate_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(VRDisplayClient_OnActivate_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateVRDisplayClientRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kVRDisplayClient_OnActivate_Name:
        if (message.expectsResponse())
          paramsClass = VRDisplayClient_OnActivate_Params;
      break;
      case kVRDisplayClient_OnDeactivate_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = VRDisplayClient_OnDeactivate_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateVRDisplayClientResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kVRDisplayClient_OnActivate_Name:
        if (message.isResponse())
          paramsClass = VRDisplayClient_OnActivate_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var VRDisplayClient = {
    name: 'device.mojom.VRDisplayClient',
    kVersion: 0,
    ptrClass: VRDisplayClientPtr,
    proxyClass: VRDisplayClientProxy,
    stubClass: VRDisplayClientStub,
    validateRequest: validateVRDisplayClientRequest,
    validateResponse: validateVRDisplayClientResponse,
  };
  VRDisplayClientStub.prototype.validator = validateVRDisplayClientRequest;
  VRDisplayClientProxy.prototype.validator = validateVRDisplayClientResponse;
  exports.XRDeviceId = XRDeviceId;
  exports.XRHandedness = XRHandedness;
  exports.XRTargetRayMode = XRTargetRayMode;
  exports.XRSessionFeature = XRSessionFeature;
  exports.XRPresentationTransportMethod = XRPresentationTransportMethod;
  exports.XRReferenceSpaceCategory = XRReferenceSpaceCategory;
  exports.XRPlaneOrientation = XRPlaneOrientation;
  exports.VRDisplayEventReason = VRDisplayEventReason;
  exports.RequestSessionError = RequestSessionError;
  exports.CreateAnchorResult = CreateAnchorResult;
  exports.SubscribeToHitTestResult = SubscribeToHitTestResult;
  exports.XRVisibilityState = XRVisibilityState;
  exports.XRSessionOptions = XRSessionOptions;
  exports.XRSession = XRSession;
  exports.XRPresentationConnection = XRPresentationConnection;
  exports.XRInputSourceDescription = XRInputSourceDescription;
  exports.XRInputSourceState = XRInputSourceState;
  exports.VRFieldOfView = VRFieldOfView;
  exports.VRPose = VRPose;
  exports.XRRay = XRRay;
  exports.XRHitResult = XRHitResult;
  exports.VRDisplayCapabilities = VRDisplayCapabilities;
  exports.VREyeParameters = VREyeParameters;
  exports.VRStageParameters = VRStageParameters;
  exports.VRDisplayInfo = VRDisplayInfo;
  exports.XRPresentationTransportOptions = XRPresentationTransportOptions;
  exports.XRPlanePointData = XRPlanePointData;
  exports.XRPlaneData = XRPlaneData;
  exports.XRPlaneDetectionData = XRPlaneDetectionData;
  exports.XRAnchorData = XRAnchorData;
  exports.XRAnchorsData = XRAnchorsData;
  exports.XRHitTestSubscriptionResultData = XRHitTestSubscriptionResultData;
  exports.XRHitTestSubscriptionResultsData = XRHitTestSubscriptionResultsData;
  exports.XRFrameData = XRFrameData;
  exports.XRFrameDataRequestOptions = XRFrameDataRequestOptions;
  exports.XRNativeOriginInformation = XRNativeOriginInformation;
  exports.RequestSessionResult = RequestSessionResult;
  exports.VRService = VRService;
  exports.VRServicePtr = VRServicePtr;
  exports.VRServiceAssociatedPtr = VRServiceAssociatedPtr;
  exports.VRServiceClient = VRServiceClient;
  exports.VRServiceClientPtr = VRServiceClientPtr;
  exports.VRServiceClientAssociatedPtr = VRServiceClientAssociatedPtr;
  exports.XREnvironmentIntegrationProvider = XREnvironmentIntegrationProvider;
  exports.XREnvironmentIntegrationProviderPtr = XREnvironmentIntegrationProviderPtr;
  exports.XREnvironmentIntegrationProviderAssociatedPtr = XREnvironmentIntegrationProviderAssociatedPtr;
  exports.XRInputSourceButtonListener = XRInputSourceButtonListener;
  exports.XRInputSourceButtonListenerPtr = XRInputSourceButtonListenerPtr;
  exports.XRInputSourceButtonListenerAssociatedPtr = XRInputSourceButtonListenerAssociatedPtr;
  exports.XRFrameDataProvider = XRFrameDataProvider;
  exports.XRFrameDataProviderPtr = XRFrameDataProviderPtr;
  exports.XRFrameDataProviderAssociatedPtr = XRFrameDataProviderAssociatedPtr;
  exports.XRPresentationProvider = XRPresentationProvider;
  exports.XRPresentationProviderPtr = XRPresentationProviderPtr;
  exports.XRPresentationProviderAssociatedPtr = XRPresentationProviderAssociatedPtr;
  exports.XRPresentationClient = XRPresentationClient;
  exports.XRPresentationClientPtr = XRPresentationClientPtr;
  exports.XRPresentationClientAssociatedPtr = XRPresentationClientAssociatedPtr;
  exports.XRSessionClient = XRSessionClient;
  exports.XRSessionClientPtr = XRSessionClientPtr;
  exports.XRSessionClientAssociatedPtr = XRSessionClientAssociatedPtr;
  exports.VRDisplayClient = VRDisplayClient;
  exports.VRDisplayClientPtr = VRDisplayClientPtr;
  exports.VRDisplayClientAssociatedPtr = VRDisplayClientAssociatedPtr;
})();