// url/mojom/url_test.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'url/mojom/url_test.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('url.mojom');
  var origin$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/origin.mojom', 'origin.mojom.js');
  }
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', 'url.mojom.js');
  }



  function UrlTest_BounceUrl_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  UrlTest_BounceUrl_Params.prototype.initDefaults_ = function() {
    this.in = null;
  };
  UrlTest_BounceUrl_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  UrlTest_BounceUrl_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate UrlTest_BounceUrl_Params.in
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  UrlTest_BounceUrl_Params.encodedSize = codec.kStructHeaderSize + 8;

  UrlTest_BounceUrl_Params.decode = function(decoder) {
    var packed;
    var val = new UrlTest_BounceUrl_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.in = decoder.decodeStructPointer(url$.Url);
    return val;
  };

  UrlTest_BounceUrl_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(UrlTest_BounceUrl_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.in);
  };
  function UrlTest_BounceUrl_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  UrlTest_BounceUrl_ResponseParams.prototype.initDefaults_ = function() {
    this.out = null;
  };
  UrlTest_BounceUrl_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  UrlTest_BounceUrl_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate UrlTest_BounceUrl_ResponseParams.out
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  UrlTest_BounceUrl_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  UrlTest_BounceUrl_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new UrlTest_BounceUrl_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.out = decoder.decodeStructPointer(url$.Url);
    return val;
  };

  UrlTest_BounceUrl_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(UrlTest_BounceUrl_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.out);
  };
  function UrlTest_BounceOrigin_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  UrlTest_BounceOrigin_Params.prototype.initDefaults_ = function() {
    this.in = null;
  };
  UrlTest_BounceOrigin_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  UrlTest_BounceOrigin_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate UrlTest_BounceOrigin_Params.in
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, origin$.Origin, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  UrlTest_BounceOrigin_Params.encodedSize = codec.kStructHeaderSize + 8;

  UrlTest_BounceOrigin_Params.decode = function(decoder) {
    var packed;
    var val = new UrlTest_BounceOrigin_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.in = decoder.decodeStructPointer(origin$.Origin);
    return val;
  };

  UrlTest_BounceOrigin_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(UrlTest_BounceOrigin_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(origin$.Origin, val.in);
  };
  function UrlTest_BounceOrigin_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  UrlTest_BounceOrigin_ResponseParams.prototype.initDefaults_ = function() {
    this.out = null;
  };
  UrlTest_BounceOrigin_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  UrlTest_BounceOrigin_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate UrlTest_BounceOrigin_ResponseParams.out
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, origin$.Origin, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  UrlTest_BounceOrigin_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  UrlTest_BounceOrigin_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new UrlTest_BounceOrigin_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.out = decoder.decodeStructPointer(origin$.Origin);
    return val;
  };

  UrlTest_BounceOrigin_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(UrlTest_BounceOrigin_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(origin$.Origin, val.out);
  };
  var kUrlTest_BounceUrl_Name = 0;
  var kUrlTest_BounceOrigin_Name = 1;

  function UrlTestPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(UrlTest,
                                                   handleOrPtrInfo);
  }

  function UrlTestAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        UrlTest, associatedInterfacePtrInfo);
  }

  UrlTestAssociatedPtr.prototype =
      Object.create(UrlTestPtr.prototype);
  UrlTestAssociatedPtr.prototype.constructor =
      UrlTestAssociatedPtr;

  function UrlTestProxy(receiver) {
    this.receiver_ = receiver;
  }
  UrlTestPtr.prototype.bounceUrl = function() {
    return UrlTestProxy.prototype.bounceUrl
        .apply(this.ptr.getProxy(), arguments);
  };

  UrlTestProxy.prototype.bounceUrl = function(in_) {
    var params_ = new UrlTest_BounceUrl_Params();
    params_.in = in_;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kUrlTest_BounceUrl_Name,
          codec.align(UrlTest_BounceUrl_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(UrlTest_BounceUrl_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(UrlTest_BounceUrl_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  UrlTestPtr.prototype.bounceOrigin = function() {
    return UrlTestProxy.prototype.bounceOrigin
        .apply(this.ptr.getProxy(), arguments);
  };

  UrlTestProxy.prototype.bounceOrigin = function(in_) {
    var params_ = new UrlTest_BounceOrigin_Params();
    params_.in = in_;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kUrlTest_BounceOrigin_Name,
          codec.align(UrlTest_BounceOrigin_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(UrlTest_BounceOrigin_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(UrlTest_BounceOrigin_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function UrlTestStub(delegate) {
    this.delegate_ = delegate;
  }
  UrlTestStub.prototype.bounceUrl = function(in_) {
    return this.delegate_ && this.delegate_.bounceUrl && this.delegate_.bounceUrl(in_);
  }
  UrlTestStub.prototype.bounceOrigin = function(in_) {
    return this.delegate_ && this.delegate_.bounceOrigin && this.delegate_.bounceOrigin(in_);
  }

  UrlTestStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  UrlTestStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kUrlTest_BounceUrl_Name:
      var params = reader.decodeStruct(UrlTest_BounceUrl_Params);
      this.bounceUrl(params.in).then(function(response) {
        var responseParams =
            new UrlTest_BounceUrl_ResponseParams();
        responseParams.out = response.out;
        var builder = new codec.MessageV1Builder(
            kUrlTest_BounceUrl_Name,
            codec.align(UrlTest_BounceUrl_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(UrlTest_BounceUrl_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kUrlTest_BounceOrigin_Name:
      var params = reader.decodeStruct(UrlTest_BounceOrigin_Params);
      this.bounceOrigin(params.in).then(function(response) {
        var responseParams =
            new UrlTest_BounceOrigin_ResponseParams();
        responseParams.out = response.out;
        var builder = new codec.MessageV1Builder(
            kUrlTest_BounceOrigin_Name,
            codec.align(UrlTest_BounceOrigin_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(UrlTest_BounceOrigin_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateUrlTestRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kUrlTest_BounceUrl_Name:
        if (message.expectsResponse())
          paramsClass = UrlTest_BounceUrl_Params;
      break;
      case kUrlTest_BounceOrigin_Name:
        if (message.expectsResponse())
          paramsClass = UrlTest_BounceOrigin_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateUrlTestResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kUrlTest_BounceUrl_Name:
        if (message.isResponse())
          paramsClass = UrlTest_BounceUrl_ResponseParams;
        break;
      case kUrlTest_BounceOrigin_Name:
        if (message.isResponse())
          paramsClass = UrlTest_BounceOrigin_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var UrlTest = {
    name: 'url.mojom.UrlTest',
    kVersion: 0,
    ptrClass: UrlTestPtr,
    proxyClass: UrlTestProxy,
    stubClass: UrlTestStub,
    validateRequest: validateUrlTestRequest,
    validateResponse: validateUrlTestResponse,
  };
  UrlTestStub.prototype.validator = validateUrlTestRequest;
  UrlTestProxy.prototype.validator = validateUrlTestResponse;
  exports.UrlTest = UrlTest;
  exports.UrlTestPtr = UrlTestPtr;
  exports.UrlTestAssociatedPtr = UrlTestAssociatedPtr;
})();