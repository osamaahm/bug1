// mojo/public/interfaces/bindings/tests/versioning_test_service.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'mojo/public/interfaces/bindings/tests/versioning_test_service.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('mojo.test.versioning');


  var Department = {};
  Department.SALES = 0;
  Department.DEV = Department.SALES + 1;
  Department.MIN_VALUE = 0,
  Department.MAX_VALUE = 1,

  Department.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
      return true;
    }
    return false;
  };

  Department.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function Date(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Date.prototype.initDefaults_ = function() {
    this.year = 0;
    this.month = 0;
    this.day = 0;
  };
  Date.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Date.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;




    return validator.validationError.NONE;
  };

  Date.encodedSize = codec.kStructHeaderSize + 8;

  Date.decode = function(decoder) {
    var packed;
    var val = new Date();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.year = decoder.decodeStruct(codec.Uint16);
    val.month = decoder.decodeStruct(codec.Uint8);
    val.day = decoder.decodeStruct(codec.Uint8);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Date.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Date.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint16, val.year);
    encoder.encodeStruct(codec.Uint8, val.month);
    encoder.encodeStruct(codec.Uint8, val.day);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function Employee(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Employee.prototype.initDefaults_ = function() {
    this.employeeId = 0;
    this.name = null;
    this.department = 0;
    this.birthday = null;
  };
  Employee.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Employee.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32},
      {version: 1, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate Employee.name
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate Employee.department
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 16, Department);
    if (err !== validator.validationError.NONE)
        return err;



    // version check Employee.birthday
    if (!messageValidator.isFieldInStructVersion(offset, 1))
      return validator.validationError.NONE;
    // validate Employee.birthday
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, Date, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Employee.encodedSize = codec.kStructHeaderSize + 32;

  Employee.decode = function(decoder) {
    var packed;
    var val = new Employee();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.employeeId = decoder.decodeStruct(codec.Uint64);
    val.name = decoder.decodeStruct(codec.String);
    val.department = decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.birthday = decoder.decodeStructPointer(Date);
    return val;
  };

  Employee.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Employee.encodedSize);
    encoder.writeUint32(1);
    encoder.encodeStruct(codec.Uint64, val.employeeId);
    encoder.encodeStruct(codec.String, val.name);
    encoder.encodeStruct(codec.Int32, val.department);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(Date, val.birthday);
  };
  function HumanResourceDatabase_AddEmployee_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  HumanResourceDatabase_AddEmployee_Params.prototype.initDefaults_ = function() {
    this.employee = null;
  };
  HumanResourceDatabase_AddEmployee_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  HumanResourceDatabase_AddEmployee_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate HumanResourceDatabase_AddEmployee_Params.employee
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, Employee, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  HumanResourceDatabase_AddEmployee_Params.encodedSize = codec.kStructHeaderSize + 8;

  HumanResourceDatabase_AddEmployee_Params.decode = function(decoder) {
    var packed;
    var val = new HumanResourceDatabase_AddEmployee_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.employee = decoder.decodeStructPointer(Employee);
    return val;
  };

  HumanResourceDatabase_AddEmployee_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(HumanResourceDatabase_AddEmployee_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(Employee, val.employee);
  };
  function HumanResourceDatabase_AddEmployee_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  HumanResourceDatabase_AddEmployee_ResponseParams.prototype.initDefaults_ = function() {
    this.success = false;
  };
  HumanResourceDatabase_AddEmployee_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  HumanResourceDatabase_AddEmployee_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  HumanResourceDatabase_AddEmployee_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  HumanResourceDatabase_AddEmployee_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new HumanResourceDatabase_AddEmployee_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.success = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  HumanResourceDatabase_AddEmployee_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(HumanResourceDatabase_AddEmployee_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.success & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function HumanResourceDatabase_QueryEmployee_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  HumanResourceDatabase_QueryEmployee_Params.prototype.initDefaults_ = function() {
    this.id = 0;
    this.retrieveFingerPrint = false;
  };
  HumanResourceDatabase_QueryEmployee_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  HumanResourceDatabase_QueryEmployee_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16},
      {version: 1, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  HumanResourceDatabase_QueryEmployee_Params.encodedSize = codec.kStructHeaderSize + 16;

  HumanResourceDatabase_QueryEmployee_Params.decode = function(decoder) {
    var packed;
    var val = new HumanResourceDatabase_QueryEmployee_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id = decoder.decodeStruct(codec.Uint64);
    packed = decoder.readUint8();
    val.retrieveFingerPrint = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  HumanResourceDatabase_QueryEmployee_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(HumanResourceDatabase_QueryEmployee_Params.encodedSize);
    encoder.writeUint32(1);
    encoder.encodeStruct(codec.Uint64, val.id);
    packed = 0;
    packed |= (val.retrieveFingerPrint & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function HumanResourceDatabase_QueryEmployee_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  HumanResourceDatabase_QueryEmployee_ResponseParams.prototype.initDefaults_ = function() {
    this.employee = null;
    this.fingerPrint = null;
  };
  HumanResourceDatabase_QueryEmployee_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  HumanResourceDatabase_QueryEmployee_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16},
      {version: 1, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate HumanResourceDatabase_QueryEmployee_ResponseParams.employee
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, Employee, true);
    if (err !== validator.validationError.NONE)
        return err;



    // version check HumanResourceDatabase_QueryEmployee_ResponseParams.fingerPrint
    if (!messageValidator.isFieldInStructVersion(offset, 1))
      return validator.validationError.NONE;
    // validate HumanResourceDatabase_QueryEmployee_ResponseParams.fingerPrint
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 1, codec.Uint8, true, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  HumanResourceDatabase_QueryEmployee_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  HumanResourceDatabase_QueryEmployee_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new HumanResourceDatabase_QueryEmployee_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.employee = decoder.decodeStructPointer(Employee);
    val.fingerPrint = decoder.decodeArrayPointer(codec.Uint8);
    return val;
  };

  HumanResourceDatabase_QueryEmployee_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(HumanResourceDatabase_QueryEmployee_ResponseParams.encodedSize);
    encoder.writeUint32(1);
    encoder.encodeStructPointer(Employee, val.employee);
    encoder.encodeArrayPointer(codec.Uint8, val.fingerPrint);
  };
  function HumanResourceDatabase_AttachFingerPrint_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  HumanResourceDatabase_AttachFingerPrint_Params.prototype.initDefaults_ = function() {
    this.id = 0;
    this.fingerPrint = null;
  };
  HumanResourceDatabase_AttachFingerPrint_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  HumanResourceDatabase_AttachFingerPrint_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate HumanResourceDatabase_AttachFingerPrint_Params.fingerPrint
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 1, codec.Uint8, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  HumanResourceDatabase_AttachFingerPrint_Params.encodedSize = codec.kStructHeaderSize + 16;

  HumanResourceDatabase_AttachFingerPrint_Params.decode = function(decoder) {
    var packed;
    var val = new HumanResourceDatabase_AttachFingerPrint_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id = decoder.decodeStruct(codec.Uint64);
    val.fingerPrint = decoder.decodeArrayPointer(codec.Uint8);
    return val;
  };

  HumanResourceDatabase_AttachFingerPrint_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(HumanResourceDatabase_AttachFingerPrint_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint64, val.id);
    encoder.encodeArrayPointer(codec.Uint8, val.fingerPrint);
  };
  function HumanResourceDatabase_AttachFingerPrint_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  HumanResourceDatabase_AttachFingerPrint_ResponseParams.prototype.initDefaults_ = function() {
    this.success = false;
  };
  HumanResourceDatabase_AttachFingerPrint_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  HumanResourceDatabase_AttachFingerPrint_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  HumanResourceDatabase_AttachFingerPrint_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  HumanResourceDatabase_AttachFingerPrint_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new HumanResourceDatabase_AttachFingerPrint_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.success = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  HumanResourceDatabase_AttachFingerPrint_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(HumanResourceDatabase_AttachFingerPrint_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.success & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  var kHumanResourceDatabase_AddEmployee_Name = 0;
  var kHumanResourceDatabase_QueryEmployee_Name = 1;
  var kHumanResourceDatabase_AttachFingerPrint_Name = 2;

  function HumanResourceDatabasePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(HumanResourceDatabase,
                                                   handleOrPtrInfo);
  }

  function HumanResourceDatabaseAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        HumanResourceDatabase, associatedInterfacePtrInfo);
  }

  HumanResourceDatabaseAssociatedPtr.prototype =
      Object.create(HumanResourceDatabasePtr.prototype);
  HumanResourceDatabaseAssociatedPtr.prototype.constructor =
      HumanResourceDatabaseAssociatedPtr;

  function HumanResourceDatabaseProxy(receiver) {
    this.receiver_ = receiver;
  }
  HumanResourceDatabasePtr.prototype.addEmployee = function() {
    return HumanResourceDatabaseProxy.prototype.addEmployee
        .apply(this.ptr.getProxy(), arguments);
  };

  HumanResourceDatabaseProxy.prototype.addEmployee = function(employee) {
    var params_ = new HumanResourceDatabase_AddEmployee_Params();
    params_.employee = employee;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kHumanResourceDatabase_AddEmployee_Name,
          codec.align(HumanResourceDatabase_AddEmployee_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(HumanResourceDatabase_AddEmployee_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(HumanResourceDatabase_AddEmployee_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  HumanResourceDatabasePtr.prototype.queryEmployee = function() {
    return HumanResourceDatabaseProxy.prototype.queryEmployee
        .apply(this.ptr.getProxy(), arguments);
  };

  HumanResourceDatabaseProxy.prototype.queryEmployee = function(id, retrieveFingerPrint) {
    var params_ = new HumanResourceDatabase_QueryEmployee_Params();
    params_.id = id;
    params_.retrieveFingerPrint = retrieveFingerPrint;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kHumanResourceDatabase_QueryEmployee_Name,
          codec.align(HumanResourceDatabase_QueryEmployee_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(HumanResourceDatabase_QueryEmployee_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(HumanResourceDatabase_QueryEmployee_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  HumanResourceDatabasePtr.prototype.attachFingerPrint = function() {
    return HumanResourceDatabaseProxy.prototype.attachFingerPrint
        .apply(this.ptr.getProxy(), arguments);
  };

  HumanResourceDatabaseProxy.prototype.attachFingerPrint = function(id, fingerPrint) {
    var params_ = new HumanResourceDatabase_AttachFingerPrint_Params();
    params_.id = id;
    params_.fingerPrint = fingerPrint;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kHumanResourceDatabase_AttachFingerPrint_Name,
          codec.align(HumanResourceDatabase_AttachFingerPrint_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(HumanResourceDatabase_AttachFingerPrint_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(HumanResourceDatabase_AttachFingerPrint_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function HumanResourceDatabaseStub(delegate) {
    this.delegate_ = delegate;
  }
  HumanResourceDatabaseStub.prototype.addEmployee = function(employee) {
    return this.delegate_ && this.delegate_.addEmployee && this.delegate_.addEmployee(employee);
  }
  HumanResourceDatabaseStub.prototype.queryEmployee = function(id, retrieveFingerPrint) {
    return this.delegate_ && this.delegate_.queryEmployee && this.delegate_.queryEmployee(id, retrieveFingerPrint);
  }
  HumanResourceDatabaseStub.prototype.attachFingerPrint = function(id, fingerPrint) {
    return this.delegate_ && this.delegate_.attachFingerPrint && this.delegate_.attachFingerPrint(id, fingerPrint);
  }

  HumanResourceDatabaseStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  HumanResourceDatabaseStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kHumanResourceDatabase_AddEmployee_Name:
      var params = reader.decodeStruct(HumanResourceDatabase_AddEmployee_Params);
      this.addEmployee(params.employee).then(function(response) {
        var responseParams =
            new HumanResourceDatabase_AddEmployee_ResponseParams();
        responseParams.success = response.success;
        var builder = new codec.MessageV1Builder(
            kHumanResourceDatabase_AddEmployee_Name,
            codec.align(HumanResourceDatabase_AddEmployee_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(HumanResourceDatabase_AddEmployee_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kHumanResourceDatabase_QueryEmployee_Name:
      var params = reader.decodeStruct(HumanResourceDatabase_QueryEmployee_Params);
      this.queryEmployee(params.id, params.retrieveFingerPrint).then(function(response) {
        var responseParams =
            new HumanResourceDatabase_QueryEmployee_ResponseParams();
        responseParams.employee = response.employee;
        responseParams.fingerPrint = response.fingerPrint;
        var builder = new codec.MessageV1Builder(
            kHumanResourceDatabase_QueryEmployee_Name,
            codec.align(HumanResourceDatabase_QueryEmployee_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(HumanResourceDatabase_QueryEmployee_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kHumanResourceDatabase_AttachFingerPrint_Name:
      var params = reader.decodeStruct(HumanResourceDatabase_AttachFingerPrint_Params);
      this.attachFingerPrint(params.id, params.fingerPrint).then(function(response) {
        var responseParams =
            new HumanResourceDatabase_AttachFingerPrint_ResponseParams();
        responseParams.success = response.success;
        var builder = new codec.MessageV1Builder(
            kHumanResourceDatabase_AttachFingerPrint_Name,
            codec.align(HumanResourceDatabase_AttachFingerPrint_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(HumanResourceDatabase_AttachFingerPrint_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateHumanResourceDatabaseRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kHumanResourceDatabase_AddEmployee_Name:
        if (message.expectsResponse())
          paramsClass = HumanResourceDatabase_AddEmployee_Params;
      break;
      case kHumanResourceDatabase_QueryEmployee_Name:
        if (message.expectsResponse())
          paramsClass = HumanResourceDatabase_QueryEmployee_Params;
      break;
      case kHumanResourceDatabase_AttachFingerPrint_Name:
        if (message.expectsResponse())
          paramsClass = HumanResourceDatabase_AttachFingerPrint_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateHumanResourceDatabaseResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kHumanResourceDatabase_AddEmployee_Name:
        if (message.isResponse())
          paramsClass = HumanResourceDatabase_AddEmployee_ResponseParams;
        break;
      case kHumanResourceDatabase_QueryEmployee_Name:
        if (message.isResponse())
          paramsClass = HumanResourceDatabase_QueryEmployee_ResponseParams;
        break;
      case kHumanResourceDatabase_AttachFingerPrint_Name:
        if (message.isResponse())
          paramsClass = HumanResourceDatabase_AttachFingerPrint_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var HumanResourceDatabase = {
    name: 'mojo.test.versioning.HumanResourceDatabase',
    kVersion: 1,
    ptrClass: HumanResourceDatabasePtr,
    proxyClass: HumanResourceDatabaseProxy,
    stubClass: HumanResourceDatabaseStub,
    validateRequest: validateHumanResourceDatabaseRequest,
    validateResponse: validateHumanResourceDatabaseResponse,
  };
  HumanResourceDatabaseStub.prototype.validator = validateHumanResourceDatabaseRequest;
  HumanResourceDatabaseProxy.prototype.validator = validateHumanResourceDatabaseResponse;
  exports.Department = Department;
  exports.Date = Date;
  exports.Employee = Employee;
  exports.HumanResourceDatabase = HumanResourceDatabase;
  exports.HumanResourceDatabasePtr = HumanResourceDatabasePtr;
  exports.HumanResourceDatabaseAssociatedPtr = HumanResourceDatabaseAssociatedPtr;
})();