// services/audio/public/mojom/audio_processing.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'services/audio/public/mojom/audio_processing.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('audio.mojom');
  var file$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/file.mojom', '../../../../mojo/public/mojom/base/file.mojom.js');
  }
  var time$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/time.mojom', '../../../../mojo/public/mojom/base/time.mojom.js');
  }
  var unguessable_token$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/unguessable_token.mojom', '../../../../mojo/public/mojom/base/unguessable_token.mojom.js');
  }


  var AutomaticGainControlType = {};
  AutomaticGainControlType.kDisabled = 0;
  AutomaticGainControlType.kDefault = AutomaticGainControlType.kDisabled + 1;
  AutomaticGainControlType.kExperimental = AutomaticGainControlType.kDefault + 1;
  AutomaticGainControlType.kHybridExperimental = AutomaticGainControlType.kExperimental + 1;
  AutomaticGainControlType.MIN_VALUE = 0,
  AutomaticGainControlType.MAX_VALUE = 3,

  AutomaticGainControlType.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    }
    return false;
  };

  AutomaticGainControlType.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var EchoCancellationType = {};
  EchoCancellationType.kDisabled = 0;
  EchoCancellationType.kAec3 = EchoCancellationType.kDisabled + 1;
  EchoCancellationType.kSystemAec = EchoCancellationType.kAec3 + 1;
  EchoCancellationType.MIN_VALUE = 0,
  EchoCancellationType.MAX_VALUE = 2,

  EchoCancellationType.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    }
    return false;
  };

  EchoCancellationType.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var NoiseSuppressionType = {};
  NoiseSuppressionType.kDisabled = 0;
  NoiseSuppressionType.kDefault = NoiseSuppressionType.kDisabled + 1;
  NoiseSuppressionType.kExperimental = NoiseSuppressionType.kDefault + 1;
  NoiseSuppressionType.MIN_VALUE = 0,
  NoiseSuppressionType.MAX_VALUE = 2,

  NoiseSuppressionType.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    }
    return false;
  };

  NoiseSuppressionType.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function AudioProcessingStats(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AudioProcessingStats.prototype.initDefaults_ = function() {
    this.typingNoiseDetected = false;
    this.hasEchoReturnLoss = false;
    this.hasEchoReturnLossEnhancement = false;
    this.hasDivergentFilterFraction = false;
    this.hasDelayMedianMs = false;
    this.hasDelayStandardDeviationMs = false;
    this.hasResidualEchoLikelihood = false;
    this.hasResidualEchoLikelihoodRecentMax = false;
    this.hasDelayMs = false;
    this.delayMedianMs = 0;
    this.echoReturnLoss = 0;
    this.echoReturnLossEnhancement = 0;
    this.divergentFilterFraction = 0;
    this.delayStandardDeviationMs = 0;
    this.delayMs = 0;
    this.residualEchoLikelihood = 0;
    this.residualEchoLikelihoodRecentMax = 0;
  };
  AudioProcessingStats.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AudioProcessingStats.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 64}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


















    return validator.validationError.NONE;
  };

  AudioProcessingStats.encodedSize = codec.kStructHeaderSize + 56;

  AudioProcessingStats.decode = function(decoder) {
    var packed;
    var val = new AudioProcessingStats();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.typingNoiseDetected = (packed >> 0) & 1 ? true : false;
    val.hasEchoReturnLoss = (packed >> 1) & 1 ? true : false;
    val.hasEchoReturnLossEnhancement = (packed >> 2) & 1 ? true : false;
    val.hasDivergentFilterFraction = (packed >> 3) & 1 ? true : false;
    val.hasDelayMedianMs = (packed >> 4) & 1 ? true : false;
    val.hasDelayStandardDeviationMs = (packed >> 5) & 1 ? true : false;
    val.hasResidualEchoLikelihood = (packed >> 6) & 1 ? true : false;
    val.hasResidualEchoLikelihoodRecentMax = (packed >> 7) & 1 ? true : false;
    packed = decoder.readUint8();
    val.hasDelayMs = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    val.delayMedianMs = decoder.decodeStruct(codec.Int32);
    val.echoReturnLoss = decoder.decodeStruct(codec.Double);
    val.echoReturnLossEnhancement = decoder.decodeStruct(codec.Double);
    val.divergentFilterFraction = decoder.decodeStruct(codec.Double);
    val.delayStandardDeviationMs = decoder.decodeStruct(codec.Int32);
    val.delayMs = decoder.decodeStruct(codec.Int32);
    val.residualEchoLikelihood = decoder.decodeStruct(codec.Double);
    val.residualEchoLikelihoodRecentMax = decoder.decodeStruct(codec.Double);
    return val;
  };

  AudioProcessingStats.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AudioProcessingStats.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.typingNoiseDetected & 1) << 0
    packed |= (val.hasEchoReturnLoss & 1) << 1
    packed |= (val.hasEchoReturnLossEnhancement & 1) << 2
    packed |= (val.hasDivergentFilterFraction & 1) << 3
    packed |= (val.hasDelayMedianMs & 1) << 4
    packed |= (val.hasDelayStandardDeviationMs & 1) << 5
    packed |= (val.hasResidualEchoLikelihood & 1) << 6
    packed |= (val.hasResidualEchoLikelihoodRecentMax & 1) << 7
    encoder.writeUint8(packed);
    packed = 0;
    packed |= (val.hasDelayMs & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Int32, val.delayMedianMs);
    encoder.encodeStruct(codec.Double, val.echoReturnLoss);
    encoder.encodeStruct(codec.Double, val.echoReturnLossEnhancement);
    encoder.encodeStruct(codec.Double, val.divergentFilterFraction);
    encoder.encodeStruct(codec.Int32, val.delayStandardDeviationMs);
    encoder.encodeStruct(codec.Int32, val.delayMs);
    encoder.encodeStruct(codec.Double, val.residualEchoLikelihood);
    encoder.encodeStruct(codec.Double, val.residualEchoLikelihoodRecentMax);
  };
  function AudioProcessingSettings(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AudioProcessingSettings.prototype.initDefaults_ = function() {
    this.echoCancellation = 0;
    this.noiseSuppression = 0;
    this.automaticGainControl = 0;
    this.highPassFilter = false;
    this.typingDetection = false;
    this.stereoMirroring = false;
  };
  AudioProcessingSettings.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AudioProcessingSettings.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AudioProcessingSettings.echoCancellation
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, EchoCancellationType);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AudioProcessingSettings.noiseSuppression
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 4, NoiseSuppressionType);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AudioProcessingSettings.automaticGainControl
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 8, AutomaticGainControlType);
    if (err !== validator.validationError.NONE)
        return err;




    return validator.validationError.NONE;
  };

  AudioProcessingSettings.encodedSize = codec.kStructHeaderSize + 16;

  AudioProcessingSettings.decode = function(decoder) {
    var packed;
    var val = new AudioProcessingSettings();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.echoCancellation = decoder.decodeStruct(codec.Int32);
    val.noiseSuppression = decoder.decodeStruct(codec.Int32);
    val.automaticGainControl = decoder.decodeStruct(codec.Int32);
    packed = decoder.readUint8();
    val.highPassFilter = (packed >> 0) & 1 ? true : false;
    val.typingDetection = (packed >> 1) & 1 ? true : false;
    val.stereoMirroring = (packed >> 2) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  AudioProcessingSettings.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AudioProcessingSettings.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.echoCancellation);
    encoder.encodeStruct(codec.Int32, val.noiseSuppression);
    encoder.encodeStruct(codec.Int32, val.automaticGainControl);
    packed = 0;
    packed |= (val.highPassFilter & 1) << 0
    packed |= (val.typingDetection & 1) << 1
    packed |= (val.stereoMirroring & 1) << 2
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function AudioProcessingConfig(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AudioProcessingConfig.prototype.initDefaults_ = function() {
    this.controlsReceiver = new bindings.InterfaceRequest();
    this.processingId = null;
    this.settings = null;
  };
  AudioProcessingConfig.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AudioProcessingConfig.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AudioProcessingConfig.controlsReceiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate AudioProcessingConfig.processingId
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, unguessable_token$.UnguessableToken, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AudioProcessingConfig.settings
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, AudioProcessingSettings, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AudioProcessingConfig.encodedSize = codec.kStructHeaderSize + 24;

  AudioProcessingConfig.decode = function(decoder) {
    var packed;
    var val = new AudioProcessingConfig();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.controlsReceiver = decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.processingId = decoder.decodeStructPointer(unguessable_token$.UnguessableToken);
    val.settings = decoder.decodeStructPointer(AudioProcessingSettings);
    return val;
  };

  AudioProcessingConfig.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AudioProcessingConfig.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.controlsReceiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(unguessable_token$.UnguessableToken, val.processingId);
    encoder.encodeStructPointer(AudioProcessingSettings, val.settings);
  };
  function AudioProcessorControls_GetStats_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AudioProcessorControls_GetStats_Params.prototype.initDefaults_ = function() {
  };
  AudioProcessorControls_GetStats_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AudioProcessorControls_GetStats_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AudioProcessorControls_GetStats_Params.encodedSize = codec.kStructHeaderSize + 0;

  AudioProcessorControls_GetStats_Params.decode = function(decoder) {
    var packed;
    var val = new AudioProcessorControls_GetStats_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  AudioProcessorControls_GetStats_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AudioProcessorControls_GetStats_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function AudioProcessorControls_GetStats_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AudioProcessorControls_GetStats_ResponseParams.prototype.initDefaults_ = function() {
    this.stats = null;
  };
  AudioProcessorControls_GetStats_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AudioProcessorControls_GetStats_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AudioProcessorControls_GetStats_ResponseParams.stats
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, AudioProcessingStats, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AudioProcessorControls_GetStats_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  AudioProcessorControls_GetStats_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new AudioProcessorControls_GetStats_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.stats = decoder.decodeStructPointer(AudioProcessingStats);
    return val;
  };

  AudioProcessorControls_GetStats_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AudioProcessorControls_GetStats_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(AudioProcessingStats, val.stats);
  };
  function AudioProcessorControls_StartEchoCancellationDump_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AudioProcessorControls_StartEchoCancellationDump_Params.prototype.initDefaults_ = function() {
    this.file = null;
  };
  AudioProcessorControls_StartEchoCancellationDump_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AudioProcessorControls_StartEchoCancellationDump_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AudioProcessorControls_StartEchoCancellationDump_Params.file
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, file$.File, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AudioProcessorControls_StartEchoCancellationDump_Params.encodedSize = codec.kStructHeaderSize + 8;

  AudioProcessorControls_StartEchoCancellationDump_Params.decode = function(decoder) {
    var packed;
    var val = new AudioProcessorControls_StartEchoCancellationDump_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.file = decoder.decodeStructPointer(file$.File);
    return val;
  };

  AudioProcessorControls_StartEchoCancellationDump_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AudioProcessorControls_StartEchoCancellationDump_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(file$.File, val.file);
  };
  function AudioProcessorControls_StopEchoCancellationDump_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AudioProcessorControls_StopEchoCancellationDump_Params.prototype.initDefaults_ = function() {
  };
  AudioProcessorControls_StopEchoCancellationDump_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AudioProcessorControls_StopEchoCancellationDump_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AudioProcessorControls_StopEchoCancellationDump_Params.encodedSize = codec.kStructHeaderSize + 0;

  AudioProcessorControls_StopEchoCancellationDump_Params.decode = function(decoder) {
    var packed;
    var val = new AudioProcessorControls_StopEchoCancellationDump_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  AudioProcessorControls_StopEchoCancellationDump_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AudioProcessorControls_StopEchoCancellationDump_Params.encodedSize);
    encoder.writeUint32(0);
  };
  var kAudioProcessorControls_GetStats_Name = 0;
  var kAudioProcessorControls_StartEchoCancellationDump_Name = 1;
  var kAudioProcessorControls_StopEchoCancellationDump_Name = 2;

  function AudioProcessorControlsPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(AudioProcessorControls,
                                                   handleOrPtrInfo);
  }

  function AudioProcessorControlsAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        AudioProcessorControls, associatedInterfacePtrInfo);
  }

  AudioProcessorControlsAssociatedPtr.prototype =
      Object.create(AudioProcessorControlsPtr.prototype);
  AudioProcessorControlsAssociatedPtr.prototype.constructor =
      AudioProcessorControlsAssociatedPtr;

  function AudioProcessorControlsProxy(receiver) {
    this.receiver_ = receiver;
  }
  AudioProcessorControlsPtr.prototype.getStats = function() {
    return AudioProcessorControlsProxy.prototype.getStats
        .apply(this.ptr.getProxy(), arguments);
  };

  AudioProcessorControlsProxy.prototype.getStats = function() {
    var params_ = new AudioProcessorControls_GetStats_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kAudioProcessorControls_GetStats_Name,
          codec.align(AudioProcessorControls_GetStats_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(AudioProcessorControls_GetStats_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(AudioProcessorControls_GetStats_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  AudioProcessorControlsPtr.prototype.startEchoCancellationDump = function() {
    return AudioProcessorControlsProxy.prototype.startEchoCancellationDump
        .apply(this.ptr.getProxy(), arguments);
  };

  AudioProcessorControlsProxy.prototype.startEchoCancellationDump = function(file) {
    var params_ = new AudioProcessorControls_StartEchoCancellationDump_Params();
    params_.file = file;
    var builder = new codec.MessageV0Builder(
        kAudioProcessorControls_StartEchoCancellationDump_Name,
        codec.align(AudioProcessorControls_StartEchoCancellationDump_Params.encodedSize));
    builder.encodeStruct(AudioProcessorControls_StartEchoCancellationDump_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  AudioProcessorControlsPtr.prototype.stopEchoCancellationDump = function() {
    return AudioProcessorControlsProxy.prototype.stopEchoCancellationDump
        .apply(this.ptr.getProxy(), arguments);
  };

  AudioProcessorControlsProxy.prototype.stopEchoCancellationDump = function() {
    var params_ = new AudioProcessorControls_StopEchoCancellationDump_Params();
    var builder = new codec.MessageV0Builder(
        kAudioProcessorControls_StopEchoCancellationDump_Name,
        codec.align(AudioProcessorControls_StopEchoCancellationDump_Params.encodedSize));
    builder.encodeStruct(AudioProcessorControls_StopEchoCancellationDump_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function AudioProcessorControlsStub(delegate) {
    this.delegate_ = delegate;
  }
  AudioProcessorControlsStub.prototype.getStats = function() {
    return this.delegate_ && this.delegate_.getStats && this.delegate_.getStats();
  }
  AudioProcessorControlsStub.prototype.startEchoCancellationDump = function(file) {
    return this.delegate_ && this.delegate_.startEchoCancellationDump && this.delegate_.startEchoCancellationDump(file);
  }
  AudioProcessorControlsStub.prototype.stopEchoCancellationDump = function() {
    return this.delegate_ && this.delegate_.stopEchoCancellationDump && this.delegate_.stopEchoCancellationDump();
  }

  AudioProcessorControlsStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kAudioProcessorControls_StartEchoCancellationDump_Name:
      var params = reader.decodeStruct(AudioProcessorControls_StartEchoCancellationDump_Params);
      this.startEchoCancellationDump(params.file);
      return true;
    case kAudioProcessorControls_StopEchoCancellationDump_Name:
      var params = reader.decodeStruct(AudioProcessorControls_StopEchoCancellationDump_Params);
      this.stopEchoCancellationDump();
      return true;
    default:
      return false;
    }
  };

  AudioProcessorControlsStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kAudioProcessorControls_GetStats_Name:
      var params = reader.decodeStruct(AudioProcessorControls_GetStats_Params);
      this.getStats().then(function(response) {
        var responseParams =
            new AudioProcessorControls_GetStats_ResponseParams();
        responseParams.stats = response.stats;
        var builder = new codec.MessageV1Builder(
            kAudioProcessorControls_GetStats_Name,
            codec.align(AudioProcessorControls_GetStats_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(AudioProcessorControls_GetStats_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateAudioProcessorControlsRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kAudioProcessorControls_GetStats_Name:
        if (message.expectsResponse())
          paramsClass = AudioProcessorControls_GetStats_Params;
      break;
      case kAudioProcessorControls_StartEchoCancellationDump_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = AudioProcessorControls_StartEchoCancellationDump_Params;
      break;
      case kAudioProcessorControls_StopEchoCancellationDump_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = AudioProcessorControls_StopEchoCancellationDump_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateAudioProcessorControlsResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kAudioProcessorControls_GetStats_Name:
        if (message.isResponse())
          paramsClass = AudioProcessorControls_GetStats_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var AudioProcessorControls = {
    name: 'audio.mojom.AudioProcessorControls',
    kVersion: 0,
    ptrClass: AudioProcessorControlsPtr,
    proxyClass: AudioProcessorControlsProxy,
    stubClass: AudioProcessorControlsStub,
    validateRequest: validateAudioProcessorControlsRequest,
    validateResponse: validateAudioProcessorControlsResponse,
  };
  AudioProcessorControlsStub.prototype.validator = validateAudioProcessorControlsRequest;
  AudioProcessorControlsProxy.prototype.validator = validateAudioProcessorControlsResponse;
  exports.AutomaticGainControlType = AutomaticGainControlType;
  exports.EchoCancellationType = EchoCancellationType;
  exports.NoiseSuppressionType = NoiseSuppressionType;
  exports.AudioProcessingStats = AudioProcessingStats;
  exports.AudioProcessingSettings = AudioProcessingSettings;
  exports.AudioProcessingConfig = AudioProcessingConfig;
  exports.AudioProcessorControls = AudioProcessorControls;
  exports.AudioProcessorControlsPtr = AudioProcessorControlsPtr;
  exports.AudioProcessorControlsAssociatedPtr = AudioProcessorControlsAssociatedPtr;
})();