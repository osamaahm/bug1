// services/resource_coordinator/public/mojom/resource_coordinator_service.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'services/resource_coordinator/public/mojom/resource_coordinator_service.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('resourceCoordinator.mojom');
  var memory_instrumentation$ =
      mojo.internal.exposeNamespace('memoryInstrumentation.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/resource_coordinator/public/mojom/memory_instrumentation/memory_instrumentation.mojom', 'memory_instrumentation/memory_instrumentation.mojom.js');
  }



  function ResourceCoordinatorService_BindMemoryInstrumentationCoordinatorController_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResourceCoordinatorService_BindMemoryInstrumentationCoordinatorController_Params.prototype.initDefaults_ = function() {
    this.receiver = new bindings.InterfaceRequest();
  };
  ResourceCoordinatorService_BindMemoryInstrumentationCoordinatorController_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResourceCoordinatorService_BindMemoryInstrumentationCoordinatorController_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ResourceCoordinatorService_BindMemoryInstrumentationCoordinatorController_Params.receiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ResourceCoordinatorService_BindMemoryInstrumentationCoordinatorController_Params.encodedSize = codec.kStructHeaderSize + 8;

  ResourceCoordinatorService_BindMemoryInstrumentationCoordinatorController_Params.decode = function(decoder) {
    var packed;
    var val = new ResourceCoordinatorService_BindMemoryInstrumentationCoordinatorController_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver = decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ResourceCoordinatorService_BindMemoryInstrumentationCoordinatorController_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResourceCoordinatorService_BindMemoryInstrumentationCoordinatorController_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.receiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ResourceCoordinatorService_RegisterHeapProfiler_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResourceCoordinatorService_RegisterHeapProfiler_Params.prototype.initDefaults_ = function() {
    this.profiler = new memory_instrumentation$.HeapProfilerPtr();
    this.helperReceiver = new bindings.InterfaceRequest();
  };
  ResourceCoordinatorService_RegisterHeapProfiler_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResourceCoordinatorService_RegisterHeapProfiler_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ResourceCoordinatorService_RegisterHeapProfiler_Params.profiler
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ResourceCoordinatorService_RegisterHeapProfiler_Params.helperReceiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ResourceCoordinatorService_RegisterHeapProfiler_Params.encodedSize = codec.kStructHeaderSize + 16;

  ResourceCoordinatorService_RegisterHeapProfiler_Params.decode = function(decoder) {
    var packed;
    var val = new ResourceCoordinatorService_RegisterHeapProfiler_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.profiler = decoder.decodeStruct(new codec.Interface(memory_instrumentation$.HeapProfilerPtr));
    val.helperReceiver = decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ResourceCoordinatorService_RegisterHeapProfiler_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResourceCoordinatorService_RegisterHeapProfiler_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(memory_instrumentation$.HeapProfilerPtr), val.profiler);
    encoder.encodeStruct(codec.InterfaceRequest, val.helperReceiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  var kResourceCoordinatorService_BindMemoryInstrumentationCoordinatorController_Name = 0;
  var kResourceCoordinatorService_RegisterHeapProfiler_Name = 1;

  function ResourceCoordinatorServicePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(ResourceCoordinatorService,
                                                   handleOrPtrInfo);
  }

  function ResourceCoordinatorServiceAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        ResourceCoordinatorService, associatedInterfacePtrInfo);
  }

  ResourceCoordinatorServiceAssociatedPtr.prototype =
      Object.create(ResourceCoordinatorServicePtr.prototype);
  ResourceCoordinatorServiceAssociatedPtr.prototype.constructor =
      ResourceCoordinatorServiceAssociatedPtr;

  function ResourceCoordinatorServiceProxy(receiver) {
    this.receiver_ = receiver;
  }
  ResourceCoordinatorServicePtr.prototype.bindMemoryInstrumentationCoordinatorController = function() {
    return ResourceCoordinatorServiceProxy.prototype.bindMemoryInstrumentationCoordinatorController
        .apply(this.ptr.getProxy(), arguments);
  };

  ResourceCoordinatorServiceProxy.prototype.bindMemoryInstrumentationCoordinatorController = function(receiver) {
    var params_ = new ResourceCoordinatorService_BindMemoryInstrumentationCoordinatorController_Params();
    params_.receiver = receiver;
    var builder = new codec.MessageV0Builder(
        kResourceCoordinatorService_BindMemoryInstrumentationCoordinatorController_Name,
        codec.align(ResourceCoordinatorService_BindMemoryInstrumentationCoordinatorController_Params.encodedSize));
    builder.encodeStruct(ResourceCoordinatorService_BindMemoryInstrumentationCoordinatorController_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ResourceCoordinatorServicePtr.prototype.registerHeapProfiler = function() {
    return ResourceCoordinatorServiceProxy.prototype.registerHeapProfiler
        .apply(this.ptr.getProxy(), arguments);
  };

  ResourceCoordinatorServiceProxy.prototype.registerHeapProfiler = function(profiler, helperReceiver) {
    var params_ = new ResourceCoordinatorService_RegisterHeapProfiler_Params();
    params_.profiler = profiler;
    params_.helperReceiver = helperReceiver;
    var builder = new codec.MessageV0Builder(
        kResourceCoordinatorService_RegisterHeapProfiler_Name,
        codec.align(ResourceCoordinatorService_RegisterHeapProfiler_Params.encodedSize));
    builder.encodeStruct(ResourceCoordinatorService_RegisterHeapProfiler_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function ResourceCoordinatorServiceStub(delegate) {
    this.delegate_ = delegate;
  }
  ResourceCoordinatorServiceStub.prototype.bindMemoryInstrumentationCoordinatorController = function(receiver) {
    return this.delegate_ && this.delegate_.bindMemoryInstrumentationCoordinatorController && this.delegate_.bindMemoryInstrumentationCoordinatorController(receiver);
  }
  ResourceCoordinatorServiceStub.prototype.registerHeapProfiler = function(profiler, helperReceiver) {
    return this.delegate_ && this.delegate_.registerHeapProfiler && this.delegate_.registerHeapProfiler(profiler, helperReceiver);
  }

  ResourceCoordinatorServiceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kResourceCoordinatorService_BindMemoryInstrumentationCoordinatorController_Name:
      var params = reader.decodeStruct(ResourceCoordinatorService_BindMemoryInstrumentationCoordinatorController_Params);
      this.bindMemoryInstrumentationCoordinatorController(params.receiver);
      return true;
    case kResourceCoordinatorService_RegisterHeapProfiler_Name:
      var params = reader.decodeStruct(ResourceCoordinatorService_RegisterHeapProfiler_Params);
      this.registerHeapProfiler(params.profiler, params.helperReceiver);
      return true;
    default:
      return false;
    }
  };

  ResourceCoordinatorServiceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateResourceCoordinatorServiceRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kResourceCoordinatorService_BindMemoryInstrumentationCoordinatorController_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ResourceCoordinatorService_BindMemoryInstrumentationCoordinatorController_Params;
      break;
      case kResourceCoordinatorService_RegisterHeapProfiler_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ResourceCoordinatorService_RegisterHeapProfiler_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateResourceCoordinatorServiceResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var ResourceCoordinatorService = {
    name: 'resource_coordinator.mojom.ResourceCoordinatorService',
    kVersion: 0,
    ptrClass: ResourceCoordinatorServicePtr,
    proxyClass: ResourceCoordinatorServiceProxy,
    stubClass: ResourceCoordinatorServiceStub,
    validateRequest: validateResourceCoordinatorServiceRequest,
    validateResponse: null,
  };
  ResourceCoordinatorServiceStub.prototype.validator = validateResourceCoordinatorServiceRequest;
  ResourceCoordinatorServiceProxy.prototype.validator = null;
  exports.ResourceCoordinatorService = ResourceCoordinatorService;
  exports.ResourceCoordinatorServicePtr = ResourceCoordinatorServicePtr;
  exports.ResourceCoordinatorServiceAssociatedPtr = ResourceCoordinatorServiceAssociatedPtr;
})();