// services/video_capture/public/mojom/video_capture_service.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'services/video_capture/public/mojom/video_capture_service.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('videoCapture.mojom');
  var device_factory$ =
      mojo.internal.exposeNamespace('videoCapture.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/video_capture/public/mojom/device_factory.mojom', 'device_factory.mojom.js');
  }
  var testing_controls$ =
      mojo.internal.exposeNamespace('videoCapture.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/video_capture/public/mojom/testing_controls.mojom', 'testing_controls.mojom.js');
  }
  var video_source_provider$ =
      mojo.internal.exposeNamespace('videoCapture.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/video_capture/public/mojom/video_source_provider.mojom', 'video_source_provider.mojom.js');
  }



  function VideoCaptureService_ConnectToDeviceFactory_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  VideoCaptureService_ConnectToDeviceFactory_Params.prototype.initDefaults_ = function() {
    this.receiver = new bindings.InterfaceRequest();
  };
  VideoCaptureService_ConnectToDeviceFactory_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  VideoCaptureService_ConnectToDeviceFactory_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate VideoCaptureService_ConnectToDeviceFactory_Params.receiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  VideoCaptureService_ConnectToDeviceFactory_Params.encodedSize = codec.kStructHeaderSize + 8;

  VideoCaptureService_ConnectToDeviceFactory_Params.decode = function(decoder) {
    var packed;
    var val = new VideoCaptureService_ConnectToDeviceFactory_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver = decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  VideoCaptureService_ConnectToDeviceFactory_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(VideoCaptureService_ConnectToDeviceFactory_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.receiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function VideoCaptureService_ConnectToVideoSourceProvider_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  VideoCaptureService_ConnectToVideoSourceProvider_Params.prototype.initDefaults_ = function() {
    this.receiver = new bindings.InterfaceRequest();
  };
  VideoCaptureService_ConnectToVideoSourceProvider_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  VideoCaptureService_ConnectToVideoSourceProvider_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate VideoCaptureService_ConnectToVideoSourceProvider_Params.receiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  VideoCaptureService_ConnectToVideoSourceProvider_Params.encodedSize = codec.kStructHeaderSize + 8;

  VideoCaptureService_ConnectToVideoSourceProvider_Params.decode = function(decoder) {
    var packed;
    var val = new VideoCaptureService_ConnectToVideoSourceProvider_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver = decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  VideoCaptureService_ConnectToVideoSourceProvider_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(VideoCaptureService_ConnectToVideoSourceProvider_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.receiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function VideoCaptureService_SetRetryCount_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  VideoCaptureService_SetRetryCount_Params.prototype.initDefaults_ = function() {
    this.count = 0;
  };
  VideoCaptureService_SetRetryCount_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  VideoCaptureService_SetRetryCount_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  VideoCaptureService_SetRetryCount_Params.encodedSize = codec.kStructHeaderSize + 8;

  VideoCaptureService_SetRetryCount_Params.decode = function(decoder) {
    var packed;
    var val = new VideoCaptureService_SetRetryCount_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.count = decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  VideoCaptureService_SetRetryCount_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(VideoCaptureService_SetRetryCount_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.count);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function VideoCaptureService_BindControlsForTesting_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  VideoCaptureService_BindControlsForTesting_Params.prototype.initDefaults_ = function() {
    this.receiver = new bindings.InterfaceRequest();
  };
  VideoCaptureService_BindControlsForTesting_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  VideoCaptureService_BindControlsForTesting_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate VideoCaptureService_BindControlsForTesting_Params.receiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  VideoCaptureService_BindControlsForTesting_Params.encodedSize = codec.kStructHeaderSize + 8;

  VideoCaptureService_BindControlsForTesting_Params.decode = function(decoder) {
    var packed;
    var val = new VideoCaptureService_BindControlsForTesting_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver = decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  VideoCaptureService_BindControlsForTesting_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(VideoCaptureService_BindControlsForTesting_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.receiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  var kVideoCaptureService_ConnectToDeviceFactory_Name = 0;
  var kVideoCaptureService_ConnectToVideoSourceProvider_Name = 1;
  var kVideoCaptureService_SetRetryCount_Name = 2;
  var kVideoCaptureService_BindControlsForTesting_Name = 3;

  function VideoCaptureServicePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(VideoCaptureService,
                                                   handleOrPtrInfo);
  }

  function VideoCaptureServiceAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        VideoCaptureService, associatedInterfacePtrInfo);
  }

  VideoCaptureServiceAssociatedPtr.prototype =
      Object.create(VideoCaptureServicePtr.prototype);
  VideoCaptureServiceAssociatedPtr.prototype.constructor =
      VideoCaptureServiceAssociatedPtr;

  function VideoCaptureServiceProxy(receiver) {
    this.receiver_ = receiver;
  }
  VideoCaptureServicePtr.prototype.connectToDeviceFactory = function() {
    return VideoCaptureServiceProxy.prototype.connectToDeviceFactory
        .apply(this.ptr.getProxy(), arguments);
  };

  VideoCaptureServiceProxy.prototype.connectToDeviceFactory = function(receiver) {
    var params_ = new VideoCaptureService_ConnectToDeviceFactory_Params();
    params_.receiver = receiver;
    var builder = new codec.MessageV0Builder(
        kVideoCaptureService_ConnectToDeviceFactory_Name,
        codec.align(VideoCaptureService_ConnectToDeviceFactory_Params.encodedSize));
    builder.encodeStruct(VideoCaptureService_ConnectToDeviceFactory_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  VideoCaptureServicePtr.prototype.connectToVideoSourceProvider = function() {
    return VideoCaptureServiceProxy.prototype.connectToVideoSourceProvider
        .apply(this.ptr.getProxy(), arguments);
  };

  VideoCaptureServiceProxy.prototype.connectToVideoSourceProvider = function(receiver) {
    var params_ = new VideoCaptureService_ConnectToVideoSourceProvider_Params();
    params_.receiver = receiver;
    var builder = new codec.MessageV0Builder(
        kVideoCaptureService_ConnectToVideoSourceProvider_Name,
        codec.align(VideoCaptureService_ConnectToVideoSourceProvider_Params.encodedSize));
    builder.encodeStruct(VideoCaptureService_ConnectToVideoSourceProvider_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  VideoCaptureServicePtr.prototype.setRetryCount = function() {
    return VideoCaptureServiceProxy.prototype.setRetryCount
        .apply(this.ptr.getProxy(), arguments);
  };

  VideoCaptureServiceProxy.prototype.setRetryCount = function(count) {
    var params_ = new VideoCaptureService_SetRetryCount_Params();
    params_.count = count;
    var builder = new codec.MessageV0Builder(
        kVideoCaptureService_SetRetryCount_Name,
        codec.align(VideoCaptureService_SetRetryCount_Params.encodedSize));
    builder.encodeStruct(VideoCaptureService_SetRetryCount_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  VideoCaptureServicePtr.prototype.bindControlsForTesting = function() {
    return VideoCaptureServiceProxy.prototype.bindControlsForTesting
        .apply(this.ptr.getProxy(), arguments);
  };

  VideoCaptureServiceProxy.prototype.bindControlsForTesting = function(receiver) {
    var params_ = new VideoCaptureService_BindControlsForTesting_Params();
    params_.receiver = receiver;
    var builder = new codec.MessageV0Builder(
        kVideoCaptureService_BindControlsForTesting_Name,
        codec.align(VideoCaptureService_BindControlsForTesting_Params.encodedSize));
    builder.encodeStruct(VideoCaptureService_BindControlsForTesting_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function VideoCaptureServiceStub(delegate) {
    this.delegate_ = delegate;
  }
  VideoCaptureServiceStub.prototype.connectToDeviceFactory = function(receiver) {
    return this.delegate_ && this.delegate_.connectToDeviceFactory && this.delegate_.connectToDeviceFactory(receiver);
  }
  VideoCaptureServiceStub.prototype.connectToVideoSourceProvider = function(receiver) {
    return this.delegate_ && this.delegate_.connectToVideoSourceProvider && this.delegate_.connectToVideoSourceProvider(receiver);
  }
  VideoCaptureServiceStub.prototype.setRetryCount = function(count) {
    return this.delegate_ && this.delegate_.setRetryCount && this.delegate_.setRetryCount(count);
  }
  VideoCaptureServiceStub.prototype.bindControlsForTesting = function(receiver) {
    return this.delegate_ && this.delegate_.bindControlsForTesting && this.delegate_.bindControlsForTesting(receiver);
  }

  VideoCaptureServiceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kVideoCaptureService_ConnectToDeviceFactory_Name:
      var params = reader.decodeStruct(VideoCaptureService_ConnectToDeviceFactory_Params);
      this.connectToDeviceFactory(params.receiver);
      return true;
    case kVideoCaptureService_ConnectToVideoSourceProvider_Name:
      var params = reader.decodeStruct(VideoCaptureService_ConnectToVideoSourceProvider_Params);
      this.connectToVideoSourceProvider(params.receiver);
      return true;
    case kVideoCaptureService_SetRetryCount_Name:
      var params = reader.decodeStruct(VideoCaptureService_SetRetryCount_Params);
      this.setRetryCount(params.count);
      return true;
    case kVideoCaptureService_BindControlsForTesting_Name:
      var params = reader.decodeStruct(VideoCaptureService_BindControlsForTesting_Params);
      this.bindControlsForTesting(params.receiver);
      return true;
    default:
      return false;
    }
  };

  VideoCaptureServiceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateVideoCaptureServiceRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kVideoCaptureService_ConnectToDeviceFactory_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = VideoCaptureService_ConnectToDeviceFactory_Params;
      break;
      case kVideoCaptureService_ConnectToVideoSourceProvider_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = VideoCaptureService_ConnectToVideoSourceProvider_Params;
      break;
      case kVideoCaptureService_SetRetryCount_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = VideoCaptureService_SetRetryCount_Params;
      break;
      case kVideoCaptureService_BindControlsForTesting_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = VideoCaptureService_BindControlsForTesting_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateVideoCaptureServiceResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var VideoCaptureService = {
    name: 'video_capture.mojom.VideoCaptureService',
    kVersion: 0,
    ptrClass: VideoCaptureServicePtr,
    proxyClass: VideoCaptureServiceProxy,
    stubClass: VideoCaptureServiceStub,
    validateRequest: validateVideoCaptureServiceRequest,
    validateResponse: null,
  };
  VideoCaptureServiceStub.prototype.validator = validateVideoCaptureServiceRequest;
  VideoCaptureServiceProxy.prototype.validator = null;
  exports.VideoCaptureService = VideoCaptureService;
  exports.VideoCaptureServicePtr = VideoCaptureServicePtr;
  exports.VideoCaptureServiceAssociatedPtr = VideoCaptureServiceAssociatedPtr;
})();