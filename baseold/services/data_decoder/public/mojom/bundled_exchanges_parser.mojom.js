// services/data_decoder/public/mojom/bundled_exchanges_parser.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'services/data_decoder/public/mojom/bundled_exchanges_parser.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('dataDecoder.mojom');
  var file$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/file.mojom', '../../../../mojo/public/mojom/base/file.mojom.js');
  }
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../../../url/mojom/url.mojom.js');
  }


  var BundleParseErrorType = {};
  BundleParseErrorType.kParserInternalError = 0;
  BundleParseErrorType.kFormatError = BundleParseErrorType.kParserInternalError + 1;
  BundleParseErrorType.kVersionError = BundleParseErrorType.kFormatError + 1;
  BundleParseErrorType.MIN_VALUE = 0,
  BundleParseErrorType.MAX_VALUE = 2,

  BundleParseErrorType.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    }
    return false;
  };

  BundleParseErrorType.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function BundleMetadataParseError(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  BundleMetadataParseError.prototype.initDefaults_ = function() {
    this.type = 0;
    this.fallbackUrl = null;
    this.message = null;
  };
  BundleMetadataParseError.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  BundleMetadataParseError.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate BundleMetadataParseError.type
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, BundleParseErrorType);
    if (err !== validator.validationError.NONE)
        return err;


    // validate BundleMetadataParseError.fallbackUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate BundleMetadataParseError.message
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 16, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  BundleMetadataParseError.encodedSize = codec.kStructHeaderSize + 24;

  BundleMetadataParseError.decode = function(decoder) {
    var packed;
    var val = new BundleMetadataParseError();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.type = decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.fallbackUrl = decoder.decodeStructPointer(url$.Url);
    val.message = decoder.decodeStruct(codec.String);
    return val;
  };

  BundleMetadataParseError.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(BundleMetadataParseError.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.type);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(url$.Url, val.fallbackUrl);
    encoder.encodeStruct(codec.String, val.message);
  };
  function BundleResponseParseError(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  BundleResponseParseError.prototype.initDefaults_ = function() {
    this.type = 0;
    this.message = null;
  };
  BundleResponseParseError.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  BundleResponseParseError.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate BundleResponseParseError.type
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, BundleParseErrorType);
    if (err !== validator.validationError.NONE)
        return err;


    // validate BundleResponseParseError.message
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  BundleResponseParseError.encodedSize = codec.kStructHeaderSize + 16;

  BundleResponseParseError.decode = function(decoder) {
    var packed;
    var val = new BundleResponseParseError();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.type = decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.message = decoder.decodeStruct(codec.String);
    return val;
  };

  BundleResponseParseError.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(BundleResponseParseError.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.type);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.String, val.message);
  };
  function BundleMetadata(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  BundleMetadata.prototype.initDefaults_ = function() {
    this.primaryUrl = null;
    this.requests = null;
    this.manifestUrl = null;
    this.authorities = null;
    this.vouchedSubsets = null;
  };
  BundleMetadata.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  BundleMetadata.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 48}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate BundleMetadata.primaryUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate BundleMetadata.requests
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 8, false, new codec.PointerTo(url$.Url), new codec.PointerTo(BundleIndexValue), false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate BundleMetadata.manifestUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate BundleMetadata.authorities
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 24, 8, new codec.PointerTo(AugmentedCertificate), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate BundleMetadata.vouchedSubsets
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 32, 8, new codec.PointerTo(VouchedSubset), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  BundleMetadata.encodedSize = codec.kStructHeaderSize + 40;

  BundleMetadata.decode = function(decoder) {
    var packed;
    var val = new BundleMetadata();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.primaryUrl = decoder.decodeStructPointer(url$.Url);
    val.requests = decoder.decodeMapPointer(new codec.PointerTo(url$.Url), new codec.PointerTo(BundleIndexValue));
    val.manifestUrl = decoder.decodeStructPointer(url$.Url);
    val.authorities = decoder.decodeArrayPointer(new codec.PointerTo(AugmentedCertificate));
    val.vouchedSubsets = decoder.decodeArrayPointer(new codec.PointerTo(VouchedSubset));
    return val;
  };

  BundleMetadata.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(BundleMetadata.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.primaryUrl);
    encoder.encodeMapPointer(new codec.PointerTo(url$.Url), new codec.PointerTo(BundleIndexValue), val.requests);
    encoder.encodeStructPointer(url$.Url, val.manifestUrl);
    encoder.encodeArrayPointer(new codec.PointerTo(AugmentedCertificate), val.authorities);
    encoder.encodeArrayPointer(new codec.PointerTo(VouchedSubset), val.vouchedSubsets);
  };
  function BundleIndexValue(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  BundleIndexValue.prototype.initDefaults_ = function() {
    this.variantsValue = null;
    this.responseLocations = null;
  };
  BundleIndexValue.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  BundleIndexValue.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate BundleIndexValue.variantsValue
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate BundleIndexValue.responseLocations
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 8, new codec.PointerTo(BundleResponseLocation), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  BundleIndexValue.encodedSize = codec.kStructHeaderSize + 16;

  BundleIndexValue.decode = function(decoder) {
    var packed;
    var val = new BundleIndexValue();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.variantsValue = decoder.decodeStruct(codec.String);
    val.responseLocations = decoder.decodeArrayPointer(new codec.PointerTo(BundleResponseLocation));
    return val;
  };

  BundleIndexValue.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(BundleIndexValue.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.variantsValue);
    encoder.encodeArrayPointer(new codec.PointerTo(BundleResponseLocation), val.responseLocations);
  };
  function BundleResponseLocation(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  BundleResponseLocation.prototype.initDefaults_ = function() {
    this.offset = 0;
    this.length = 0;
  };
  BundleResponseLocation.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  BundleResponseLocation.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  BundleResponseLocation.encodedSize = codec.kStructHeaderSize + 16;

  BundleResponseLocation.decode = function(decoder) {
    var packed;
    var val = new BundleResponseLocation();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.offset = decoder.decodeStruct(codec.Uint64);
    val.length = decoder.decodeStruct(codec.Uint64);
    return val;
  };

  BundleResponseLocation.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(BundleResponseLocation.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint64, val.offset);
    encoder.encodeStruct(codec.Uint64, val.length);
  };
  function AugmentedCertificate(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AugmentedCertificate.prototype.initDefaults_ = function() {
    this.cert = null;
    this.ocsp = null;
    this.sct = null;
  };
  AugmentedCertificate.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AugmentedCertificate.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AugmentedCertificate.cert
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 1, codec.Uint8, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AugmentedCertificate.ocsp
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 1, codec.Uint8, true, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AugmentedCertificate.sct
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 16, 1, codec.Uint8, true, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AugmentedCertificate.encodedSize = codec.kStructHeaderSize + 24;

  AugmentedCertificate.decode = function(decoder) {
    var packed;
    var val = new AugmentedCertificate();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.cert = decoder.decodeArrayPointer(codec.Uint8);
    val.ocsp = decoder.decodeArrayPointer(codec.Uint8);
    val.sct = decoder.decodeArrayPointer(codec.Uint8);
    return val;
  };

  AugmentedCertificate.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AugmentedCertificate.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(codec.Uint8, val.cert);
    encoder.encodeArrayPointer(codec.Uint8, val.ocsp);
    encoder.encodeArrayPointer(codec.Uint8, val.sct);
  };
  function VouchedSubset(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  VouchedSubset.prototype.initDefaults_ = function() {
    this.authority = 0;
    this.sig = null;
    this.rawSigned = null;
    this.parsedSigned = null;
  };
  VouchedSubset.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  VouchedSubset.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate VouchedSubset.sig
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 1, codec.Uint8, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate VouchedSubset.rawSigned
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 16, 1, codec.Uint8, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate VouchedSubset.parsedSigned
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, SignedSubset, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  VouchedSubset.encodedSize = codec.kStructHeaderSize + 32;

  VouchedSubset.decode = function(decoder) {
    var packed;
    var val = new VouchedSubset();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.authority = decoder.decodeStruct(codec.Uint64);
    val.sig = decoder.decodeArrayPointer(codec.Uint8);
    val.rawSigned = decoder.decodeArrayPointer(codec.Uint8);
    val.parsedSigned = decoder.decodeStructPointer(SignedSubset);
    return val;
  };

  VouchedSubset.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(VouchedSubset.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint64, val.authority);
    encoder.encodeArrayPointer(codec.Uint8, val.sig);
    encoder.encodeArrayPointer(codec.Uint8, val.rawSigned);
    encoder.encodeStructPointer(SignedSubset, val.parsedSigned);
  };
  function SignedSubset(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SignedSubset.prototype.initDefaults_ = function() {
    this.validityUrl = null;
    this.authSha256 = null;
    this.date = 0;
    this.expires = 0;
    this.subsetHashes = null;
  };
  SignedSubset.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SignedSubset.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 48}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SignedSubset.validityUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SignedSubset.authSha256
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 1, codec.Uint8, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;




    // validate SignedSubset.subsetHashes
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 32, false, new codec.PointerTo(url$.Url), new codec.PointerTo(SubsetHashesValue), false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SignedSubset.encodedSize = codec.kStructHeaderSize + 40;

  SignedSubset.decode = function(decoder) {
    var packed;
    var val = new SignedSubset();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.validityUrl = decoder.decodeStructPointer(url$.Url);
    val.authSha256 = decoder.decodeArrayPointer(codec.Uint8);
    val.date = decoder.decodeStruct(codec.Uint64);
    val.expires = decoder.decodeStruct(codec.Uint64);
    val.subsetHashes = decoder.decodeMapPointer(new codec.PointerTo(url$.Url), new codec.PointerTo(SubsetHashesValue));
    return val;
  };

  SignedSubset.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SignedSubset.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.validityUrl);
    encoder.encodeArrayPointer(codec.Uint8, val.authSha256);
    encoder.encodeStruct(codec.Uint64, val.date);
    encoder.encodeStruct(codec.Uint64, val.expires);
    encoder.encodeMapPointer(new codec.PointerTo(url$.Url), new codec.PointerTo(SubsetHashesValue), val.subsetHashes);
  };
  function SubsetHashesValue(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SubsetHashesValue.prototype.initDefaults_ = function() {
    this.variantsValue = null;
    this.resourceIntegrities = null;
  };
  SubsetHashesValue.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SubsetHashesValue.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SubsetHashesValue.variantsValue
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate SubsetHashesValue.resourceIntegrities
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 8, new codec.PointerTo(ResourceIntegrity), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SubsetHashesValue.encodedSize = codec.kStructHeaderSize + 16;

  SubsetHashesValue.decode = function(decoder) {
    var packed;
    var val = new SubsetHashesValue();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.variantsValue = decoder.decodeStruct(codec.String);
    val.resourceIntegrities = decoder.decodeArrayPointer(new codec.PointerTo(ResourceIntegrity));
    return val;
  };

  SubsetHashesValue.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SubsetHashesValue.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.variantsValue);
    encoder.encodeArrayPointer(new codec.PointerTo(ResourceIntegrity), val.resourceIntegrities);
  };
  function ResourceIntegrity(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResourceIntegrity.prototype.initDefaults_ = function() {
    this.headerSha256 = null;
    this.payloadIntegrityHeader = null;
  };
  ResourceIntegrity.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResourceIntegrity.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ResourceIntegrity.headerSha256
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 1, codec.Uint8, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ResourceIntegrity.payloadIntegrityHeader
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ResourceIntegrity.encodedSize = codec.kStructHeaderSize + 16;

  ResourceIntegrity.decode = function(decoder) {
    var packed;
    var val = new ResourceIntegrity();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.headerSha256 = decoder.decodeArrayPointer(codec.Uint8);
    val.payloadIntegrityHeader = decoder.decodeStruct(codec.String);
    return val;
  };

  ResourceIntegrity.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResourceIntegrity.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(codec.Uint8, val.headerSha256);
    encoder.encodeStruct(codec.String, val.payloadIntegrityHeader);
  };
  function BundleResponse(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  BundleResponse.prototype.initDefaults_ = function() {
    this.responseCode = 0;
    this.responseHeaders = null;
    this.payloadOffset = 0;
    this.payloadLength = 0;
  };
  BundleResponse.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  BundleResponse.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate BundleResponse.responseHeaders
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 8, false, codec.String, codec.String, false);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  BundleResponse.encodedSize = codec.kStructHeaderSize + 32;

  BundleResponse.decode = function(decoder) {
    var packed;
    var val = new BundleResponse();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.responseCode = decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.responseHeaders = decoder.decodeMapPointer(codec.String, codec.String);
    val.payloadOffset = decoder.decodeStruct(codec.Uint64);
    val.payloadLength = decoder.decodeStruct(codec.Uint64);
    return val;
  };

  BundleResponse.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(BundleResponse.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.responseCode);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeMapPointer(codec.String, codec.String, val.responseHeaders);
    encoder.encodeStruct(codec.Uint64, val.payloadOffset);
    encoder.encodeStruct(codec.Uint64, val.payloadLength);
  };
  function BundledExchangesParserFactory_GetParserForFile_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  BundledExchangesParserFactory_GetParserForFile_Params.prototype.initDefaults_ = function() {
    this.receiver = new bindings.InterfaceRequest();
    this.file = null;
  };
  BundledExchangesParserFactory_GetParserForFile_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  BundledExchangesParserFactory_GetParserForFile_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate BundledExchangesParserFactory_GetParserForFile_Params.receiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate BundledExchangesParserFactory_GetParserForFile_Params.file
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, file$.File, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  BundledExchangesParserFactory_GetParserForFile_Params.encodedSize = codec.kStructHeaderSize + 16;

  BundledExchangesParserFactory_GetParserForFile_Params.decode = function(decoder) {
    var packed;
    var val = new BundledExchangesParserFactory_GetParserForFile_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver = decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.file = decoder.decodeStructPointer(file$.File);
    return val;
  };

  BundledExchangesParserFactory_GetParserForFile_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(BundledExchangesParserFactory_GetParserForFile_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.receiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(file$.File, val.file);
  };
  function BundledExchangesParserFactory_GetParserForDataSource_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  BundledExchangesParserFactory_GetParserForDataSource_Params.prototype.initDefaults_ = function() {
    this.receiver = new bindings.InterfaceRequest();
    this.dataSource = new BundleDataSourcePtr();
  };
  BundledExchangesParserFactory_GetParserForDataSource_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  BundledExchangesParserFactory_GetParserForDataSource_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate BundledExchangesParserFactory_GetParserForDataSource_Params.receiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate BundledExchangesParserFactory_GetParserForDataSource_Params.dataSource
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 4, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  BundledExchangesParserFactory_GetParserForDataSource_Params.encodedSize = codec.kStructHeaderSize + 16;

  BundledExchangesParserFactory_GetParserForDataSource_Params.decode = function(decoder) {
    var packed;
    var val = new BundledExchangesParserFactory_GetParserForDataSource_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver = decoder.decodeStruct(codec.InterfaceRequest);
    val.dataSource = decoder.decodeStruct(new codec.Interface(BundleDataSourcePtr));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  BundledExchangesParserFactory_GetParserForDataSource_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(BundledExchangesParserFactory_GetParserForDataSource_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.receiver);
    encoder.encodeStruct(new codec.Interface(BundleDataSourcePtr), val.dataSource);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function BundledExchangesParser_ParseMetadata_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  BundledExchangesParser_ParseMetadata_Params.prototype.initDefaults_ = function() {
  };
  BundledExchangesParser_ParseMetadata_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  BundledExchangesParser_ParseMetadata_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  BundledExchangesParser_ParseMetadata_Params.encodedSize = codec.kStructHeaderSize + 0;

  BundledExchangesParser_ParseMetadata_Params.decode = function(decoder) {
    var packed;
    var val = new BundledExchangesParser_ParseMetadata_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  BundledExchangesParser_ParseMetadata_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(BundledExchangesParser_ParseMetadata_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function BundledExchangesParser_ParseMetadata_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  BundledExchangesParser_ParseMetadata_ResponseParams.prototype.initDefaults_ = function() {
    this.result = null;
    this.error = null;
  };
  BundledExchangesParser_ParseMetadata_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  BundledExchangesParser_ParseMetadata_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate BundledExchangesParser_ParseMetadata_ResponseParams.result
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, BundleMetadata, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate BundledExchangesParser_ParseMetadata_ResponseParams.error
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, BundleMetadataParseError, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  BundledExchangesParser_ParseMetadata_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  BundledExchangesParser_ParseMetadata_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new BundledExchangesParser_ParseMetadata_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.result = decoder.decodeStructPointer(BundleMetadata);
    val.error = decoder.decodeStructPointer(BundleMetadataParseError);
    return val;
  };

  BundledExchangesParser_ParseMetadata_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(BundledExchangesParser_ParseMetadata_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(BundleMetadata, val.result);
    encoder.encodeStructPointer(BundleMetadataParseError, val.error);
  };
  function BundledExchangesParser_ParseResponse_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  BundledExchangesParser_ParseResponse_Params.prototype.initDefaults_ = function() {
    this.responseOffset = 0;
    this.responseLength = 0;
  };
  BundledExchangesParser_ParseResponse_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  BundledExchangesParser_ParseResponse_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  BundledExchangesParser_ParseResponse_Params.encodedSize = codec.kStructHeaderSize + 16;

  BundledExchangesParser_ParseResponse_Params.decode = function(decoder) {
    var packed;
    var val = new BundledExchangesParser_ParseResponse_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.responseOffset = decoder.decodeStruct(codec.Uint64);
    val.responseLength = decoder.decodeStruct(codec.Uint64);
    return val;
  };

  BundledExchangesParser_ParseResponse_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(BundledExchangesParser_ParseResponse_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint64, val.responseOffset);
    encoder.encodeStruct(codec.Uint64, val.responseLength);
  };
  function BundledExchangesParser_ParseResponse_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  BundledExchangesParser_ParseResponse_ResponseParams.prototype.initDefaults_ = function() {
    this.result = null;
    this.error = null;
  };
  BundledExchangesParser_ParseResponse_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  BundledExchangesParser_ParseResponse_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate BundledExchangesParser_ParseResponse_ResponseParams.result
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, BundleResponse, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate BundledExchangesParser_ParseResponse_ResponseParams.error
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, BundleResponseParseError, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  BundledExchangesParser_ParseResponse_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  BundledExchangesParser_ParseResponse_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new BundledExchangesParser_ParseResponse_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.result = decoder.decodeStructPointer(BundleResponse);
    val.error = decoder.decodeStructPointer(BundleResponseParseError);
    return val;
  };

  BundledExchangesParser_ParseResponse_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(BundledExchangesParser_ParseResponse_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(BundleResponse, val.result);
    encoder.encodeStructPointer(BundleResponseParseError, val.error);
  };
  function BundleDataSource_GetSize_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  BundleDataSource_GetSize_Params.prototype.initDefaults_ = function() {
  };
  BundleDataSource_GetSize_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  BundleDataSource_GetSize_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  BundleDataSource_GetSize_Params.encodedSize = codec.kStructHeaderSize + 0;

  BundleDataSource_GetSize_Params.decode = function(decoder) {
    var packed;
    var val = new BundleDataSource_GetSize_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  BundleDataSource_GetSize_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(BundleDataSource_GetSize_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function BundleDataSource_GetSize_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  BundleDataSource_GetSize_ResponseParams.prototype.initDefaults_ = function() {
    this.size = 0;
  };
  BundleDataSource_GetSize_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  BundleDataSource_GetSize_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  BundleDataSource_GetSize_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  BundleDataSource_GetSize_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new BundleDataSource_GetSize_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.size = decoder.decodeStruct(codec.Uint64);
    return val;
  };

  BundleDataSource_GetSize_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(BundleDataSource_GetSize_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint64, val.size);
  };
  function BundleDataSource_Read_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  BundleDataSource_Read_Params.prototype.initDefaults_ = function() {
    this.offset = 0;
    this.length = 0;
  };
  BundleDataSource_Read_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  BundleDataSource_Read_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  BundleDataSource_Read_Params.encodedSize = codec.kStructHeaderSize + 16;

  BundleDataSource_Read_Params.decode = function(decoder) {
    var packed;
    var val = new BundleDataSource_Read_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.offset = decoder.decodeStruct(codec.Uint64);
    val.length = decoder.decodeStruct(codec.Uint64);
    return val;
  };

  BundleDataSource_Read_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(BundleDataSource_Read_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint64, val.offset);
    encoder.encodeStruct(codec.Uint64, val.length);
  };
  function BundleDataSource_Read_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  BundleDataSource_Read_ResponseParams.prototype.initDefaults_ = function() {
    this.buffer = null;
  };
  BundleDataSource_Read_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  BundleDataSource_Read_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate BundleDataSource_Read_ResponseParams.buffer
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 1, codec.Uint8, true, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  BundleDataSource_Read_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  BundleDataSource_Read_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new BundleDataSource_Read_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.buffer = decoder.decodeArrayPointer(codec.Uint8);
    return val;
  };

  BundleDataSource_Read_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(BundleDataSource_Read_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(codec.Uint8, val.buffer);
  };
  var kBundledExchangesParserFactory_GetParserForFile_Name = 0;
  var kBundledExchangesParserFactory_GetParserForDataSource_Name = 1;

  function BundledExchangesParserFactoryPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(BundledExchangesParserFactory,
                                                   handleOrPtrInfo);
  }

  function BundledExchangesParserFactoryAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        BundledExchangesParserFactory, associatedInterfacePtrInfo);
  }

  BundledExchangesParserFactoryAssociatedPtr.prototype =
      Object.create(BundledExchangesParserFactoryPtr.prototype);
  BundledExchangesParserFactoryAssociatedPtr.prototype.constructor =
      BundledExchangesParserFactoryAssociatedPtr;

  function BundledExchangesParserFactoryProxy(receiver) {
    this.receiver_ = receiver;
  }
  BundledExchangesParserFactoryPtr.prototype.getParserForFile = function() {
    return BundledExchangesParserFactoryProxy.prototype.getParserForFile
        .apply(this.ptr.getProxy(), arguments);
  };

  BundledExchangesParserFactoryProxy.prototype.getParserForFile = function(receiver, file) {
    var params_ = new BundledExchangesParserFactory_GetParserForFile_Params();
    params_.receiver = receiver;
    params_.file = file;
    var builder = new codec.MessageV0Builder(
        kBundledExchangesParserFactory_GetParserForFile_Name,
        codec.align(BundledExchangesParserFactory_GetParserForFile_Params.encodedSize));
    builder.encodeStruct(BundledExchangesParserFactory_GetParserForFile_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  BundledExchangesParserFactoryPtr.prototype.getParserForDataSource = function() {
    return BundledExchangesParserFactoryProxy.prototype.getParserForDataSource
        .apply(this.ptr.getProxy(), arguments);
  };

  BundledExchangesParserFactoryProxy.prototype.getParserForDataSource = function(receiver, dataSource) {
    var params_ = new BundledExchangesParserFactory_GetParserForDataSource_Params();
    params_.receiver = receiver;
    params_.dataSource = dataSource;
    var builder = new codec.MessageV0Builder(
        kBundledExchangesParserFactory_GetParserForDataSource_Name,
        codec.align(BundledExchangesParserFactory_GetParserForDataSource_Params.encodedSize));
    builder.encodeStruct(BundledExchangesParserFactory_GetParserForDataSource_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function BundledExchangesParserFactoryStub(delegate) {
    this.delegate_ = delegate;
  }
  BundledExchangesParserFactoryStub.prototype.getParserForFile = function(receiver, file) {
    return this.delegate_ && this.delegate_.getParserForFile && this.delegate_.getParserForFile(receiver, file);
  }
  BundledExchangesParserFactoryStub.prototype.getParserForDataSource = function(receiver, dataSource) {
    return this.delegate_ && this.delegate_.getParserForDataSource && this.delegate_.getParserForDataSource(receiver, dataSource);
  }

  BundledExchangesParserFactoryStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kBundledExchangesParserFactory_GetParserForFile_Name:
      var params = reader.decodeStruct(BundledExchangesParserFactory_GetParserForFile_Params);
      this.getParserForFile(params.receiver, params.file);
      return true;
    case kBundledExchangesParserFactory_GetParserForDataSource_Name:
      var params = reader.decodeStruct(BundledExchangesParserFactory_GetParserForDataSource_Params);
      this.getParserForDataSource(params.receiver, params.dataSource);
      return true;
    default:
      return false;
    }
  };

  BundledExchangesParserFactoryStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateBundledExchangesParserFactoryRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kBundledExchangesParserFactory_GetParserForFile_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = BundledExchangesParserFactory_GetParserForFile_Params;
      break;
      case kBundledExchangesParserFactory_GetParserForDataSource_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = BundledExchangesParserFactory_GetParserForDataSource_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateBundledExchangesParserFactoryResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var BundledExchangesParserFactory = {
    name: 'data_decoder.mojom.BundledExchangesParserFactory',
    kVersion: 0,
    ptrClass: BundledExchangesParserFactoryPtr,
    proxyClass: BundledExchangesParserFactoryProxy,
    stubClass: BundledExchangesParserFactoryStub,
    validateRequest: validateBundledExchangesParserFactoryRequest,
    validateResponse: null,
  };
  BundledExchangesParserFactoryStub.prototype.validator = validateBundledExchangesParserFactoryRequest;
  BundledExchangesParserFactoryProxy.prototype.validator = null;
  var kBundledExchangesParser_ParseMetadata_Name = 0;
  var kBundledExchangesParser_ParseResponse_Name = 1;

  function BundledExchangesParserPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(BundledExchangesParser,
                                                   handleOrPtrInfo);
  }

  function BundledExchangesParserAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        BundledExchangesParser, associatedInterfacePtrInfo);
  }

  BundledExchangesParserAssociatedPtr.prototype =
      Object.create(BundledExchangesParserPtr.prototype);
  BundledExchangesParserAssociatedPtr.prototype.constructor =
      BundledExchangesParserAssociatedPtr;

  function BundledExchangesParserProxy(receiver) {
    this.receiver_ = receiver;
  }
  BundledExchangesParserPtr.prototype.parseMetadata = function() {
    return BundledExchangesParserProxy.prototype.parseMetadata
        .apply(this.ptr.getProxy(), arguments);
  };

  BundledExchangesParserProxy.prototype.parseMetadata = function() {
    var params_ = new BundledExchangesParser_ParseMetadata_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kBundledExchangesParser_ParseMetadata_Name,
          codec.align(BundledExchangesParser_ParseMetadata_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(BundledExchangesParser_ParseMetadata_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(BundledExchangesParser_ParseMetadata_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  BundledExchangesParserPtr.prototype.parseResponse = function() {
    return BundledExchangesParserProxy.prototype.parseResponse
        .apply(this.ptr.getProxy(), arguments);
  };

  BundledExchangesParserProxy.prototype.parseResponse = function(responseOffset, responseLength) {
    var params_ = new BundledExchangesParser_ParseResponse_Params();
    params_.responseOffset = responseOffset;
    params_.responseLength = responseLength;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kBundledExchangesParser_ParseResponse_Name,
          codec.align(BundledExchangesParser_ParseResponse_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(BundledExchangesParser_ParseResponse_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(BundledExchangesParser_ParseResponse_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function BundledExchangesParserStub(delegate) {
    this.delegate_ = delegate;
  }
  BundledExchangesParserStub.prototype.parseMetadata = function() {
    return this.delegate_ && this.delegate_.parseMetadata && this.delegate_.parseMetadata();
  }
  BundledExchangesParserStub.prototype.parseResponse = function(responseOffset, responseLength) {
    return this.delegate_ && this.delegate_.parseResponse && this.delegate_.parseResponse(responseOffset, responseLength);
  }

  BundledExchangesParserStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  BundledExchangesParserStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kBundledExchangesParser_ParseMetadata_Name:
      var params = reader.decodeStruct(BundledExchangesParser_ParseMetadata_Params);
      this.parseMetadata().then(function(response) {
        var responseParams =
            new BundledExchangesParser_ParseMetadata_ResponseParams();
        responseParams.result = response.result;
        responseParams.error = response.error;
        var builder = new codec.MessageV1Builder(
            kBundledExchangesParser_ParseMetadata_Name,
            codec.align(BundledExchangesParser_ParseMetadata_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(BundledExchangesParser_ParseMetadata_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kBundledExchangesParser_ParseResponse_Name:
      var params = reader.decodeStruct(BundledExchangesParser_ParseResponse_Params);
      this.parseResponse(params.responseOffset, params.responseLength).then(function(response) {
        var responseParams =
            new BundledExchangesParser_ParseResponse_ResponseParams();
        responseParams.result = response.result;
        responseParams.error = response.error;
        var builder = new codec.MessageV1Builder(
            kBundledExchangesParser_ParseResponse_Name,
            codec.align(BundledExchangesParser_ParseResponse_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(BundledExchangesParser_ParseResponse_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateBundledExchangesParserRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kBundledExchangesParser_ParseMetadata_Name:
        if (message.expectsResponse())
          paramsClass = BundledExchangesParser_ParseMetadata_Params;
      break;
      case kBundledExchangesParser_ParseResponse_Name:
        if (message.expectsResponse())
          paramsClass = BundledExchangesParser_ParseResponse_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateBundledExchangesParserResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kBundledExchangesParser_ParseMetadata_Name:
        if (message.isResponse())
          paramsClass = BundledExchangesParser_ParseMetadata_ResponseParams;
        break;
      case kBundledExchangesParser_ParseResponse_Name:
        if (message.isResponse())
          paramsClass = BundledExchangesParser_ParseResponse_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var BundledExchangesParser = {
    name: 'data_decoder.mojom.BundledExchangesParser',
    kVersion: 0,
    ptrClass: BundledExchangesParserPtr,
    proxyClass: BundledExchangesParserProxy,
    stubClass: BundledExchangesParserStub,
    validateRequest: validateBundledExchangesParserRequest,
    validateResponse: validateBundledExchangesParserResponse,
  };
  BundledExchangesParserStub.prototype.validator = validateBundledExchangesParserRequest;
  BundledExchangesParserProxy.prototype.validator = validateBundledExchangesParserResponse;
  var kBundleDataSource_GetSize_Name = 0;
  var kBundleDataSource_Read_Name = 1;

  function BundleDataSourcePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(BundleDataSource,
                                                   handleOrPtrInfo);
  }

  function BundleDataSourceAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        BundleDataSource, associatedInterfacePtrInfo);
  }

  BundleDataSourceAssociatedPtr.prototype =
      Object.create(BundleDataSourcePtr.prototype);
  BundleDataSourceAssociatedPtr.prototype.constructor =
      BundleDataSourceAssociatedPtr;

  function BundleDataSourceProxy(receiver) {
    this.receiver_ = receiver;
  }
  BundleDataSourcePtr.prototype.getSize = function() {
    return BundleDataSourceProxy.prototype.getSize
        .apply(this.ptr.getProxy(), arguments);
  };

  BundleDataSourceProxy.prototype.getSize = function() {
    var params_ = new BundleDataSource_GetSize_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kBundleDataSource_GetSize_Name,
          codec.align(BundleDataSource_GetSize_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(BundleDataSource_GetSize_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(BundleDataSource_GetSize_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  BundleDataSourcePtr.prototype.read = function() {
    return BundleDataSourceProxy.prototype.read
        .apply(this.ptr.getProxy(), arguments);
  };

  BundleDataSourceProxy.prototype.read = function(offset, length) {
    var params_ = new BundleDataSource_Read_Params();
    params_.offset = offset;
    params_.length = length;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kBundleDataSource_Read_Name,
          codec.align(BundleDataSource_Read_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(BundleDataSource_Read_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(BundleDataSource_Read_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function BundleDataSourceStub(delegate) {
    this.delegate_ = delegate;
  }
  BundleDataSourceStub.prototype.getSize = function() {
    return this.delegate_ && this.delegate_.getSize && this.delegate_.getSize();
  }
  BundleDataSourceStub.prototype.read = function(offset, length) {
    return this.delegate_ && this.delegate_.read && this.delegate_.read(offset, length);
  }

  BundleDataSourceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  BundleDataSourceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kBundleDataSource_GetSize_Name:
      var params = reader.decodeStruct(BundleDataSource_GetSize_Params);
      this.getSize().then(function(response) {
        var responseParams =
            new BundleDataSource_GetSize_ResponseParams();
        responseParams.size = response.size;
        var builder = new codec.MessageV1Builder(
            kBundleDataSource_GetSize_Name,
            codec.align(BundleDataSource_GetSize_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(BundleDataSource_GetSize_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kBundleDataSource_Read_Name:
      var params = reader.decodeStruct(BundleDataSource_Read_Params);
      this.read(params.offset, params.length).then(function(response) {
        var responseParams =
            new BundleDataSource_Read_ResponseParams();
        responseParams.buffer = response.buffer;
        var builder = new codec.MessageV1Builder(
            kBundleDataSource_Read_Name,
            codec.align(BundleDataSource_Read_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(BundleDataSource_Read_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateBundleDataSourceRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kBundleDataSource_GetSize_Name:
        if (message.expectsResponse())
          paramsClass = BundleDataSource_GetSize_Params;
      break;
      case kBundleDataSource_Read_Name:
        if (message.expectsResponse())
          paramsClass = BundleDataSource_Read_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateBundleDataSourceResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kBundleDataSource_GetSize_Name:
        if (message.isResponse())
          paramsClass = BundleDataSource_GetSize_ResponseParams;
        break;
      case kBundleDataSource_Read_Name:
        if (message.isResponse())
          paramsClass = BundleDataSource_Read_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var BundleDataSource = {
    name: 'data_decoder.mojom.BundleDataSource',
    kVersion: 0,
    ptrClass: BundleDataSourcePtr,
    proxyClass: BundleDataSourceProxy,
    stubClass: BundleDataSourceStub,
    validateRequest: validateBundleDataSourceRequest,
    validateResponse: validateBundleDataSourceResponse,
  };
  BundleDataSourceStub.prototype.validator = validateBundleDataSourceRequest;
  BundleDataSourceProxy.prototype.validator = validateBundleDataSourceResponse;
  exports.BundleParseErrorType = BundleParseErrorType;
  exports.BundleMetadataParseError = BundleMetadataParseError;
  exports.BundleResponseParseError = BundleResponseParseError;
  exports.BundleMetadata = BundleMetadata;
  exports.BundleIndexValue = BundleIndexValue;
  exports.BundleResponseLocation = BundleResponseLocation;
  exports.AugmentedCertificate = AugmentedCertificate;
  exports.VouchedSubset = VouchedSubset;
  exports.SignedSubset = SignedSubset;
  exports.SubsetHashesValue = SubsetHashesValue;
  exports.ResourceIntegrity = ResourceIntegrity;
  exports.BundleResponse = BundleResponse;
  exports.BundledExchangesParserFactory = BundledExchangesParserFactory;
  exports.BundledExchangesParserFactoryPtr = BundledExchangesParserFactoryPtr;
  exports.BundledExchangesParserFactoryAssociatedPtr = BundledExchangesParserFactoryAssociatedPtr;
  exports.BundledExchangesParser = BundledExchangesParser;
  exports.BundledExchangesParserPtr = BundledExchangesParserPtr;
  exports.BundledExchangesParserAssociatedPtr = BundledExchangesParserAssociatedPtr;
  exports.BundleDataSource = BundleDataSource;
  exports.BundleDataSourcePtr = BundleDataSourcePtr;
  exports.BundleDataSourceAssociatedPtr = BundleDataSourceAssociatedPtr;
})();