// ui/base/mojom/cursor.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'ui/base/mojom/cursor.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('ui.mojom');
  var time$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/time.mojom', '../../../mojo/public/mojom/base/time.mojom.js');
  }
  var bitmap$ =
      mojo.internal.exposeNamespace('skia.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'skia/public/mojom/bitmap.mojom', '../../../skia/public/mojom/bitmap.mojom.js');
  }
  var geometry$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/geometry/mojom/geometry.mojom', '../../gfx/geometry/mojom/geometry.mojom.js');
  }


  var CursorType = {};
  CursorType.kNull = 0;
  CursorType.kPointer = CursorType.kNull + 1;
  CursorType.kCross = CursorType.kPointer + 1;
  CursorType.kHand = CursorType.kCross + 1;
  CursorType.kIBeam = CursorType.kHand + 1;
  CursorType.kWait = CursorType.kIBeam + 1;
  CursorType.kHelp = CursorType.kWait + 1;
  CursorType.kEastResize = CursorType.kHelp + 1;
  CursorType.kNorthResize = CursorType.kEastResize + 1;
  CursorType.kNorthEastResize = CursorType.kNorthResize + 1;
  CursorType.kNorthWestResize = CursorType.kNorthEastResize + 1;
  CursorType.kSouthResize = CursorType.kNorthWestResize + 1;
  CursorType.kSouthEastResize = CursorType.kSouthResize + 1;
  CursorType.kSouthWestResize = CursorType.kSouthEastResize + 1;
  CursorType.kWestResize = CursorType.kSouthWestResize + 1;
  CursorType.kNorthSouthResize = CursorType.kWestResize + 1;
  CursorType.kEastWestResize = CursorType.kNorthSouthResize + 1;
  CursorType.kNorthEastSouthWestResize = CursorType.kEastWestResize + 1;
  CursorType.kNorthWestSouthEastResize = CursorType.kNorthEastSouthWestResize + 1;
  CursorType.kColumnResize = CursorType.kNorthWestSouthEastResize + 1;
  CursorType.kRowResize = CursorType.kColumnResize + 1;
  CursorType.kMiddlePanning = CursorType.kRowResize + 1;
  CursorType.kMiddlePanningVertical = CursorType.kMiddlePanning + 1;
  CursorType.kMiddlePanningHorizontal = CursorType.kMiddlePanningVertical + 1;
  CursorType.kEastPanning = CursorType.kMiddlePanningHorizontal + 1;
  CursorType.kNorthPanning = CursorType.kEastPanning + 1;
  CursorType.kNorthEastPanning = CursorType.kNorthPanning + 1;
  CursorType.kNorthWestPanning = CursorType.kNorthEastPanning + 1;
  CursorType.kSouthPanning = CursorType.kNorthWestPanning + 1;
  CursorType.kSouthEastPanning = CursorType.kSouthPanning + 1;
  CursorType.kSouthWestPanning = CursorType.kSouthEastPanning + 1;
  CursorType.kWestPanning = CursorType.kSouthWestPanning + 1;
  CursorType.kMove = CursorType.kWestPanning + 1;
  CursorType.kVerticalText = CursorType.kMove + 1;
  CursorType.kCell = CursorType.kVerticalText + 1;
  CursorType.kContextMenu = CursorType.kCell + 1;
  CursorType.kAlias = CursorType.kContextMenu + 1;
  CursorType.kProgress = CursorType.kAlias + 1;
  CursorType.kNoDrop = CursorType.kProgress + 1;
  CursorType.kCopy = CursorType.kNoDrop + 1;
  CursorType.kNone = CursorType.kCopy + 1;
  CursorType.kNotAllowed = CursorType.kNone + 1;
  CursorType.kZoomIn = CursorType.kNotAllowed + 1;
  CursorType.kZoomOut = CursorType.kZoomIn + 1;
  CursorType.kGrab = CursorType.kZoomOut + 1;
  CursorType.kGrabbing = CursorType.kGrab + 1;
  CursorType.kCustom = CursorType.kGrabbing + 1;
  CursorType.MIN_VALUE = 0,
  CursorType.MAX_VALUE = 46,

  CursorType.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
      return true;
    }
    return false;
  };

  CursorType.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var CursorSize = {};
  CursorSize.kNormal = 0;
  CursorSize.kLarge = CursorSize.kNormal + 1;
  CursorSize.MIN_VALUE = 0,
  CursorSize.MAX_VALUE = 1,

  CursorSize.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
      return true;
    }
    return false;
  };

  CursorSize.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function Cursor(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Cursor.prototype.initDefaults_ = function() {
    this.nativeType = 0;
    this.deviceScaleFactor = 0;
    this.hotspot = null;
    this.bitmap = null;
  };
  Cursor.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Cursor.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Cursor.nativeType
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, CursorType);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Cursor.hotspot
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, geometry$.Point, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Cursor.bitmap
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, bitmap$.Bitmap, true);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  Cursor.encodedSize = codec.kStructHeaderSize + 24;

  Cursor.decode = function(decoder) {
    var packed;
    var val = new Cursor();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.nativeType = decoder.decodeStruct(codec.Int32);
    val.deviceScaleFactor = decoder.decodeStruct(codec.Float);
    val.hotspot = decoder.decodeStructPointer(geometry$.Point);
    val.bitmap = decoder.decodeStructPointer(bitmap$.Bitmap);
    return val;
  };

  Cursor.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Cursor.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.nativeType);
    encoder.encodeStruct(codec.Float, val.deviceScaleFactor);
    encoder.encodeStructPointer(geometry$.Point, val.hotspot);
    encoder.encodeStructPointer(bitmap$.Bitmap, val.bitmap);
  };
  exports.CursorType = CursorType;
  exports.CursorSize = CursorSize;
  exports.Cursor = Cursor;
})();