// ui/accessibility/mojom/ax_assistant_structure.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'ui/accessibility/mojom/ax_assistant_structure.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('ax.mojom');
  var string16$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/string16.mojom', '../../../mojo/public/mojom/base/string16.mojom.js');
  }
  var geometry$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/geometry/mojom/geometry.mojom', '../../gfx/geometry/mojom/geometry.mojom.js');
  }
  var range$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/range/mojom/range.mojom', '../../gfx/range/mojom/range.mojom.js');
  }
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../../url/mojom/url.mojom.js');
  }



  function AssistantTree(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AssistantTree.prototype.initDefaults_ = function() {
    this.nodes = null;
  };
  AssistantTree.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AssistantTree.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AssistantTree.nodes
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(AssistantNode), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AssistantTree.encodedSize = codec.kStructHeaderSize + 8;

  AssistantTree.decode = function(decoder) {
    var packed;
    var val = new AssistantTree();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.nodes = decoder.decodeArrayPointer(new codec.PointerTo(AssistantNode));
    return val;
  };

  AssistantTree.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AssistantTree.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(AssistantNode), val.nodes);
  };
  function AssistantNode(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AssistantNode.prototype.initDefaults_ = function() {
    this.childrenIndices = null;
    this.rect = null;
    this.text = null;
    this.textSize = 0;
    this.color = 0;
    this.bgcolor = 0;
    this.bold = false;
    this.italic = false;
    this.underline = false;
    this.lineThrough = false;
    this.selection = null;
    this.className = null;
    this.role = null;
  };
  AssistantNode.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AssistantNode.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 72}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AssistantNode.childrenIndices
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 4, codec.Int32, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AssistantNode.rect
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, geometry$.Rect, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AssistantNode.text
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, string16$.String16, false);
    if (err !== validator.validationError.NONE)
        return err;









    // validate AssistantNode.selection
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 40, range$.Range, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AssistantNode.className
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 48, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate AssistantNode.role
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 56, true)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AssistantNode.encodedSize = codec.kStructHeaderSize + 64;

  AssistantNode.decode = function(decoder) {
    var packed;
    var val = new AssistantNode();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.childrenIndices = decoder.decodeArrayPointer(codec.Int32);
    val.rect = decoder.decodeStructPointer(geometry$.Rect);
    val.text = decoder.decodeStructPointer(string16$.String16);
    val.textSize = decoder.decodeStruct(codec.Float);
    val.color = decoder.decodeStruct(codec.Uint32);
    val.bgcolor = decoder.decodeStruct(codec.Uint32);
    packed = decoder.readUint8();
    val.bold = (packed >> 0) & 1 ? true : false;
    val.italic = (packed >> 1) & 1 ? true : false;
    val.underline = (packed >> 2) & 1 ? true : false;
    val.lineThrough = (packed >> 3) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.selection = decoder.decodeStructPointer(range$.Range);
    val.className = decoder.decodeStruct(codec.String);
    val.role = decoder.decodeStruct(codec.NullableString);
    return val;
  };

  AssistantNode.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AssistantNode.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(codec.Int32, val.childrenIndices);
    encoder.encodeStructPointer(geometry$.Rect, val.rect);
    encoder.encodeStructPointer(string16$.String16, val.text);
    encoder.encodeStruct(codec.Float, val.textSize);
    encoder.encodeStruct(codec.Uint32, val.color);
    encoder.encodeStruct(codec.Uint32, val.bgcolor);
    packed = 0;
    packed |= (val.bold & 1) << 0
    packed |= (val.italic & 1) << 1
    packed |= (val.underline & 1) << 2
    packed |= (val.lineThrough & 1) << 3
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(range$.Range, val.selection);
    encoder.encodeStruct(codec.String, val.className);
    encoder.encodeStruct(codec.NullableString, val.role);
  };
  function AssistantExtra(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AssistantExtra.prototype.initDefaults_ = function() {
    this.url = null;
    this.boundsPixel = null;
    this.title = null;
  };
  AssistantExtra.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AssistantExtra.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AssistantExtra.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AssistantExtra.boundsPixel
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, geometry$.Rect, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AssistantExtra.title
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, string16$.String16, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AssistantExtra.encodedSize = codec.kStructHeaderSize + 24;

  AssistantExtra.decode = function(decoder) {
    var packed;
    var val = new AssistantExtra();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.url = decoder.decodeStructPointer(url$.Url);
    val.boundsPixel = decoder.decodeStructPointer(geometry$.Rect);
    val.title = decoder.decodeStructPointer(string16$.String16);
    return val;
  };

  AssistantExtra.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AssistantExtra.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.url);
    encoder.encodeStructPointer(geometry$.Rect, val.boundsPixel);
    encoder.encodeStructPointer(string16$.String16, val.title);
  };
  exports.AssistantTree = AssistantTree;
  exports.AssistantNode = AssistantNode;
  exports.AssistantExtra = AssistantExtra;
})();