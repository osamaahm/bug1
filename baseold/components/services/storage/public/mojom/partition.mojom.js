// components/services/storage/public/mojom/partition.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'components/services/storage/public/mojom/partition.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('storage.mojom');
  var origin_context$ =
      mojo.internal.exposeNamespace('storage.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'components/services/storage/public/mojom/origin_context.mojom', 'origin_context.mojom.js');
  }
  var origin$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/origin.mojom', '../../../../../url/mojom/origin.mojom.js');
  }



  function Partition_BindOriginContext_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Partition_BindOriginContext_Params.prototype.initDefaults_ = function() {
    this.origin = null;
    this.receiver = new bindings.InterfaceRequest();
  };
  Partition_BindOriginContext_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Partition_BindOriginContext_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Partition_BindOriginContext_Params.origin
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, origin$.Origin, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Partition_BindOriginContext_Params.receiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Partition_BindOriginContext_Params.encodedSize = codec.kStructHeaderSize + 16;

  Partition_BindOriginContext_Params.decode = function(decoder) {
    var packed;
    var val = new Partition_BindOriginContext_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.origin = decoder.decodeStructPointer(origin$.Origin);
    val.receiver = decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Partition_BindOriginContext_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Partition_BindOriginContext_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(origin$.Origin, val.origin);
    encoder.encodeStruct(codec.InterfaceRequest, val.receiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  var kPartition_BindOriginContext_Name = 0;

  function PartitionPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(Partition,
                                                   handleOrPtrInfo);
  }

  function PartitionAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        Partition, associatedInterfacePtrInfo);
  }

  PartitionAssociatedPtr.prototype =
      Object.create(PartitionPtr.prototype);
  PartitionAssociatedPtr.prototype.constructor =
      PartitionAssociatedPtr;

  function PartitionProxy(receiver) {
    this.receiver_ = receiver;
  }
  PartitionPtr.prototype.bindOriginContext = function() {
    return PartitionProxy.prototype.bindOriginContext
        .apply(this.ptr.getProxy(), arguments);
  };

  PartitionProxy.prototype.bindOriginContext = function(origin, receiver) {
    var params_ = new Partition_BindOriginContext_Params();
    params_.origin = origin;
    params_.receiver = receiver;
    var builder = new codec.MessageV0Builder(
        kPartition_BindOriginContext_Name,
        codec.align(Partition_BindOriginContext_Params.encodedSize));
    builder.encodeStruct(Partition_BindOriginContext_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function PartitionStub(delegate) {
    this.delegate_ = delegate;
  }
  PartitionStub.prototype.bindOriginContext = function(origin, receiver) {
    return this.delegate_ && this.delegate_.bindOriginContext && this.delegate_.bindOriginContext(origin, receiver);
  }

  PartitionStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPartition_BindOriginContext_Name:
      var params = reader.decodeStruct(Partition_BindOriginContext_Params);
      this.bindOriginContext(params.origin, params.receiver);
      return true;
    default:
      return false;
    }
  };

  PartitionStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validatePartitionRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kPartition_BindOriginContext_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Partition_BindOriginContext_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validatePartitionResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var Partition = {
    name: 'storage.mojom.Partition',
    kVersion: 0,
    ptrClass: PartitionPtr,
    proxyClass: PartitionProxy,
    stubClass: PartitionStub,
    validateRequest: validatePartitionRequest,
    validateResponse: null,
  };
  PartitionStub.prototype.validator = validatePartitionRequest;
  PartitionProxy.prototype.validator = null;
  exports.Partition = Partition;
  exports.PartitionPtr = PartitionPtr;
  exports.PartitionAssociatedPtr = PartitionAssociatedPtr;
})();