// components/data_reduction_proxy/core/common/data_reduction_proxy.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'components/data_reduction_proxy/core/common/data_reduction_proxy.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('dataReductionProxy.mojom');
  var time$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/time.mojom', '../../../../mojo/public/mojom/base/time.mojom.js');
  }
  var proxy_config$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/proxy_config.mojom', '../../../../services/network/public/mojom/proxy_config.mojom.js');
  }
  var proxy_resolver$ =
      mojo.internal.exposeNamespace('proxyResolver.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/proxy_resolver/public/mojom/proxy_resolver.mojom', '../../../../services/proxy_resolver/public/mojom/proxy_resolver.mojom.js');
  }



  function DataReductionProxyServer(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DataReductionProxyServer.prototype.initDefaults_ = function() {
    this.proxyServer = null;
    this.isCore = false;
  };
  DataReductionProxyServer.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DataReductionProxyServer.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DataReductionProxyServer.proxyServer
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, proxy_resolver$.ProxyServer, false);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  DataReductionProxyServer.encodedSize = codec.kStructHeaderSize + 16;

  DataReductionProxyServer.decode = function(decoder) {
    var packed;
    var val = new DataReductionProxyServer();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.proxyServer = decoder.decodeStructPointer(proxy_resolver$.ProxyServer);
    packed = decoder.readUint8();
    val.isCore = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  DataReductionProxyServer.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DataReductionProxyServer.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(proxy_resolver$.ProxyServer, val.proxyServer);
    packed = 0;
    packed |= (val.isCore & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function DataReductionProxyThrottleConfig(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DataReductionProxyThrottleConfig.prototype.initDefaults_ = function() {
    this.proxiesForHttp = null;
  };
  DataReductionProxyThrottleConfig.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DataReductionProxyThrottleConfig.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DataReductionProxyThrottleConfig.proxiesForHttp
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(DataReductionProxyServer), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DataReductionProxyThrottleConfig.encodedSize = codec.kStructHeaderSize + 8;

  DataReductionProxyThrottleConfig.decode = function(decoder) {
    var packed;
    var val = new DataReductionProxyThrottleConfig();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.proxiesForHttp = decoder.decodeArrayPointer(new codec.PointerTo(DataReductionProxyServer));
    return val;
  };

  DataReductionProxyThrottleConfig.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DataReductionProxyThrottleConfig.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(DataReductionProxyServer), val.proxiesForHttp);
  };
  function DataReductionProxyThrottleConfigObserver_OnThrottleConfigChanged_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DataReductionProxyThrottleConfigObserver_OnThrottleConfigChanged_Params.prototype.initDefaults_ = function() {
    this.config = null;
  };
  DataReductionProxyThrottleConfigObserver_OnThrottleConfigChanged_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DataReductionProxyThrottleConfigObserver_OnThrottleConfigChanged_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DataReductionProxyThrottleConfigObserver_OnThrottleConfigChanged_Params.config
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, DataReductionProxyThrottleConfig, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DataReductionProxyThrottleConfigObserver_OnThrottleConfigChanged_Params.encodedSize = codec.kStructHeaderSize + 8;

  DataReductionProxyThrottleConfigObserver_OnThrottleConfigChanged_Params.decode = function(decoder) {
    var packed;
    var val = new DataReductionProxyThrottleConfigObserver_OnThrottleConfigChanged_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.config = decoder.decodeStructPointer(DataReductionProxyThrottleConfig);
    return val;
  };

  DataReductionProxyThrottleConfigObserver_OnThrottleConfigChanged_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DataReductionProxyThrottleConfigObserver_OnThrottleConfigChanged_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(DataReductionProxyThrottleConfig, val.config);
  };
  function DataReductionProxy_MarkProxiesAsBad_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DataReductionProxy_MarkProxiesAsBad_Params.prototype.initDefaults_ = function() {
    this.bypassDuration = null;
    this.badProxies = null;
  };
  DataReductionProxy_MarkProxiesAsBad_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DataReductionProxy_MarkProxiesAsBad_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DataReductionProxy_MarkProxiesAsBad_Params.bypassDuration
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, time$.TimeDelta, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DataReductionProxy_MarkProxiesAsBad_Params.badProxies
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, proxy_config$.ProxyList, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DataReductionProxy_MarkProxiesAsBad_Params.encodedSize = codec.kStructHeaderSize + 16;

  DataReductionProxy_MarkProxiesAsBad_Params.decode = function(decoder) {
    var packed;
    var val = new DataReductionProxy_MarkProxiesAsBad_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.bypassDuration = decoder.decodeStructPointer(time$.TimeDelta);
    val.badProxies = decoder.decodeStructPointer(proxy_config$.ProxyList);
    return val;
  };

  DataReductionProxy_MarkProxiesAsBad_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DataReductionProxy_MarkProxiesAsBad_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(time$.TimeDelta, val.bypassDuration);
    encoder.encodeStructPointer(proxy_config$.ProxyList, val.badProxies);
  };
  function DataReductionProxy_MarkProxiesAsBad_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DataReductionProxy_MarkProxiesAsBad_ResponseParams.prototype.initDefaults_ = function() {
  };
  DataReductionProxy_MarkProxiesAsBad_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DataReductionProxy_MarkProxiesAsBad_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DataReductionProxy_MarkProxiesAsBad_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  DataReductionProxy_MarkProxiesAsBad_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new DataReductionProxy_MarkProxiesAsBad_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  DataReductionProxy_MarkProxiesAsBad_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DataReductionProxy_MarkProxiesAsBad_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function DataReductionProxy_AddThrottleConfigObserver_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DataReductionProxy_AddThrottleConfigObserver_Params.prototype.initDefaults_ = function() {
    this.observer = new DataReductionProxyThrottleConfigObserverPtr();
  };
  DataReductionProxy_AddThrottleConfigObserver_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DataReductionProxy_AddThrottleConfigObserver_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DataReductionProxy_AddThrottleConfigObserver_Params.observer
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DataReductionProxy_AddThrottleConfigObserver_Params.encodedSize = codec.kStructHeaderSize + 8;

  DataReductionProxy_AddThrottleConfigObserver_Params.decode = function(decoder) {
    var packed;
    var val = new DataReductionProxy_AddThrottleConfigObserver_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.observer = decoder.decodeStruct(new codec.Interface(DataReductionProxyThrottleConfigObserverPtr));
    return val;
  };

  DataReductionProxy_AddThrottleConfigObserver_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DataReductionProxy_AddThrottleConfigObserver_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(DataReductionProxyThrottleConfigObserverPtr), val.observer);
  };
  function DataReductionProxy_Clone_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DataReductionProxy_Clone_Params.prototype.initDefaults_ = function() {
    this.receiver = new bindings.InterfaceRequest();
  };
  DataReductionProxy_Clone_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DataReductionProxy_Clone_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DataReductionProxy_Clone_Params.receiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DataReductionProxy_Clone_Params.encodedSize = codec.kStructHeaderSize + 8;

  DataReductionProxy_Clone_Params.decode = function(decoder) {
    var packed;
    var val = new DataReductionProxy_Clone_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver = decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  DataReductionProxy_Clone_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DataReductionProxy_Clone_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.receiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  var kDataReductionProxyThrottleConfigObserver_OnThrottleConfigChanged_Name = 0;

  function DataReductionProxyThrottleConfigObserverPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(DataReductionProxyThrottleConfigObserver,
                                                   handleOrPtrInfo);
  }

  function DataReductionProxyThrottleConfigObserverAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        DataReductionProxyThrottleConfigObserver, associatedInterfacePtrInfo);
  }

  DataReductionProxyThrottleConfigObserverAssociatedPtr.prototype =
      Object.create(DataReductionProxyThrottleConfigObserverPtr.prototype);
  DataReductionProxyThrottleConfigObserverAssociatedPtr.prototype.constructor =
      DataReductionProxyThrottleConfigObserverAssociatedPtr;

  function DataReductionProxyThrottleConfigObserverProxy(receiver) {
    this.receiver_ = receiver;
  }
  DataReductionProxyThrottleConfigObserverPtr.prototype.onThrottleConfigChanged = function() {
    return DataReductionProxyThrottleConfigObserverProxy.prototype.onThrottleConfigChanged
        .apply(this.ptr.getProxy(), arguments);
  };

  DataReductionProxyThrottleConfigObserverProxy.prototype.onThrottleConfigChanged = function(config) {
    var params_ = new DataReductionProxyThrottleConfigObserver_OnThrottleConfigChanged_Params();
    params_.config = config;
    var builder = new codec.MessageV0Builder(
        kDataReductionProxyThrottleConfigObserver_OnThrottleConfigChanged_Name,
        codec.align(DataReductionProxyThrottleConfigObserver_OnThrottleConfigChanged_Params.encodedSize));
    builder.encodeStruct(DataReductionProxyThrottleConfigObserver_OnThrottleConfigChanged_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function DataReductionProxyThrottleConfigObserverStub(delegate) {
    this.delegate_ = delegate;
  }
  DataReductionProxyThrottleConfigObserverStub.prototype.onThrottleConfigChanged = function(config) {
    return this.delegate_ && this.delegate_.onThrottleConfigChanged && this.delegate_.onThrottleConfigChanged(config);
  }

  DataReductionProxyThrottleConfigObserverStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kDataReductionProxyThrottleConfigObserver_OnThrottleConfigChanged_Name:
      var params = reader.decodeStruct(DataReductionProxyThrottleConfigObserver_OnThrottleConfigChanged_Params);
      this.onThrottleConfigChanged(params.config);
      return true;
    default:
      return false;
    }
  };

  DataReductionProxyThrottleConfigObserverStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateDataReductionProxyThrottleConfigObserverRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kDataReductionProxyThrottleConfigObserver_OnThrottleConfigChanged_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DataReductionProxyThrottleConfigObserver_OnThrottleConfigChanged_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateDataReductionProxyThrottleConfigObserverResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var DataReductionProxyThrottleConfigObserver = {
    name: 'data_reduction_proxy.mojom.DataReductionProxyThrottleConfigObserver',
    kVersion: 0,
    ptrClass: DataReductionProxyThrottleConfigObserverPtr,
    proxyClass: DataReductionProxyThrottleConfigObserverProxy,
    stubClass: DataReductionProxyThrottleConfigObserverStub,
    validateRequest: validateDataReductionProxyThrottleConfigObserverRequest,
    validateResponse: null,
  };
  DataReductionProxyThrottleConfigObserverStub.prototype.validator = validateDataReductionProxyThrottleConfigObserverRequest;
  DataReductionProxyThrottleConfigObserverProxy.prototype.validator = null;
  var kDataReductionProxy_MarkProxiesAsBad_Name = 0;
  var kDataReductionProxy_AddThrottleConfigObserver_Name = 1;
  var kDataReductionProxy_Clone_Name = 2;

  function DataReductionProxyPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(DataReductionProxy,
                                                   handleOrPtrInfo);
  }

  function DataReductionProxyAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        DataReductionProxy, associatedInterfacePtrInfo);
  }

  DataReductionProxyAssociatedPtr.prototype =
      Object.create(DataReductionProxyPtr.prototype);
  DataReductionProxyAssociatedPtr.prototype.constructor =
      DataReductionProxyAssociatedPtr;

  function DataReductionProxyProxy(receiver) {
    this.receiver_ = receiver;
  }
  DataReductionProxyPtr.prototype.markProxiesAsBad = function() {
    return DataReductionProxyProxy.prototype.markProxiesAsBad
        .apply(this.ptr.getProxy(), arguments);
  };

  DataReductionProxyProxy.prototype.markProxiesAsBad = function(bypassDuration, badProxies) {
    var params_ = new DataReductionProxy_MarkProxiesAsBad_Params();
    params_.bypassDuration = bypassDuration;
    params_.badProxies = badProxies;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kDataReductionProxy_MarkProxiesAsBad_Name,
          codec.align(DataReductionProxy_MarkProxiesAsBad_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(DataReductionProxy_MarkProxiesAsBad_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(DataReductionProxy_MarkProxiesAsBad_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  DataReductionProxyPtr.prototype.addThrottleConfigObserver = function() {
    return DataReductionProxyProxy.prototype.addThrottleConfigObserver
        .apply(this.ptr.getProxy(), arguments);
  };

  DataReductionProxyProxy.prototype.addThrottleConfigObserver = function(observer) {
    var params_ = new DataReductionProxy_AddThrottleConfigObserver_Params();
    params_.observer = observer;
    var builder = new codec.MessageV0Builder(
        kDataReductionProxy_AddThrottleConfigObserver_Name,
        codec.align(DataReductionProxy_AddThrottleConfigObserver_Params.encodedSize));
    builder.encodeStruct(DataReductionProxy_AddThrottleConfigObserver_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DataReductionProxyPtr.prototype.clone = function() {
    return DataReductionProxyProxy.prototype.clone
        .apply(this.ptr.getProxy(), arguments);
  };

  DataReductionProxyProxy.prototype.clone = function(receiver) {
    var params_ = new DataReductionProxy_Clone_Params();
    params_.receiver = receiver;
    var builder = new codec.MessageV0Builder(
        kDataReductionProxy_Clone_Name,
        codec.align(DataReductionProxy_Clone_Params.encodedSize));
    builder.encodeStruct(DataReductionProxy_Clone_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function DataReductionProxyStub(delegate) {
    this.delegate_ = delegate;
  }
  DataReductionProxyStub.prototype.markProxiesAsBad = function(bypassDuration, badProxies) {
    return this.delegate_ && this.delegate_.markProxiesAsBad && this.delegate_.markProxiesAsBad(bypassDuration, badProxies);
  }
  DataReductionProxyStub.prototype.addThrottleConfigObserver = function(observer) {
    return this.delegate_ && this.delegate_.addThrottleConfigObserver && this.delegate_.addThrottleConfigObserver(observer);
  }
  DataReductionProxyStub.prototype.clone = function(receiver) {
    return this.delegate_ && this.delegate_.clone && this.delegate_.clone(receiver);
  }

  DataReductionProxyStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kDataReductionProxy_AddThrottleConfigObserver_Name:
      var params = reader.decodeStruct(DataReductionProxy_AddThrottleConfigObserver_Params);
      this.addThrottleConfigObserver(params.observer);
      return true;
    case kDataReductionProxy_Clone_Name:
      var params = reader.decodeStruct(DataReductionProxy_Clone_Params);
      this.clone(params.receiver);
      return true;
    default:
      return false;
    }
  };

  DataReductionProxyStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kDataReductionProxy_MarkProxiesAsBad_Name:
      var params = reader.decodeStruct(DataReductionProxy_MarkProxiesAsBad_Params);
      this.markProxiesAsBad(params.bypassDuration, params.badProxies).then(function(response) {
        var responseParams =
            new DataReductionProxy_MarkProxiesAsBad_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kDataReductionProxy_MarkProxiesAsBad_Name,
            codec.align(DataReductionProxy_MarkProxiesAsBad_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(DataReductionProxy_MarkProxiesAsBad_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateDataReductionProxyRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kDataReductionProxy_MarkProxiesAsBad_Name:
        if (message.expectsResponse())
          paramsClass = DataReductionProxy_MarkProxiesAsBad_Params;
      break;
      case kDataReductionProxy_AddThrottleConfigObserver_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DataReductionProxy_AddThrottleConfigObserver_Params;
      break;
      case kDataReductionProxy_Clone_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DataReductionProxy_Clone_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateDataReductionProxyResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kDataReductionProxy_MarkProxiesAsBad_Name:
        if (message.isResponse())
          paramsClass = DataReductionProxy_MarkProxiesAsBad_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var DataReductionProxy = {
    name: 'data_reduction_proxy.mojom.DataReductionProxy',
    kVersion: 0,
    ptrClass: DataReductionProxyPtr,
    proxyClass: DataReductionProxyProxy,
    stubClass: DataReductionProxyStub,
    validateRequest: validateDataReductionProxyRequest,
    validateResponse: validateDataReductionProxyResponse,
  };
  DataReductionProxyStub.prototype.validator = validateDataReductionProxyRequest;
  DataReductionProxyProxy.prototype.validator = validateDataReductionProxyResponse;
  exports.DataReductionProxyServer = DataReductionProxyServer;
  exports.DataReductionProxyThrottleConfig = DataReductionProxyThrottleConfig;
  exports.DataReductionProxyThrottleConfigObserver = DataReductionProxyThrottleConfigObserver;
  exports.DataReductionProxyThrottleConfigObserverPtr = DataReductionProxyThrottleConfigObserverPtr;
  exports.DataReductionProxyThrottleConfigObserverAssociatedPtr = DataReductionProxyThrottleConfigObserverAssociatedPtr;
  exports.DataReductionProxy = DataReductionProxy;
  exports.DataReductionProxyPtr = DataReductionProxyPtr;
  exports.DataReductionProxyAssociatedPtr = DataReductionProxyAssociatedPtr;
})();