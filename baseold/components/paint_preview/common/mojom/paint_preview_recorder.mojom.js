// components/paint_preview/common/mojom/paint_preview_recorder.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'components/paint_preview/common/mojom/paint_preview_recorder.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('paintPreview.mojom');
  var discardable_shared_memory_manager$ =
      mojo.internal.exposeNamespace('discardableMemory.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'components/discardable_memory/public/mojom/discardable_shared_memory_manager.mojom', '../../../discardable_memory/public/mojom/discardable_shared_memory_manager.mojom.js');
  }
  var file$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/file.mojom', '../../../../mojo/public/mojom/base/file.mojom.js');
  }
  var shared_memory$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/shared_memory.mojom', '../../../../mojo/public/mojom/base/shared_memory.mojom.js');
  }
  var unguessable_token$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/unguessable_token.mojom', '../../../../mojo/public/mojom/base/unguessable_token.mojom.js');
  }
  var geometry$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/geometry/mojom/geometry.mojom', '../../../../ui/gfx/geometry/mojom/geometry.mojom.js');
  }


  var PaintPreviewStatus = {};
  PaintPreviewStatus.kOk = 0;
  PaintPreviewStatus.kAlreadyCapturing = PaintPreviewStatus.kOk + 1;
  PaintPreviewStatus.kCaptureFailed = PaintPreviewStatus.kAlreadyCapturing + 1;
  PaintPreviewStatus.kProtoSerializationFailed = PaintPreviewStatus.kCaptureFailed + 1;
  PaintPreviewStatus.MIN_VALUE = 0,
  PaintPreviewStatus.MAX_VALUE = 3,

  PaintPreviewStatus.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    }
    return false;
  };

  PaintPreviewStatus.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function PaintPreviewCaptureParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PaintPreviewCaptureParams.prototype.initDefaults_ = function() {
    this.guid = null;
    this.clipRect = null;
    this.isMainFrame = false;
    this.file = null;
  };
  PaintPreviewCaptureParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PaintPreviewCaptureParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PaintPreviewCaptureParams.guid
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, unguessable_token$.UnguessableToken, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PaintPreviewCaptureParams.clipRect
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, geometry$.Rect, false);
    if (err !== validator.validationError.NONE)
        return err;



    // validate PaintPreviewCaptureParams.file
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, file$.File, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PaintPreviewCaptureParams.encodedSize = codec.kStructHeaderSize + 32;

  PaintPreviewCaptureParams.decode = function(decoder) {
    var packed;
    var val = new PaintPreviewCaptureParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.guid = decoder.decodeStructPointer(unguessable_token$.UnguessableToken);
    val.clipRect = decoder.decodeStructPointer(geometry$.Rect);
    packed = decoder.readUint8();
    val.isMainFrame = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.file = decoder.decodeStructPointer(file$.File);
    return val;
  };

  PaintPreviewCaptureParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PaintPreviewCaptureParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(unguessable_token$.UnguessableToken, val.guid);
    encoder.encodeStructPointer(geometry$.Rect, val.clipRect);
    packed = 0;
    packed |= (val.isMainFrame & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(file$.File, val.file);
  };
  function PaintPreviewRecorder_CapturePaintPreview_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PaintPreviewRecorder_CapturePaintPreview_Params.prototype.initDefaults_ = function() {
    this.params = null;
  };
  PaintPreviewRecorder_CapturePaintPreview_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PaintPreviewRecorder_CapturePaintPreview_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PaintPreviewRecorder_CapturePaintPreview_Params.params
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, PaintPreviewCaptureParams, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PaintPreviewRecorder_CapturePaintPreview_Params.encodedSize = codec.kStructHeaderSize + 8;

  PaintPreviewRecorder_CapturePaintPreview_Params.decode = function(decoder) {
    var packed;
    var val = new PaintPreviewRecorder_CapturePaintPreview_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.params = decoder.decodeStructPointer(PaintPreviewCaptureParams);
    return val;
  };

  PaintPreviewRecorder_CapturePaintPreview_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PaintPreviewRecorder_CapturePaintPreview_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(PaintPreviewCaptureParams, val.params);
  };
  function PaintPreviewRecorder_CapturePaintPreview_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PaintPreviewRecorder_CapturePaintPreview_ResponseParams.prototype.initDefaults_ = function() {
    this.status = 0;
    this.proto = null;
  };
  PaintPreviewRecorder_CapturePaintPreview_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PaintPreviewRecorder_CapturePaintPreview_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PaintPreviewRecorder_CapturePaintPreview_ResponseParams.status
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, PaintPreviewStatus);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PaintPreviewRecorder_CapturePaintPreview_ResponseParams.proto
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, shared_memory$.ReadOnlySharedMemoryRegion, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PaintPreviewRecorder_CapturePaintPreview_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  PaintPreviewRecorder_CapturePaintPreview_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PaintPreviewRecorder_CapturePaintPreview_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.status = decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.proto = decoder.decodeStructPointer(shared_memory$.ReadOnlySharedMemoryRegion);
    return val;
  };

  PaintPreviewRecorder_CapturePaintPreview_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PaintPreviewRecorder_CapturePaintPreview_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.status);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(shared_memory$.ReadOnlySharedMemoryRegion, val.proto);
  };
  var kPaintPreviewRecorder_CapturePaintPreview_Name = 0;

  function PaintPreviewRecorderPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(PaintPreviewRecorder,
                                                   handleOrPtrInfo);
  }

  function PaintPreviewRecorderAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        PaintPreviewRecorder, associatedInterfacePtrInfo);
  }

  PaintPreviewRecorderAssociatedPtr.prototype =
      Object.create(PaintPreviewRecorderPtr.prototype);
  PaintPreviewRecorderAssociatedPtr.prototype.constructor =
      PaintPreviewRecorderAssociatedPtr;

  function PaintPreviewRecorderProxy(receiver) {
    this.receiver_ = receiver;
  }
  PaintPreviewRecorderPtr.prototype.capturePaintPreview = function() {
    return PaintPreviewRecorderProxy.prototype.capturePaintPreview
        .apply(this.ptr.getProxy(), arguments);
  };

  PaintPreviewRecorderProxy.prototype.capturePaintPreview = function(params) {
    var params_ = new PaintPreviewRecorder_CapturePaintPreview_Params();
    params_.params = params;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPaintPreviewRecorder_CapturePaintPreview_Name,
          codec.align(PaintPreviewRecorder_CapturePaintPreview_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PaintPreviewRecorder_CapturePaintPreview_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PaintPreviewRecorder_CapturePaintPreview_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function PaintPreviewRecorderStub(delegate) {
    this.delegate_ = delegate;
  }
  PaintPreviewRecorderStub.prototype.capturePaintPreview = function(params) {
    return this.delegate_ && this.delegate_.capturePaintPreview && this.delegate_.capturePaintPreview(params);
  }

  PaintPreviewRecorderStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  PaintPreviewRecorderStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPaintPreviewRecorder_CapturePaintPreview_Name:
      var params = reader.decodeStruct(PaintPreviewRecorder_CapturePaintPreview_Params);
      this.capturePaintPreview(params.params).then(function(response) {
        var responseParams =
            new PaintPreviewRecorder_CapturePaintPreview_ResponseParams();
        responseParams.status = response.status;
        responseParams.proto = response.proto;
        var builder = new codec.MessageV1Builder(
            kPaintPreviewRecorder_CapturePaintPreview_Name,
            codec.align(PaintPreviewRecorder_CapturePaintPreview_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PaintPreviewRecorder_CapturePaintPreview_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validatePaintPreviewRecorderRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kPaintPreviewRecorder_CapturePaintPreview_Name:
        if (message.expectsResponse())
          paramsClass = PaintPreviewRecorder_CapturePaintPreview_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validatePaintPreviewRecorderResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kPaintPreviewRecorder_CapturePaintPreview_Name:
        if (message.isResponse())
          paramsClass = PaintPreviewRecorder_CapturePaintPreview_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var PaintPreviewRecorder = {
    name: 'paint_preview.mojom.PaintPreviewRecorder',
    kVersion: 0,
    ptrClass: PaintPreviewRecorderPtr,
    proxyClass: PaintPreviewRecorderProxy,
    stubClass: PaintPreviewRecorderStub,
    validateRequest: validatePaintPreviewRecorderRequest,
    validateResponse: validatePaintPreviewRecorderResponse,
  };
  PaintPreviewRecorderStub.prototype.validator = validatePaintPreviewRecorderRequest;
  PaintPreviewRecorderProxy.prototype.validator = validatePaintPreviewRecorderResponse;
  exports.PaintPreviewStatus = PaintPreviewStatus;
  exports.PaintPreviewCaptureParams = PaintPreviewCaptureParams;
  exports.PaintPreviewRecorder = PaintPreviewRecorder;
  exports.PaintPreviewRecorderPtr = PaintPreviewRecorderPtr;
  exports.PaintPreviewRecorderAssociatedPtr = PaintPreviewRecorderAssociatedPtr;
})();