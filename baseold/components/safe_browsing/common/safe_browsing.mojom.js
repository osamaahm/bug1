// components/safe_browsing/common/safe_browsing.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'components/safe_browsing/common/safe_browsing.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('safeBrowsing.mojom');
  var resource_type$ =
      mojo.internal.exposeNamespace('content.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'content/public/common/resource_type.mojom', '../../../content/public/common/resource_type.mojom.js');
  }
  var http_request_headers$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/http_request_headers.mojom', '../../../services/network/public/mojom/http_request_headers.mojom.js');
  }
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../../url/mojom/url.mojom.js');
  }


  var PhishingDetectorResult = {};
  PhishingDetectorResult.SUCCESS = 0;
  PhishingDetectorResult.CLASSIFIER_NOT_READY = 1;
  PhishingDetectorResult.CANCELLED = 2;
  PhishingDetectorResult.FORWARD_BACK_TRANSITION = 3;
  PhishingDetectorResult.INVALID_SCORE = 4;
  PhishingDetectorResult.MIN_VALUE = 0,
  PhishingDetectorResult.MAX_VALUE = 4,

  PhishingDetectorResult.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    }
    return false;
  };

  PhishingDetectorResult.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function AttributeNameValue(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AttributeNameValue.prototype.initDefaults_ = function() {
    this.name = null;
    this.value = null;
  };
  AttributeNameValue.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AttributeNameValue.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AttributeNameValue.name
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate AttributeNameValue.value
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AttributeNameValue.encodedSize = codec.kStructHeaderSize + 16;

  AttributeNameValue.decode = function(decoder) {
    var packed;
    var val = new AttributeNameValue();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.name = decoder.decodeStruct(codec.String);
    val.value = decoder.decodeStruct(codec.String);
    return val;
  };

  AttributeNameValue.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AttributeNameValue.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.name);
    encoder.encodeStruct(codec.String, val.value);
  };
  function ThreatDOMDetailsNode(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ThreatDOMDetailsNode.prototype.initDefaults_ = function() {
    this.nodeId = 0;
    this.parentNodeId = 0;
    this.url = null;
    this.tagName = null;
    this.parent = null;
    this.children = null;
    this.childNodeIds = null;
    this.attributes = null;
    this.childFrameRoutingId = 0;
    this.innerHtml = null;
  };
  ThreatDOMDetailsNode.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ThreatDOMDetailsNode.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 80}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate ThreatDOMDetailsNode.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ThreatDOMDetailsNode.tagName
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 16, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate ThreatDOMDetailsNode.parent
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;



    // validate ThreatDOMDetailsNode.children
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 32, 8, new codec.PointerTo(url$.Url), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ThreatDOMDetailsNode.childNodeIds
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 40, 4, codec.Int32, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ThreatDOMDetailsNode.attributes
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 48, 8, new codec.PointerTo(AttributeNameValue), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;



    // validate ThreatDOMDetailsNode.innerHtml
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 64, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ThreatDOMDetailsNode.encodedSize = codec.kStructHeaderSize + 72;

  ThreatDOMDetailsNode.decode = function(decoder) {
    var packed;
    var val = new ThreatDOMDetailsNode();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.nodeId = decoder.decodeStruct(codec.Int32);
    val.parentNodeId = decoder.decodeStruct(codec.Int32);
    val.url = decoder.decodeStructPointer(url$.Url);
    val.tagName = decoder.decodeStruct(codec.String);
    val.parent = decoder.decodeStructPointer(url$.Url);
    val.children = decoder.decodeArrayPointer(new codec.PointerTo(url$.Url));
    val.childNodeIds = decoder.decodeArrayPointer(codec.Int32);
    val.attributes = decoder.decodeArrayPointer(new codec.PointerTo(AttributeNameValue));
    val.childFrameRoutingId = decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.innerHtml = decoder.decodeStruct(codec.String);
    return val;
  };

  ThreatDOMDetailsNode.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ThreatDOMDetailsNode.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.nodeId);
    encoder.encodeStruct(codec.Int32, val.parentNodeId);
    encoder.encodeStructPointer(url$.Url, val.url);
    encoder.encodeStruct(codec.String, val.tagName);
    encoder.encodeStructPointer(url$.Url, val.parent);
    encoder.encodeArrayPointer(new codec.PointerTo(url$.Url), val.children);
    encoder.encodeArrayPointer(codec.Int32, val.childNodeIds);
    encoder.encodeArrayPointer(new codec.PointerTo(AttributeNameValue), val.attributes);
    encoder.encodeStruct(codec.Int32, val.childFrameRoutingId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.String, val.innerHtml);
  };
  function SafeBrowsing_CreateCheckerAndCheck_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SafeBrowsing_CreateCheckerAndCheck_Params.prototype.initDefaults_ = function() {
    this.renderFrameId = 0;
    this.receiver = new bindings.InterfaceRequest();
    this.url = null;
    this.method = null;
    this.headers = null;
    this.loadFlags = 0;
    this.resourceType = 0;
    this.hasUserGesture = false;
    this.originatedFromServiceWorker = false;
  };
  SafeBrowsing_CreateCheckerAndCheck_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SafeBrowsing_CreateCheckerAndCheck_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 56}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate SafeBrowsing_CreateCheckerAndCheck_Params.receiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 4, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate SafeBrowsing_CreateCheckerAndCheck_Params.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SafeBrowsing_CreateCheckerAndCheck_Params.method
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 16, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate SafeBrowsing_CreateCheckerAndCheck_Params.headers
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, http_request_headers$.HttpRequestHeaders, false);
    if (err !== validator.validationError.NONE)
        return err;



    // validate SafeBrowsing_CreateCheckerAndCheck_Params.resourceType
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 36, resource_type$.ResourceType);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  SafeBrowsing_CreateCheckerAndCheck_Params.encodedSize = codec.kStructHeaderSize + 48;

  SafeBrowsing_CreateCheckerAndCheck_Params.decode = function(decoder) {
    var packed;
    var val = new SafeBrowsing_CreateCheckerAndCheck_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.renderFrameId = decoder.decodeStruct(codec.Int32);
    val.receiver = decoder.decodeStruct(codec.InterfaceRequest);
    val.url = decoder.decodeStructPointer(url$.Url);
    val.method = decoder.decodeStruct(codec.String);
    val.headers = decoder.decodeStructPointer(http_request_headers$.HttpRequestHeaders);
    val.loadFlags = decoder.decodeStruct(codec.Int32);
    val.resourceType = decoder.decodeStruct(codec.Int32);
    packed = decoder.readUint8();
    val.hasUserGesture = (packed >> 0) & 1 ? true : false;
    val.originatedFromServiceWorker = (packed >> 1) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  SafeBrowsing_CreateCheckerAndCheck_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SafeBrowsing_CreateCheckerAndCheck_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.renderFrameId);
    encoder.encodeStruct(codec.InterfaceRequest, val.receiver);
    encoder.encodeStructPointer(url$.Url, val.url);
    encoder.encodeStruct(codec.String, val.method);
    encoder.encodeStructPointer(http_request_headers$.HttpRequestHeaders, val.headers);
    encoder.encodeStruct(codec.Int32, val.loadFlags);
    encoder.encodeStruct(codec.Int32, val.resourceType);
    packed = 0;
    packed |= (val.hasUserGesture & 1) << 0
    packed |= (val.originatedFromServiceWorker & 1) << 1
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function SafeBrowsing_CreateCheckerAndCheck_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SafeBrowsing_CreateCheckerAndCheck_ResponseParams.prototype.initDefaults_ = function() {
    this.slowCheckNotifier = new bindings.InterfaceRequest();
    this.proceed = false;
    this.showedInterstitial = false;
  };
  SafeBrowsing_CreateCheckerAndCheck_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SafeBrowsing_CreateCheckerAndCheck_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SafeBrowsing_CreateCheckerAndCheck_ResponseParams.slowCheckNotifier
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, true)
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  SafeBrowsing_CreateCheckerAndCheck_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  SafeBrowsing_CreateCheckerAndCheck_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new SafeBrowsing_CreateCheckerAndCheck_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.slowCheckNotifier = decoder.decodeStruct(codec.NullableInterfaceRequest);
    packed = decoder.readUint8();
    val.proceed = (packed >> 0) & 1 ? true : false;
    val.showedInterstitial = (packed >> 1) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  SafeBrowsing_CreateCheckerAndCheck_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SafeBrowsing_CreateCheckerAndCheck_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.NullableInterfaceRequest, val.slowCheckNotifier);
    packed = 0;
    packed |= (val.proceed & 1) << 0
    packed |= (val.showedInterstitial & 1) << 1
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function SafeBrowsing_Clone_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SafeBrowsing_Clone_Params.prototype.initDefaults_ = function() {
    this.receiver = new bindings.InterfaceRequest();
  };
  SafeBrowsing_Clone_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SafeBrowsing_Clone_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SafeBrowsing_Clone_Params.receiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SafeBrowsing_Clone_Params.encodedSize = codec.kStructHeaderSize + 8;

  SafeBrowsing_Clone_Params.decode = function(decoder) {
    var packed;
    var val = new SafeBrowsing_Clone_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver = decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  SafeBrowsing_Clone_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SafeBrowsing_Clone_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.receiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function SafeBrowsingUrlChecker_CheckUrl_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SafeBrowsingUrlChecker_CheckUrl_Params.prototype.initDefaults_ = function() {
    this.url = null;
    this.method = null;
  };
  SafeBrowsingUrlChecker_CheckUrl_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SafeBrowsingUrlChecker_CheckUrl_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SafeBrowsingUrlChecker_CheckUrl_Params.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SafeBrowsingUrlChecker_CheckUrl_Params.method
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SafeBrowsingUrlChecker_CheckUrl_Params.encodedSize = codec.kStructHeaderSize + 16;

  SafeBrowsingUrlChecker_CheckUrl_Params.decode = function(decoder) {
    var packed;
    var val = new SafeBrowsingUrlChecker_CheckUrl_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.url = decoder.decodeStructPointer(url$.Url);
    val.method = decoder.decodeStruct(codec.String);
    return val;
  };

  SafeBrowsingUrlChecker_CheckUrl_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SafeBrowsingUrlChecker_CheckUrl_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.url);
    encoder.encodeStruct(codec.String, val.method);
  };
  function SafeBrowsingUrlChecker_CheckUrl_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SafeBrowsingUrlChecker_CheckUrl_ResponseParams.prototype.initDefaults_ = function() {
    this.slowCheckNotifier = new bindings.InterfaceRequest();
    this.proceed = false;
    this.showedInterstitial = false;
  };
  SafeBrowsingUrlChecker_CheckUrl_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SafeBrowsingUrlChecker_CheckUrl_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SafeBrowsingUrlChecker_CheckUrl_ResponseParams.slowCheckNotifier
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, true)
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  SafeBrowsingUrlChecker_CheckUrl_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  SafeBrowsingUrlChecker_CheckUrl_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new SafeBrowsingUrlChecker_CheckUrl_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.slowCheckNotifier = decoder.decodeStruct(codec.NullableInterfaceRequest);
    packed = decoder.readUint8();
    val.proceed = (packed >> 0) & 1 ? true : false;
    val.showedInterstitial = (packed >> 1) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  SafeBrowsingUrlChecker_CheckUrl_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SafeBrowsingUrlChecker_CheckUrl_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.NullableInterfaceRequest, val.slowCheckNotifier);
    packed = 0;
    packed |= (val.proceed & 1) << 0
    packed |= (val.showedInterstitial & 1) << 1
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function UrlCheckNotifier_OnCompleteCheck_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  UrlCheckNotifier_OnCompleteCheck_Params.prototype.initDefaults_ = function() {
    this.proceed = false;
    this.showedInterstitial = false;
  };
  UrlCheckNotifier_OnCompleteCheck_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  UrlCheckNotifier_OnCompleteCheck_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  UrlCheckNotifier_OnCompleteCheck_Params.encodedSize = codec.kStructHeaderSize + 8;

  UrlCheckNotifier_OnCompleteCheck_Params.decode = function(decoder) {
    var packed;
    var val = new UrlCheckNotifier_OnCompleteCheck_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.proceed = (packed >> 0) & 1 ? true : false;
    val.showedInterstitial = (packed >> 1) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  UrlCheckNotifier_OnCompleteCheck_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(UrlCheckNotifier_OnCompleteCheck_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.proceed & 1) << 0
    packed |= (val.showedInterstitial & 1) << 1
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ThreatReporter_GetThreatDOMDetails_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ThreatReporter_GetThreatDOMDetails_Params.prototype.initDefaults_ = function() {
  };
  ThreatReporter_GetThreatDOMDetails_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ThreatReporter_GetThreatDOMDetails_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ThreatReporter_GetThreatDOMDetails_Params.encodedSize = codec.kStructHeaderSize + 0;

  ThreatReporter_GetThreatDOMDetails_Params.decode = function(decoder) {
    var packed;
    var val = new ThreatReporter_GetThreatDOMDetails_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  ThreatReporter_GetThreatDOMDetails_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ThreatReporter_GetThreatDOMDetails_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function ThreatReporter_GetThreatDOMDetails_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ThreatReporter_GetThreatDOMDetails_ResponseParams.prototype.initDefaults_ = function() {
    this.nodes = null;
  };
  ThreatReporter_GetThreatDOMDetails_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ThreatReporter_GetThreatDOMDetails_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ThreatReporter_GetThreatDOMDetails_ResponseParams.nodes
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(ThreatDOMDetailsNode), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ThreatReporter_GetThreatDOMDetails_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ThreatReporter_GetThreatDOMDetails_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ThreatReporter_GetThreatDOMDetails_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.nodes = decoder.decodeArrayPointer(new codec.PointerTo(ThreatDOMDetailsNode));
    return val;
  };

  ThreatReporter_GetThreatDOMDetails_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ThreatReporter_GetThreatDOMDetails_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(ThreatDOMDetailsNode), val.nodes);
  };
  function PhishingModelSetter_SetPhishingModel_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PhishingModelSetter_SetPhishingModel_Params.prototype.initDefaults_ = function() {
    this.model = null;
  };
  PhishingModelSetter_SetPhishingModel_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PhishingModelSetter_SetPhishingModel_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PhishingModelSetter_SetPhishingModel_Params.model
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PhishingModelSetter_SetPhishingModel_Params.encodedSize = codec.kStructHeaderSize + 8;

  PhishingModelSetter_SetPhishingModel_Params.decode = function(decoder) {
    var packed;
    var val = new PhishingModelSetter_SetPhishingModel_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.model = decoder.decodeStruct(codec.String);
    return val;
  };

  PhishingModelSetter_SetPhishingModel_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PhishingModelSetter_SetPhishingModel_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.model);
  };
  var kSafeBrowsing_CreateCheckerAndCheck_Name = 0;
  var kSafeBrowsing_Clone_Name = 1;

  function SafeBrowsingPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(SafeBrowsing,
                                                   handleOrPtrInfo);
  }

  function SafeBrowsingAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        SafeBrowsing, associatedInterfacePtrInfo);
  }

  SafeBrowsingAssociatedPtr.prototype =
      Object.create(SafeBrowsingPtr.prototype);
  SafeBrowsingAssociatedPtr.prototype.constructor =
      SafeBrowsingAssociatedPtr;

  function SafeBrowsingProxy(receiver) {
    this.receiver_ = receiver;
  }
  SafeBrowsingPtr.prototype.createCheckerAndCheck = function() {
    return SafeBrowsingProxy.prototype.createCheckerAndCheck
        .apply(this.ptr.getProxy(), arguments);
  };

  SafeBrowsingProxy.prototype.createCheckerAndCheck = function(renderFrameId, receiver, url, method, headers, loadFlags, resourceType, hasUserGesture, originatedFromServiceWorker) {
    var params_ = new SafeBrowsing_CreateCheckerAndCheck_Params();
    params_.renderFrameId = renderFrameId;
    params_.receiver = receiver;
    params_.url = url;
    params_.method = method;
    params_.headers = headers;
    params_.loadFlags = loadFlags;
    params_.resourceType = resourceType;
    params_.hasUserGesture = hasUserGesture;
    params_.originatedFromServiceWorker = originatedFromServiceWorker;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kSafeBrowsing_CreateCheckerAndCheck_Name,
          codec.align(SafeBrowsing_CreateCheckerAndCheck_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(SafeBrowsing_CreateCheckerAndCheck_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(SafeBrowsing_CreateCheckerAndCheck_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  SafeBrowsingPtr.prototype.clone = function() {
    return SafeBrowsingProxy.prototype.clone
        .apply(this.ptr.getProxy(), arguments);
  };

  SafeBrowsingProxy.prototype.clone = function(receiver) {
    var params_ = new SafeBrowsing_Clone_Params();
    params_.receiver = receiver;
    var builder = new codec.MessageV0Builder(
        kSafeBrowsing_Clone_Name,
        codec.align(SafeBrowsing_Clone_Params.encodedSize));
    builder.encodeStruct(SafeBrowsing_Clone_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function SafeBrowsingStub(delegate) {
    this.delegate_ = delegate;
  }
  SafeBrowsingStub.prototype.createCheckerAndCheck = function(renderFrameId, receiver, url, method, headers, loadFlags, resourceType, hasUserGesture, originatedFromServiceWorker) {
    return this.delegate_ && this.delegate_.createCheckerAndCheck && this.delegate_.createCheckerAndCheck(renderFrameId, receiver, url, method, headers, loadFlags, resourceType, hasUserGesture, originatedFromServiceWorker);
  }
  SafeBrowsingStub.prototype.clone = function(receiver) {
    return this.delegate_ && this.delegate_.clone && this.delegate_.clone(receiver);
  }

  SafeBrowsingStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kSafeBrowsing_Clone_Name:
      var params = reader.decodeStruct(SafeBrowsing_Clone_Params);
      this.clone(params.receiver);
      return true;
    default:
      return false;
    }
  };

  SafeBrowsingStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kSafeBrowsing_CreateCheckerAndCheck_Name:
      var params = reader.decodeStruct(SafeBrowsing_CreateCheckerAndCheck_Params);
      this.createCheckerAndCheck(params.renderFrameId, params.receiver, params.url, params.method, params.headers, params.loadFlags, params.resourceType, params.hasUserGesture, params.originatedFromServiceWorker).then(function(response) {
        var responseParams =
            new SafeBrowsing_CreateCheckerAndCheck_ResponseParams();
        responseParams.slowCheckNotifier = response.slowCheckNotifier;
        responseParams.proceed = response.proceed;
        responseParams.showedInterstitial = response.showedInterstitial;
        var builder = new codec.MessageV1Builder(
            kSafeBrowsing_CreateCheckerAndCheck_Name,
            codec.align(SafeBrowsing_CreateCheckerAndCheck_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(SafeBrowsing_CreateCheckerAndCheck_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateSafeBrowsingRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kSafeBrowsing_CreateCheckerAndCheck_Name:
        if (message.expectsResponse())
          paramsClass = SafeBrowsing_CreateCheckerAndCheck_Params;
      break;
      case kSafeBrowsing_Clone_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = SafeBrowsing_Clone_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateSafeBrowsingResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kSafeBrowsing_CreateCheckerAndCheck_Name:
        if (message.isResponse())
          paramsClass = SafeBrowsing_CreateCheckerAndCheck_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var SafeBrowsing = {
    name: 'safe_browsing.mojom.SafeBrowsing',
    kVersion: 0,
    ptrClass: SafeBrowsingPtr,
    proxyClass: SafeBrowsingProxy,
    stubClass: SafeBrowsingStub,
    validateRequest: validateSafeBrowsingRequest,
    validateResponse: validateSafeBrowsingResponse,
  };
  SafeBrowsingStub.prototype.validator = validateSafeBrowsingRequest;
  SafeBrowsingProxy.prototype.validator = validateSafeBrowsingResponse;
  var kSafeBrowsingUrlChecker_CheckUrl_Name = 0;

  function SafeBrowsingUrlCheckerPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(SafeBrowsingUrlChecker,
                                                   handleOrPtrInfo);
  }

  function SafeBrowsingUrlCheckerAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        SafeBrowsingUrlChecker, associatedInterfacePtrInfo);
  }

  SafeBrowsingUrlCheckerAssociatedPtr.prototype =
      Object.create(SafeBrowsingUrlCheckerPtr.prototype);
  SafeBrowsingUrlCheckerAssociatedPtr.prototype.constructor =
      SafeBrowsingUrlCheckerAssociatedPtr;

  function SafeBrowsingUrlCheckerProxy(receiver) {
    this.receiver_ = receiver;
  }
  SafeBrowsingUrlCheckerPtr.prototype.checkUrl = function() {
    return SafeBrowsingUrlCheckerProxy.prototype.checkUrl
        .apply(this.ptr.getProxy(), arguments);
  };

  SafeBrowsingUrlCheckerProxy.prototype.checkUrl = function(url, method) {
    var params_ = new SafeBrowsingUrlChecker_CheckUrl_Params();
    params_.url = url;
    params_.method = method;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kSafeBrowsingUrlChecker_CheckUrl_Name,
          codec.align(SafeBrowsingUrlChecker_CheckUrl_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(SafeBrowsingUrlChecker_CheckUrl_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(SafeBrowsingUrlChecker_CheckUrl_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function SafeBrowsingUrlCheckerStub(delegate) {
    this.delegate_ = delegate;
  }
  SafeBrowsingUrlCheckerStub.prototype.checkUrl = function(url, method) {
    return this.delegate_ && this.delegate_.checkUrl && this.delegate_.checkUrl(url, method);
  }

  SafeBrowsingUrlCheckerStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  SafeBrowsingUrlCheckerStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kSafeBrowsingUrlChecker_CheckUrl_Name:
      var params = reader.decodeStruct(SafeBrowsingUrlChecker_CheckUrl_Params);
      this.checkUrl(params.url, params.method).then(function(response) {
        var responseParams =
            new SafeBrowsingUrlChecker_CheckUrl_ResponseParams();
        responseParams.slowCheckNotifier = response.slowCheckNotifier;
        responseParams.proceed = response.proceed;
        responseParams.showedInterstitial = response.showedInterstitial;
        var builder = new codec.MessageV1Builder(
            kSafeBrowsingUrlChecker_CheckUrl_Name,
            codec.align(SafeBrowsingUrlChecker_CheckUrl_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(SafeBrowsingUrlChecker_CheckUrl_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateSafeBrowsingUrlCheckerRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kSafeBrowsingUrlChecker_CheckUrl_Name:
        if (message.expectsResponse())
          paramsClass = SafeBrowsingUrlChecker_CheckUrl_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateSafeBrowsingUrlCheckerResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kSafeBrowsingUrlChecker_CheckUrl_Name:
        if (message.isResponse())
          paramsClass = SafeBrowsingUrlChecker_CheckUrl_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var SafeBrowsingUrlChecker = {
    name: 'safe_browsing.mojom.SafeBrowsingUrlChecker',
    kVersion: 0,
    ptrClass: SafeBrowsingUrlCheckerPtr,
    proxyClass: SafeBrowsingUrlCheckerProxy,
    stubClass: SafeBrowsingUrlCheckerStub,
    validateRequest: validateSafeBrowsingUrlCheckerRequest,
    validateResponse: validateSafeBrowsingUrlCheckerResponse,
  };
  SafeBrowsingUrlCheckerStub.prototype.validator = validateSafeBrowsingUrlCheckerRequest;
  SafeBrowsingUrlCheckerProxy.prototype.validator = validateSafeBrowsingUrlCheckerResponse;
  var kUrlCheckNotifier_OnCompleteCheck_Name = 0;

  function UrlCheckNotifierPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(UrlCheckNotifier,
                                                   handleOrPtrInfo);
  }

  function UrlCheckNotifierAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        UrlCheckNotifier, associatedInterfacePtrInfo);
  }

  UrlCheckNotifierAssociatedPtr.prototype =
      Object.create(UrlCheckNotifierPtr.prototype);
  UrlCheckNotifierAssociatedPtr.prototype.constructor =
      UrlCheckNotifierAssociatedPtr;

  function UrlCheckNotifierProxy(receiver) {
    this.receiver_ = receiver;
  }
  UrlCheckNotifierPtr.prototype.onCompleteCheck = function() {
    return UrlCheckNotifierProxy.prototype.onCompleteCheck
        .apply(this.ptr.getProxy(), arguments);
  };

  UrlCheckNotifierProxy.prototype.onCompleteCheck = function(proceed, showedInterstitial) {
    var params_ = new UrlCheckNotifier_OnCompleteCheck_Params();
    params_.proceed = proceed;
    params_.showedInterstitial = showedInterstitial;
    var builder = new codec.MessageV0Builder(
        kUrlCheckNotifier_OnCompleteCheck_Name,
        codec.align(UrlCheckNotifier_OnCompleteCheck_Params.encodedSize));
    builder.encodeStruct(UrlCheckNotifier_OnCompleteCheck_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function UrlCheckNotifierStub(delegate) {
    this.delegate_ = delegate;
  }
  UrlCheckNotifierStub.prototype.onCompleteCheck = function(proceed, showedInterstitial) {
    return this.delegate_ && this.delegate_.onCompleteCheck && this.delegate_.onCompleteCheck(proceed, showedInterstitial);
  }

  UrlCheckNotifierStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kUrlCheckNotifier_OnCompleteCheck_Name:
      var params = reader.decodeStruct(UrlCheckNotifier_OnCompleteCheck_Params);
      this.onCompleteCheck(params.proceed, params.showedInterstitial);
      return true;
    default:
      return false;
    }
  };

  UrlCheckNotifierStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateUrlCheckNotifierRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kUrlCheckNotifier_OnCompleteCheck_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = UrlCheckNotifier_OnCompleteCheck_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateUrlCheckNotifierResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var UrlCheckNotifier = {
    name: 'safe_browsing.mojom.UrlCheckNotifier',
    kVersion: 0,
    ptrClass: UrlCheckNotifierPtr,
    proxyClass: UrlCheckNotifierProxy,
    stubClass: UrlCheckNotifierStub,
    validateRequest: validateUrlCheckNotifierRequest,
    validateResponse: null,
  };
  UrlCheckNotifierStub.prototype.validator = validateUrlCheckNotifierRequest;
  UrlCheckNotifierProxy.prototype.validator = null;
  var kThreatReporter_GetThreatDOMDetails_Name = 0;

  function ThreatReporterPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(ThreatReporter,
                                                   handleOrPtrInfo);
  }

  function ThreatReporterAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        ThreatReporter, associatedInterfacePtrInfo);
  }

  ThreatReporterAssociatedPtr.prototype =
      Object.create(ThreatReporterPtr.prototype);
  ThreatReporterAssociatedPtr.prototype.constructor =
      ThreatReporterAssociatedPtr;

  function ThreatReporterProxy(receiver) {
    this.receiver_ = receiver;
  }
  ThreatReporterPtr.prototype.getThreatDOMDetails = function() {
    return ThreatReporterProxy.prototype.getThreatDOMDetails
        .apply(this.ptr.getProxy(), arguments);
  };

  ThreatReporterProxy.prototype.getThreatDOMDetails = function() {
    var params_ = new ThreatReporter_GetThreatDOMDetails_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kThreatReporter_GetThreatDOMDetails_Name,
          codec.align(ThreatReporter_GetThreatDOMDetails_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ThreatReporter_GetThreatDOMDetails_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ThreatReporter_GetThreatDOMDetails_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function ThreatReporterStub(delegate) {
    this.delegate_ = delegate;
  }
  ThreatReporterStub.prototype.getThreatDOMDetails = function() {
    return this.delegate_ && this.delegate_.getThreatDOMDetails && this.delegate_.getThreatDOMDetails();
  }

  ThreatReporterStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  ThreatReporterStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kThreatReporter_GetThreatDOMDetails_Name:
      var params = reader.decodeStruct(ThreatReporter_GetThreatDOMDetails_Params);
      this.getThreatDOMDetails().then(function(response) {
        var responseParams =
            new ThreatReporter_GetThreatDOMDetails_ResponseParams();
        responseParams.nodes = response.nodes;
        var builder = new codec.MessageV1Builder(
            kThreatReporter_GetThreatDOMDetails_Name,
            codec.align(ThreatReporter_GetThreatDOMDetails_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ThreatReporter_GetThreatDOMDetails_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateThreatReporterRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kThreatReporter_GetThreatDOMDetails_Name:
        if (message.expectsResponse())
          paramsClass = ThreatReporter_GetThreatDOMDetails_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateThreatReporterResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kThreatReporter_GetThreatDOMDetails_Name:
        if (message.isResponse())
          paramsClass = ThreatReporter_GetThreatDOMDetails_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var ThreatReporter = {
    name: 'safe_browsing.mojom.ThreatReporter',
    kVersion: 0,
    ptrClass: ThreatReporterPtr,
    proxyClass: ThreatReporterProxy,
    stubClass: ThreatReporterStub,
    validateRequest: validateThreatReporterRequest,
    validateResponse: validateThreatReporterResponse,
  };
  ThreatReporterStub.prototype.validator = validateThreatReporterRequest;
  ThreatReporterProxy.prototype.validator = validateThreatReporterResponse;
  var kPhishingModelSetter_SetPhishingModel_Name = 0;

  function PhishingModelSetterPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(PhishingModelSetter,
                                                   handleOrPtrInfo);
  }

  function PhishingModelSetterAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        PhishingModelSetter, associatedInterfacePtrInfo);
  }

  PhishingModelSetterAssociatedPtr.prototype =
      Object.create(PhishingModelSetterPtr.prototype);
  PhishingModelSetterAssociatedPtr.prototype.constructor =
      PhishingModelSetterAssociatedPtr;

  function PhishingModelSetterProxy(receiver) {
    this.receiver_ = receiver;
  }
  PhishingModelSetterPtr.prototype.setPhishingModel = function() {
    return PhishingModelSetterProxy.prototype.setPhishingModel
        .apply(this.ptr.getProxy(), arguments);
  };

  PhishingModelSetterProxy.prototype.setPhishingModel = function(model) {
    var params_ = new PhishingModelSetter_SetPhishingModel_Params();
    params_.model = model;
    var builder = new codec.MessageV0Builder(
        kPhishingModelSetter_SetPhishingModel_Name,
        codec.align(PhishingModelSetter_SetPhishingModel_Params.encodedSize));
    builder.encodeStruct(PhishingModelSetter_SetPhishingModel_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function PhishingModelSetterStub(delegate) {
    this.delegate_ = delegate;
  }
  PhishingModelSetterStub.prototype.setPhishingModel = function(model) {
    return this.delegate_ && this.delegate_.setPhishingModel && this.delegate_.setPhishingModel(model);
  }

  PhishingModelSetterStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPhishingModelSetter_SetPhishingModel_Name:
      var params = reader.decodeStruct(PhishingModelSetter_SetPhishingModel_Params);
      this.setPhishingModel(params.model);
      return true;
    default:
      return false;
    }
  };

  PhishingModelSetterStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validatePhishingModelSetterRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kPhishingModelSetter_SetPhishingModel_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PhishingModelSetter_SetPhishingModel_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validatePhishingModelSetterResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var PhishingModelSetter = {
    name: 'safe_browsing.mojom.PhishingModelSetter',
    kVersion: 0,
    ptrClass: PhishingModelSetterPtr,
    proxyClass: PhishingModelSetterProxy,
    stubClass: PhishingModelSetterStub,
    validateRequest: validatePhishingModelSetterRequest,
    validateResponse: null,
  };
  PhishingModelSetterStub.prototype.validator = validatePhishingModelSetterRequest;
  PhishingModelSetterProxy.prototype.validator = null;
  exports.PhishingDetectorResult = PhishingDetectorResult;
  exports.AttributeNameValue = AttributeNameValue;
  exports.ThreatDOMDetailsNode = ThreatDOMDetailsNode;
  exports.SafeBrowsing = SafeBrowsing;
  exports.SafeBrowsingPtr = SafeBrowsingPtr;
  exports.SafeBrowsingAssociatedPtr = SafeBrowsingAssociatedPtr;
  exports.SafeBrowsingUrlChecker = SafeBrowsingUrlChecker;
  exports.SafeBrowsingUrlCheckerPtr = SafeBrowsingUrlCheckerPtr;
  exports.SafeBrowsingUrlCheckerAssociatedPtr = SafeBrowsingUrlCheckerAssociatedPtr;
  exports.UrlCheckNotifier = UrlCheckNotifier;
  exports.UrlCheckNotifierPtr = UrlCheckNotifierPtr;
  exports.UrlCheckNotifierAssociatedPtr = UrlCheckNotifierAssociatedPtr;
  exports.ThreatReporter = ThreatReporter;
  exports.ThreatReporterPtr = ThreatReporterPtr;
  exports.ThreatReporterAssociatedPtr = ThreatReporterAssociatedPtr;
  exports.PhishingModelSetter = PhishingModelSetter;
  exports.PhishingModelSetterPtr = PhishingModelSetterPtr;
  exports.PhishingModelSetterAssociatedPtr = PhishingModelSetterAssociatedPtr;
})();