// components/spellcheck/common/spellcheck.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'components/spellcheck/common/spellcheck.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('spellcheck.mojom');
  var file$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/file.mojom', '../../../mojo/public/mojom/base/file.mojom.js');
  }
  var string16$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/string16.mojom', '../../../mojo/public/mojom/base/string16.mojom.js');
  }


  var Decoration = {};
  Decoration.kSpelling = 0;
  Decoration.kGrammar = Decoration.kSpelling + 1;
  Decoration.MIN_VALUE = 0,
  Decoration.MAX_VALUE = 1,

  Decoration.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
      return true;
    }
    return false;
  };

  Decoration.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function SpellCheckBDictLanguage(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SpellCheckBDictLanguage.prototype.initDefaults_ = function() {
    this.file = null;
    this.language = null;
  };
  SpellCheckBDictLanguage.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SpellCheckBDictLanguage.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SpellCheckBDictLanguage.file
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, file$.File, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SpellCheckBDictLanguage.language
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SpellCheckBDictLanguage.encodedSize = codec.kStructHeaderSize + 16;

  SpellCheckBDictLanguage.decode = function(decoder) {
    var packed;
    var val = new SpellCheckBDictLanguage();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.file = decoder.decodeStructPointer(file$.File);
    val.language = decoder.decodeStruct(codec.String);
    return val;
  };

  SpellCheckBDictLanguage.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SpellCheckBDictLanguage.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(file$.File, val.file);
    encoder.encodeStruct(codec.String, val.language);
  };
  function SpellCheckResult(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SpellCheckResult.prototype.initDefaults_ = function() {
    this.decoration = 0;
    this.location = 0;
    this.length = 0;
    this.replacements = null;
  };
  SpellCheckResult.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SpellCheckResult.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SpellCheckResult.decoration
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, Decoration);
    if (err !== validator.validationError.NONE)
        return err;




    // validate SpellCheckResult.replacements
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 16, 8, new codec.PointerTo(string16$.String16), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SpellCheckResult.encodedSize = codec.kStructHeaderSize + 24;

  SpellCheckResult.decode = function(decoder) {
    var packed;
    var val = new SpellCheckResult();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.decoration = decoder.decodeStruct(codec.Int32);
    val.location = decoder.decodeStruct(codec.Int32);
    val.length = decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.replacements = decoder.decodeArrayPointer(new codec.PointerTo(string16$.String16));
    return val;
  };

  SpellCheckResult.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SpellCheckResult.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.decoration);
    encoder.encodeStruct(codec.Int32, val.location);
    encoder.encodeStruct(codec.Int32, val.length);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeArrayPointer(new codec.PointerTo(string16$.String16), val.replacements);
  };
  function SpellChecker_Initialize_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SpellChecker_Initialize_Params.prototype.initDefaults_ = function() {
    this.dictionaries = null;
    this.customWords = null;
    this.enable = false;
  };
  SpellChecker_Initialize_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SpellChecker_Initialize_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SpellChecker_Initialize_Params.dictionaries
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(SpellCheckBDictLanguage), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SpellChecker_Initialize_Params.customWords
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 8, codec.String, false, [0, 0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  SpellChecker_Initialize_Params.encodedSize = codec.kStructHeaderSize + 24;

  SpellChecker_Initialize_Params.decode = function(decoder) {
    var packed;
    var val = new SpellChecker_Initialize_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.dictionaries = decoder.decodeArrayPointer(new codec.PointerTo(SpellCheckBDictLanguage));
    val.customWords = decoder.decodeArrayPointer(codec.String);
    packed = decoder.readUint8();
    val.enable = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  SpellChecker_Initialize_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SpellChecker_Initialize_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(SpellCheckBDictLanguage), val.dictionaries);
    encoder.encodeArrayPointer(codec.String, val.customWords);
    packed = 0;
    packed |= (val.enable & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function SpellChecker_CustomDictionaryChanged_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SpellChecker_CustomDictionaryChanged_Params.prototype.initDefaults_ = function() {
    this.wordsAdded = null;
    this.wordsRemoved = null;
  };
  SpellChecker_CustomDictionaryChanged_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SpellChecker_CustomDictionaryChanged_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SpellChecker_CustomDictionaryChanged_Params.wordsAdded
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, codec.String, false, [0, 0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SpellChecker_CustomDictionaryChanged_Params.wordsRemoved
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 8, codec.String, false, [0, 0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SpellChecker_CustomDictionaryChanged_Params.encodedSize = codec.kStructHeaderSize + 16;

  SpellChecker_CustomDictionaryChanged_Params.decode = function(decoder) {
    var packed;
    var val = new SpellChecker_CustomDictionaryChanged_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.wordsAdded = decoder.decodeArrayPointer(codec.String);
    val.wordsRemoved = decoder.decodeArrayPointer(codec.String);
    return val;
  };

  SpellChecker_CustomDictionaryChanged_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SpellChecker_CustomDictionaryChanged_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(codec.String, val.wordsAdded);
    encoder.encodeArrayPointer(codec.String, val.wordsRemoved);
  };
  function SpellCheckHost_RequestDictionary_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SpellCheckHost_RequestDictionary_Params.prototype.initDefaults_ = function() {
  };
  SpellCheckHost_RequestDictionary_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SpellCheckHost_RequestDictionary_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SpellCheckHost_RequestDictionary_Params.encodedSize = codec.kStructHeaderSize + 0;

  SpellCheckHost_RequestDictionary_Params.decode = function(decoder) {
    var packed;
    var val = new SpellCheckHost_RequestDictionary_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  SpellCheckHost_RequestDictionary_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SpellCheckHost_RequestDictionary_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function SpellCheckHost_NotifyChecked_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SpellCheckHost_NotifyChecked_Params.prototype.initDefaults_ = function() {
    this.word = null;
    this.misspelled = false;
  };
  SpellCheckHost_NotifyChecked_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SpellCheckHost_NotifyChecked_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SpellCheckHost_NotifyChecked_Params.word
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, string16$.String16, false);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  SpellCheckHost_NotifyChecked_Params.encodedSize = codec.kStructHeaderSize + 16;

  SpellCheckHost_NotifyChecked_Params.decode = function(decoder) {
    var packed;
    var val = new SpellCheckHost_NotifyChecked_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.word = decoder.decodeStructPointer(string16$.String16);
    packed = decoder.readUint8();
    val.misspelled = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  SpellCheckHost_NotifyChecked_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SpellCheckHost_NotifyChecked_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(string16$.String16, val.word);
    packed = 0;
    packed |= (val.misspelled & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function SpellCheckHost_RequestTextCheck_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SpellCheckHost_RequestTextCheck_Params.prototype.initDefaults_ = function() {
    this.text = null;
    this.routeId = 0;
  };
  SpellCheckHost_RequestTextCheck_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SpellCheckHost_RequestTextCheck_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SpellCheckHost_RequestTextCheck_Params.text
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, string16$.String16, false);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  SpellCheckHost_RequestTextCheck_Params.encodedSize = codec.kStructHeaderSize + 16;

  SpellCheckHost_RequestTextCheck_Params.decode = function(decoder) {
    var packed;
    var val = new SpellCheckHost_RequestTextCheck_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.text = decoder.decodeStructPointer(string16$.String16);
    val.routeId = decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  SpellCheckHost_RequestTextCheck_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SpellCheckHost_RequestTextCheck_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(string16$.String16, val.text);
    encoder.encodeStruct(codec.Int32, val.routeId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function SpellCheckHost_RequestTextCheck_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SpellCheckHost_RequestTextCheck_ResponseParams.prototype.initDefaults_ = function() {
    this.results = null;
  };
  SpellCheckHost_RequestTextCheck_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SpellCheckHost_RequestTextCheck_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SpellCheckHost_RequestTextCheck_ResponseParams.results
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(SpellCheckResult), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SpellCheckHost_RequestTextCheck_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  SpellCheckHost_RequestTextCheck_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new SpellCheckHost_RequestTextCheck_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.results = decoder.decodeArrayPointer(new codec.PointerTo(SpellCheckResult));
    return val;
  };

  SpellCheckHost_RequestTextCheck_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SpellCheckHost_RequestTextCheck_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(SpellCheckResult), val.results);
  };
  function SpellCheckHost_DisconnectSessionBridge_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SpellCheckHost_DisconnectSessionBridge_Params.prototype.initDefaults_ = function() {
  };
  SpellCheckHost_DisconnectSessionBridge_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SpellCheckHost_DisconnectSessionBridge_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SpellCheckHost_DisconnectSessionBridge_Params.encodedSize = codec.kStructHeaderSize + 0;

  SpellCheckHost_DisconnectSessionBridge_Params.decode = function(decoder) {
    var packed;
    var val = new SpellCheckHost_DisconnectSessionBridge_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  SpellCheckHost_DisconnectSessionBridge_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SpellCheckHost_DisconnectSessionBridge_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function SpellCheckHost_CheckSpelling_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SpellCheckHost_CheckSpelling_Params.prototype.initDefaults_ = function() {
    this.word = null;
    this.routeId = 0;
  };
  SpellCheckHost_CheckSpelling_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SpellCheckHost_CheckSpelling_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SpellCheckHost_CheckSpelling_Params.word
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, string16$.String16, false);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  SpellCheckHost_CheckSpelling_Params.encodedSize = codec.kStructHeaderSize + 16;

  SpellCheckHost_CheckSpelling_Params.decode = function(decoder) {
    var packed;
    var val = new SpellCheckHost_CheckSpelling_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.word = decoder.decodeStructPointer(string16$.String16);
    val.routeId = decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  SpellCheckHost_CheckSpelling_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SpellCheckHost_CheckSpelling_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(string16$.String16, val.word);
    encoder.encodeStruct(codec.Int32, val.routeId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function SpellCheckHost_CheckSpelling_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SpellCheckHost_CheckSpelling_ResponseParams.prototype.initDefaults_ = function() {
    this.correct = false;
  };
  SpellCheckHost_CheckSpelling_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SpellCheckHost_CheckSpelling_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  SpellCheckHost_CheckSpelling_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  SpellCheckHost_CheckSpelling_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new SpellCheckHost_CheckSpelling_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.correct = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  SpellCheckHost_CheckSpelling_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SpellCheckHost_CheckSpelling_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.correct & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function SpellCheckHost_FillSuggestionList_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SpellCheckHost_FillSuggestionList_Params.prototype.initDefaults_ = function() {
    this.word = null;
  };
  SpellCheckHost_FillSuggestionList_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SpellCheckHost_FillSuggestionList_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SpellCheckHost_FillSuggestionList_Params.word
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, string16$.String16, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SpellCheckHost_FillSuggestionList_Params.encodedSize = codec.kStructHeaderSize + 8;

  SpellCheckHost_FillSuggestionList_Params.decode = function(decoder) {
    var packed;
    var val = new SpellCheckHost_FillSuggestionList_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.word = decoder.decodeStructPointer(string16$.String16);
    return val;
  };

  SpellCheckHost_FillSuggestionList_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SpellCheckHost_FillSuggestionList_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(string16$.String16, val.word);
  };
  function SpellCheckHost_FillSuggestionList_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SpellCheckHost_FillSuggestionList_ResponseParams.prototype.initDefaults_ = function() {
    this.suggestions = null;
  };
  SpellCheckHost_FillSuggestionList_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SpellCheckHost_FillSuggestionList_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SpellCheckHost_FillSuggestionList_ResponseParams.suggestions
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(string16$.String16), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SpellCheckHost_FillSuggestionList_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  SpellCheckHost_FillSuggestionList_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new SpellCheckHost_FillSuggestionList_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.suggestions = decoder.decodeArrayPointer(new codec.PointerTo(string16$.String16));
    return val;
  };

  SpellCheckHost_FillSuggestionList_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SpellCheckHost_FillSuggestionList_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(string16$.String16), val.suggestions);
  };
  var kSpellChecker_Initialize_Name = 0;
  var kSpellChecker_CustomDictionaryChanged_Name = 1;

  function SpellCheckerPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(SpellChecker,
                                                   handleOrPtrInfo);
  }

  function SpellCheckerAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        SpellChecker, associatedInterfacePtrInfo);
  }

  SpellCheckerAssociatedPtr.prototype =
      Object.create(SpellCheckerPtr.prototype);
  SpellCheckerAssociatedPtr.prototype.constructor =
      SpellCheckerAssociatedPtr;

  function SpellCheckerProxy(receiver) {
    this.receiver_ = receiver;
  }
  SpellCheckerPtr.prototype.initialize = function() {
    return SpellCheckerProxy.prototype.initialize
        .apply(this.ptr.getProxy(), arguments);
  };

  SpellCheckerProxy.prototype.initialize = function(dictionaries, customWords, enable) {
    var params_ = new SpellChecker_Initialize_Params();
    params_.dictionaries = dictionaries;
    params_.customWords = customWords;
    params_.enable = enable;
    var builder = new codec.MessageV0Builder(
        kSpellChecker_Initialize_Name,
        codec.align(SpellChecker_Initialize_Params.encodedSize));
    builder.encodeStruct(SpellChecker_Initialize_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  SpellCheckerPtr.prototype.customDictionaryChanged = function() {
    return SpellCheckerProxy.prototype.customDictionaryChanged
        .apply(this.ptr.getProxy(), arguments);
  };

  SpellCheckerProxy.prototype.customDictionaryChanged = function(wordsAdded, wordsRemoved) {
    var params_ = new SpellChecker_CustomDictionaryChanged_Params();
    params_.wordsAdded = wordsAdded;
    params_.wordsRemoved = wordsRemoved;
    var builder = new codec.MessageV0Builder(
        kSpellChecker_CustomDictionaryChanged_Name,
        codec.align(SpellChecker_CustomDictionaryChanged_Params.encodedSize));
    builder.encodeStruct(SpellChecker_CustomDictionaryChanged_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function SpellCheckerStub(delegate) {
    this.delegate_ = delegate;
  }
  SpellCheckerStub.prototype.initialize = function(dictionaries, customWords, enable) {
    return this.delegate_ && this.delegate_.initialize && this.delegate_.initialize(dictionaries, customWords, enable);
  }
  SpellCheckerStub.prototype.customDictionaryChanged = function(wordsAdded, wordsRemoved) {
    return this.delegate_ && this.delegate_.customDictionaryChanged && this.delegate_.customDictionaryChanged(wordsAdded, wordsRemoved);
  }

  SpellCheckerStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kSpellChecker_Initialize_Name:
      var params = reader.decodeStruct(SpellChecker_Initialize_Params);
      this.initialize(params.dictionaries, params.customWords, params.enable);
      return true;
    case kSpellChecker_CustomDictionaryChanged_Name:
      var params = reader.decodeStruct(SpellChecker_CustomDictionaryChanged_Params);
      this.customDictionaryChanged(params.wordsAdded, params.wordsRemoved);
      return true;
    default:
      return false;
    }
  };

  SpellCheckerStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateSpellCheckerRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kSpellChecker_Initialize_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = SpellChecker_Initialize_Params;
      break;
      case kSpellChecker_CustomDictionaryChanged_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = SpellChecker_CustomDictionaryChanged_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateSpellCheckerResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var SpellChecker = {
    name: 'spellcheck.mojom.SpellChecker',
    kVersion: 0,
    ptrClass: SpellCheckerPtr,
    proxyClass: SpellCheckerProxy,
    stubClass: SpellCheckerStub,
    validateRequest: validateSpellCheckerRequest,
    validateResponse: null,
  };
  SpellCheckerStub.prototype.validator = validateSpellCheckerRequest;
  SpellCheckerProxy.prototype.validator = null;
  var kSpellCheckHost_RequestDictionary_Name = 0;
  var kSpellCheckHost_NotifyChecked_Name = 1;
  var kSpellCheckHost_RequestTextCheck_Name = 2;
  var kSpellCheckHost_DisconnectSessionBridge_Name = 3;
  var kSpellCheckHost_CheckSpelling_Name = 4;
  var kSpellCheckHost_FillSuggestionList_Name = 5;

  function SpellCheckHostPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(SpellCheckHost,
                                                   handleOrPtrInfo);
  }

  function SpellCheckHostAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        SpellCheckHost, associatedInterfacePtrInfo);
  }

  SpellCheckHostAssociatedPtr.prototype =
      Object.create(SpellCheckHostPtr.prototype);
  SpellCheckHostAssociatedPtr.prototype.constructor =
      SpellCheckHostAssociatedPtr;

  function SpellCheckHostProxy(receiver) {
    this.receiver_ = receiver;
  }
  SpellCheckHostPtr.prototype.requestDictionary = function() {
    return SpellCheckHostProxy.prototype.requestDictionary
        .apply(this.ptr.getProxy(), arguments);
  };

  SpellCheckHostProxy.prototype.requestDictionary = function() {
    var params_ = new SpellCheckHost_RequestDictionary_Params();
    var builder = new codec.MessageV0Builder(
        kSpellCheckHost_RequestDictionary_Name,
        codec.align(SpellCheckHost_RequestDictionary_Params.encodedSize));
    builder.encodeStruct(SpellCheckHost_RequestDictionary_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  SpellCheckHostPtr.prototype.notifyChecked = function() {
    return SpellCheckHostProxy.prototype.notifyChecked
        .apply(this.ptr.getProxy(), arguments);
  };

  SpellCheckHostProxy.prototype.notifyChecked = function(word, misspelled) {
    var params_ = new SpellCheckHost_NotifyChecked_Params();
    params_.word = word;
    params_.misspelled = misspelled;
    var builder = new codec.MessageV0Builder(
        kSpellCheckHost_NotifyChecked_Name,
        codec.align(SpellCheckHost_NotifyChecked_Params.encodedSize));
    builder.encodeStruct(SpellCheckHost_NotifyChecked_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  SpellCheckHostPtr.prototype.requestTextCheck = function() {
    return SpellCheckHostProxy.prototype.requestTextCheck
        .apply(this.ptr.getProxy(), arguments);
  };

  SpellCheckHostProxy.prototype.requestTextCheck = function(text, routeId) {
    var params_ = new SpellCheckHost_RequestTextCheck_Params();
    params_.text = text;
    params_.routeId = routeId;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kSpellCheckHost_RequestTextCheck_Name,
          codec.align(SpellCheckHost_RequestTextCheck_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(SpellCheckHost_RequestTextCheck_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(SpellCheckHost_RequestTextCheck_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  SpellCheckHostPtr.prototype.disconnectSessionBridge = function() {
    return SpellCheckHostProxy.prototype.disconnectSessionBridge
        .apply(this.ptr.getProxy(), arguments);
  };

  SpellCheckHostProxy.prototype.disconnectSessionBridge = function() {
    var params_ = new SpellCheckHost_DisconnectSessionBridge_Params();
    var builder = new codec.MessageV0Builder(
        kSpellCheckHost_DisconnectSessionBridge_Name,
        codec.align(SpellCheckHost_DisconnectSessionBridge_Params.encodedSize));
    builder.encodeStruct(SpellCheckHost_DisconnectSessionBridge_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  SpellCheckHostPtr.prototype.checkSpelling = function() {
    return SpellCheckHostProxy.prototype.checkSpelling
        .apply(this.ptr.getProxy(), arguments);
  };

  SpellCheckHostProxy.prototype.checkSpelling = function(word, routeId) {
    var params_ = new SpellCheckHost_CheckSpelling_Params();
    params_.word = word;
    params_.routeId = routeId;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kSpellCheckHost_CheckSpelling_Name,
          codec.align(SpellCheckHost_CheckSpelling_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(SpellCheckHost_CheckSpelling_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(SpellCheckHost_CheckSpelling_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  SpellCheckHostPtr.prototype.fillSuggestionList = function() {
    return SpellCheckHostProxy.prototype.fillSuggestionList
        .apply(this.ptr.getProxy(), arguments);
  };

  SpellCheckHostProxy.prototype.fillSuggestionList = function(word) {
    var params_ = new SpellCheckHost_FillSuggestionList_Params();
    params_.word = word;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kSpellCheckHost_FillSuggestionList_Name,
          codec.align(SpellCheckHost_FillSuggestionList_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(SpellCheckHost_FillSuggestionList_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(SpellCheckHost_FillSuggestionList_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function SpellCheckHostStub(delegate) {
    this.delegate_ = delegate;
  }
  SpellCheckHostStub.prototype.requestDictionary = function() {
    return this.delegate_ && this.delegate_.requestDictionary && this.delegate_.requestDictionary();
  }
  SpellCheckHostStub.prototype.notifyChecked = function(word, misspelled) {
    return this.delegate_ && this.delegate_.notifyChecked && this.delegate_.notifyChecked(word, misspelled);
  }
  SpellCheckHostStub.prototype.requestTextCheck = function(text, routeId) {
    return this.delegate_ && this.delegate_.requestTextCheck && this.delegate_.requestTextCheck(text, routeId);
  }
  SpellCheckHostStub.prototype.disconnectSessionBridge = function() {
    return this.delegate_ && this.delegate_.disconnectSessionBridge && this.delegate_.disconnectSessionBridge();
  }
  SpellCheckHostStub.prototype.checkSpelling = function(word, routeId) {
    return this.delegate_ && this.delegate_.checkSpelling && this.delegate_.checkSpelling(word, routeId);
  }
  SpellCheckHostStub.prototype.fillSuggestionList = function(word) {
    return this.delegate_ && this.delegate_.fillSuggestionList && this.delegate_.fillSuggestionList(word);
  }

  SpellCheckHostStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kSpellCheckHost_RequestDictionary_Name:
      var params = reader.decodeStruct(SpellCheckHost_RequestDictionary_Params);
      this.requestDictionary();
      return true;
    case kSpellCheckHost_NotifyChecked_Name:
      var params = reader.decodeStruct(SpellCheckHost_NotifyChecked_Params);
      this.notifyChecked(params.word, params.misspelled);
      return true;
    case kSpellCheckHost_DisconnectSessionBridge_Name:
      var params = reader.decodeStruct(SpellCheckHost_DisconnectSessionBridge_Params);
      this.disconnectSessionBridge();
      return true;
    default:
      return false;
    }
  };

  SpellCheckHostStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kSpellCheckHost_RequestTextCheck_Name:
      var params = reader.decodeStruct(SpellCheckHost_RequestTextCheck_Params);
      this.requestTextCheck(params.text, params.routeId).then(function(response) {
        var responseParams =
            new SpellCheckHost_RequestTextCheck_ResponseParams();
        responseParams.results = response.results;
        var builder = new codec.MessageV1Builder(
            kSpellCheckHost_RequestTextCheck_Name,
            codec.align(SpellCheckHost_RequestTextCheck_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(SpellCheckHost_RequestTextCheck_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kSpellCheckHost_CheckSpelling_Name:
      var params = reader.decodeStruct(SpellCheckHost_CheckSpelling_Params);
      this.checkSpelling(params.word, params.routeId).then(function(response) {
        var responseParams =
            new SpellCheckHost_CheckSpelling_ResponseParams();
        responseParams.correct = response.correct;
        var builder = new codec.MessageV1Builder(
            kSpellCheckHost_CheckSpelling_Name,
            codec.align(SpellCheckHost_CheckSpelling_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(SpellCheckHost_CheckSpelling_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kSpellCheckHost_FillSuggestionList_Name:
      var params = reader.decodeStruct(SpellCheckHost_FillSuggestionList_Params);
      this.fillSuggestionList(params.word).then(function(response) {
        var responseParams =
            new SpellCheckHost_FillSuggestionList_ResponseParams();
        responseParams.suggestions = response.suggestions;
        var builder = new codec.MessageV1Builder(
            kSpellCheckHost_FillSuggestionList_Name,
            codec.align(SpellCheckHost_FillSuggestionList_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(SpellCheckHost_FillSuggestionList_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateSpellCheckHostRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kSpellCheckHost_RequestDictionary_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = SpellCheckHost_RequestDictionary_Params;
      break;
      case kSpellCheckHost_NotifyChecked_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = SpellCheckHost_NotifyChecked_Params;
      break;
      case kSpellCheckHost_RequestTextCheck_Name:
        if (message.expectsResponse())
          paramsClass = SpellCheckHost_RequestTextCheck_Params;
      break;
      case kSpellCheckHost_DisconnectSessionBridge_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = SpellCheckHost_DisconnectSessionBridge_Params;
      break;
      case kSpellCheckHost_CheckSpelling_Name:
        if (message.expectsResponse())
          paramsClass = SpellCheckHost_CheckSpelling_Params;
      break;
      case kSpellCheckHost_FillSuggestionList_Name:
        if (message.expectsResponse())
          paramsClass = SpellCheckHost_FillSuggestionList_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateSpellCheckHostResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kSpellCheckHost_RequestTextCheck_Name:
        if (message.isResponse())
          paramsClass = SpellCheckHost_RequestTextCheck_ResponseParams;
        break;
      case kSpellCheckHost_CheckSpelling_Name:
        if (message.isResponse())
          paramsClass = SpellCheckHost_CheckSpelling_ResponseParams;
        break;
      case kSpellCheckHost_FillSuggestionList_Name:
        if (message.isResponse())
          paramsClass = SpellCheckHost_FillSuggestionList_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var SpellCheckHost = {
    name: 'spellcheck.mojom.SpellCheckHost',
    kVersion: 0,
    ptrClass: SpellCheckHostPtr,
    proxyClass: SpellCheckHostProxy,
    stubClass: SpellCheckHostStub,
    validateRequest: validateSpellCheckHostRequest,
    validateResponse: validateSpellCheckHostResponse,
  };
  SpellCheckHostStub.prototype.validator = validateSpellCheckHostRequest;
  SpellCheckHostProxy.prototype.validator = validateSpellCheckHostResponse;
  exports.Decoration = Decoration;
  exports.SpellCheckBDictLanguage = SpellCheckBDictLanguage;
  exports.SpellCheckResult = SpellCheckResult;
  exports.SpellChecker = SpellChecker;
  exports.SpellCheckerPtr = SpellCheckerPtr;
  exports.SpellCheckerAssociatedPtr = SpellCheckerAssociatedPtr;
  exports.SpellCheckHost = SpellCheckHost;
  exports.SpellCheckHostPtr = SpellCheckHostPtr;
  exports.SpellCheckHostAssociatedPtr = SpellCheckHostAssociatedPtr;
})();