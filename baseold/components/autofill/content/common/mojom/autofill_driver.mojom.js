// components/autofill/content/common/mojom/autofill_driver.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'components/autofill/content/common/mojom/autofill_driver.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('autofill.mojom');
  var autofill_types$ =
      mojo.internal.exposeNamespace('autofill.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'components/autofill/core/common/mojom/autofill_types.mojom', '../../../core/common/mojom/autofill_types.mojom.js');
  }
  var string16$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/string16.mojom', '../../../../../mojo/public/mojom/base/string16.mojom.js');
  }
  var text_direction$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/text_direction.mojom', '../../../../../mojo/public/mojom/base/text_direction.mojom.js');
  }
  var time$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/time.mojom', '../../../../../mojo/public/mojom/base/time.mojom.js');
  }
  var geometry$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/geometry/mojom/geometry.mojom', '../../../../../ui/gfx/geometry/mojom/geometry.mojom.js');
  }
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../../../../url/mojom/url.mojom.js');
  }



  function AutofillDriver_FormsSeen_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AutofillDriver_FormsSeen_Params.prototype.initDefaults_ = function() {
    this.forms = null;
    this.timestamp = null;
  };
  AutofillDriver_FormsSeen_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AutofillDriver_FormsSeen_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AutofillDriver_FormsSeen_Params.forms
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(autofill_types$.FormData), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AutofillDriver_FormsSeen_Params.timestamp
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, time$.TimeTicks, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AutofillDriver_FormsSeen_Params.encodedSize = codec.kStructHeaderSize + 16;

  AutofillDriver_FormsSeen_Params.decode = function(decoder) {
    var packed;
    var val = new AutofillDriver_FormsSeen_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.forms = decoder.decodeArrayPointer(new codec.PointerTo(autofill_types$.FormData));
    val.timestamp = decoder.decodeStructPointer(time$.TimeTicks);
    return val;
  };

  AutofillDriver_FormsSeen_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AutofillDriver_FormsSeen_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(autofill_types$.FormData), val.forms);
    encoder.encodeStructPointer(time$.TimeTicks, val.timestamp);
  };
  function AutofillDriver_FormSubmitted_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AutofillDriver_FormSubmitted_Params.prototype.initDefaults_ = function() {
    this.form = null;
    this.knownSuccess = false;
    this.source = 0;
  };
  AutofillDriver_FormSubmitted_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AutofillDriver_FormSubmitted_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AutofillDriver_FormSubmitted_Params.form
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, autofill_types$.FormData, false);
    if (err !== validator.validationError.NONE)
        return err;



    // validate AutofillDriver_FormSubmitted_Params.source
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 12, autofill_types$.SubmissionSource);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AutofillDriver_FormSubmitted_Params.encodedSize = codec.kStructHeaderSize + 16;

  AutofillDriver_FormSubmitted_Params.decode = function(decoder) {
    var packed;
    var val = new AutofillDriver_FormSubmitted_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.form = decoder.decodeStructPointer(autofill_types$.FormData);
    packed = decoder.readUint8();
    val.knownSuccess = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.source = decoder.decodeStruct(codec.Int32);
    return val;
  };

  AutofillDriver_FormSubmitted_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AutofillDriver_FormSubmitted_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(autofill_types$.FormData, val.form);
    packed = 0;
    packed |= (val.knownSuccess & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Int32, val.source);
  };
  function AutofillDriver_TextFieldDidChange_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AutofillDriver_TextFieldDidChange_Params.prototype.initDefaults_ = function() {
    this.form = null;
    this.field = null;
    this.boundingBox = null;
    this.timestamp = null;
  };
  AutofillDriver_TextFieldDidChange_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AutofillDriver_TextFieldDidChange_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AutofillDriver_TextFieldDidChange_Params.form
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, autofill_types$.FormData, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AutofillDriver_TextFieldDidChange_Params.field
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, autofill_types$.FormFieldData, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AutofillDriver_TextFieldDidChange_Params.boundingBox
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, geometry$.RectF, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AutofillDriver_TextFieldDidChange_Params.timestamp
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, time$.TimeTicks, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AutofillDriver_TextFieldDidChange_Params.encodedSize = codec.kStructHeaderSize + 32;

  AutofillDriver_TextFieldDidChange_Params.decode = function(decoder) {
    var packed;
    var val = new AutofillDriver_TextFieldDidChange_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.form = decoder.decodeStructPointer(autofill_types$.FormData);
    val.field = decoder.decodeStructPointer(autofill_types$.FormFieldData);
    val.boundingBox = decoder.decodeStructPointer(geometry$.RectF);
    val.timestamp = decoder.decodeStructPointer(time$.TimeTicks);
    return val;
  };

  AutofillDriver_TextFieldDidChange_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AutofillDriver_TextFieldDidChange_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(autofill_types$.FormData, val.form);
    encoder.encodeStructPointer(autofill_types$.FormFieldData, val.field);
    encoder.encodeStructPointer(geometry$.RectF, val.boundingBox);
    encoder.encodeStructPointer(time$.TimeTicks, val.timestamp);
  };
  function AutofillDriver_TextFieldDidScroll_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AutofillDriver_TextFieldDidScroll_Params.prototype.initDefaults_ = function() {
    this.form = null;
    this.field = null;
    this.boundingBox = null;
  };
  AutofillDriver_TextFieldDidScroll_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AutofillDriver_TextFieldDidScroll_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AutofillDriver_TextFieldDidScroll_Params.form
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, autofill_types$.FormData, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AutofillDriver_TextFieldDidScroll_Params.field
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, autofill_types$.FormFieldData, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AutofillDriver_TextFieldDidScroll_Params.boundingBox
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, geometry$.RectF, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AutofillDriver_TextFieldDidScroll_Params.encodedSize = codec.kStructHeaderSize + 24;

  AutofillDriver_TextFieldDidScroll_Params.decode = function(decoder) {
    var packed;
    var val = new AutofillDriver_TextFieldDidScroll_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.form = decoder.decodeStructPointer(autofill_types$.FormData);
    val.field = decoder.decodeStructPointer(autofill_types$.FormFieldData);
    val.boundingBox = decoder.decodeStructPointer(geometry$.RectF);
    return val;
  };

  AutofillDriver_TextFieldDidScroll_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AutofillDriver_TextFieldDidScroll_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(autofill_types$.FormData, val.form);
    encoder.encodeStructPointer(autofill_types$.FormFieldData, val.field);
    encoder.encodeStructPointer(geometry$.RectF, val.boundingBox);
  };
  function AutofillDriver_SelectControlDidChange_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AutofillDriver_SelectControlDidChange_Params.prototype.initDefaults_ = function() {
    this.form = null;
    this.field = null;
    this.boundingBox = null;
  };
  AutofillDriver_SelectControlDidChange_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AutofillDriver_SelectControlDidChange_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AutofillDriver_SelectControlDidChange_Params.form
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, autofill_types$.FormData, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AutofillDriver_SelectControlDidChange_Params.field
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, autofill_types$.FormFieldData, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AutofillDriver_SelectControlDidChange_Params.boundingBox
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, geometry$.RectF, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AutofillDriver_SelectControlDidChange_Params.encodedSize = codec.kStructHeaderSize + 24;

  AutofillDriver_SelectControlDidChange_Params.decode = function(decoder) {
    var packed;
    var val = new AutofillDriver_SelectControlDidChange_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.form = decoder.decodeStructPointer(autofill_types$.FormData);
    val.field = decoder.decodeStructPointer(autofill_types$.FormFieldData);
    val.boundingBox = decoder.decodeStructPointer(geometry$.RectF);
    return val;
  };

  AutofillDriver_SelectControlDidChange_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AutofillDriver_SelectControlDidChange_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(autofill_types$.FormData, val.form);
    encoder.encodeStructPointer(autofill_types$.FormFieldData, val.field);
    encoder.encodeStructPointer(geometry$.RectF, val.boundingBox);
  };
  function AutofillDriver_SelectFieldOptionsDidChange_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AutofillDriver_SelectFieldOptionsDidChange_Params.prototype.initDefaults_ = function() {
    this.form = null;
  };
  AutofillDriver_SelectFieldOptionsDidChange_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AutofillDriver_SelectFieldOptionsDidChange_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AutofillDriver_SelectFieldOptionsDidChange_Params.form
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, autofill_types$.FormData, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AutofillDriver_SelectFieldOptionsDidChange_Params.encodedSize = codec.kStructHeaderSize + 8;

  AutofillDriver_SelectFieldOptionsDidChange_Params.decode = function(decoder) {
    var packed;
    var val = new AutofillDriver_SelectFieldOptionsDidChange_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.form = decoder.decodeStructPointer(autofill_types$.FormData);
    return val;
  };

  AutofillDriver_SelectFieldOptionsDidChange_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AutofillDriver_SelectFieldOptionsDidChange_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(autofill_types$.FormData, val.form);
  };
  function AutofillDriver_QueryFormFieldAutofill_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AutofillDriver_QueryFormFieldAutofill_Params.prototype.initDefaults_ = function() {
    this.id = 0;
    this.autoselectFirstSuggestion = false;
    this.form = null;
    this.field = null;
    this.boundingBox = null;
  };
  AutofillDriver_QueryFormFieldAutofill_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AutofillDriver_QueryFormFieldAutofill_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate AutofillDriver_QueryFormFieldAutofill_Params.form
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, autofill_types$.FormData, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AutofillDriver_QueryFormFieldAutofill_Params.field
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, autofill_types$.FormFieldData, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AutofillDriver_QueryFormFieldAutofill_Params.boundingBox
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, geometry$.RectF, false);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  AutofillDriver_QueryFormFieldAutofill_Params.encodedSize = codec.kStructHeaderSize + 32;

  AutofillDriver_QueryFormFieldAutofill_Params.decode = function(decoder) {
    var packed;
    var val = new AutofillDriver_QueryFormFieldAutofill_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id = decoder.decodeStruct(codec.Int32);
    packed = decoder.readUint8();
    val.autoselectFirstSuggestion = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.form = decoder.decodeStructPointer(autofill_types$.FormData);
    val.field = decoder.decodeStructPointer(autofill_types$.FormFieldData);
    val.boundingBox = decoder.decodeStructPointer(geometry$.RectF);
    return val;
  };

  AutofillDriver_QueryFormFieldAutofill_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AutofillDriver_QueryFormFieldAutofill_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.id);
    packed = 0;
    packed |= (val.autoselectFirstSuggestion & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(autofill_types$.FormData, val.form);
    encoder.encodeStructPointer(autofill_types$.FormFieldData, val.field);
    encoder.encodeStructPointer(geometry$.RectF, val.boundingBox);
  };
  function AutofillDriver_HidePopup_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AutofillDriver_HidePopup_Params.prototype.initDefaults_ = function() {
  };
  AutofillDriver_HidePopup_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AutofillDriver_HidePopup_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AutofillDriver_HidePopup_Params.encodedSize = codec.kStructHeaderSize + 0;

  AutofillDriver_HidePopup_Params.decode = function(decoder) {
    var packed;
    var val = new AutofillDriver_HidePopup_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  AutofillDriver_HidePopup_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AutofillDriver_HidePopup_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function AutofillDriver_FocusNoLongerOnForm_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AutofillDriver_FocusNoLongerOnForm_Params.prototype.initDefaults_ = function() {
  };
  AutofillDriver_FocusNoLongerOnForm_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AutofillDriver_FocusNoLongerOnForm_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AutofillDriver_FocusNoLongerOnForm_Params.encodedSize = codec.kStructHeaderSize + 0;

  AutofillDriver_FocusNoLongerOnForm_Params.decode = function(decoder) {
    var packed;
    var val = new AutofillDriver_FocusNoLongerOnForm_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  AutofillDriver_FocusNoLongerOnForm_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AutofillDriver_FocusNoLongerOnForm_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function AutofillDriver_FocusOnFormField_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AutofillDriver_FocusOnFormField_Params.prototype.initDefaults_ = function() {
    this.form = null;
    this.field = null;
    this.boundingBox = null;
  };
  AutofillDriver_FocusOnFormField_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AutofillDriver_FocusOnFormField_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AutofillDriver_FocusOnFormField_Params.form
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, autofill_types$.FormData, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AutofillDriver_FocusOnFormField_Params.field
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, autofill_types$.FormFieldData, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AutofillDriver_FocusOnFormField_Params.boundingBox
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, geometry$.RectF, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AutofillDriver_FocusOnFormField_Params.encodedSize = codec.kStructHeaderSize + 24;

  AutofillDriver_FocusOnFormField_Params.decode = function(decoder) {
    var packed;
    var val = new AutofillDriver_FocusOnFormField_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.form = decoder.decodeStructPointer(autofill_types$.FormData);
    val.field = decoder.decodeStructPointer(autofill_types$.FormFieldData);
    val.boundingBox = decoder.decodeStructPointer(geometry$.RectF);
    return val;
  };

  AutofillDriver_FocusOnFormField_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AutofillDriver_FocusOnFormField_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(autofill_types$.FormData, val.form);
    encoder.encodeStructPointer(autofill_types$.FormFieldData, val.field);
    encoder.encodeStructPointer(geometry$.RectF, val.boundingBox);
  };
  function AutofillDriver_DidFillAutofillFormData_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AutofillDriver_DidFillAutofillFormData_Params.prototype.initDefaults_ = function() {
    this.form = null;
    this.timestamp = null;
  };
  AutofillDriver_DidFillAutofillFormData_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AutofillDriver_DidFillAutofillFormData_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AutofillDriver_DidFillAutofillFormData_Params.form
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, autofill_types$.FormData, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AutofillDriver_DidFillAutofillFormData_Params.timestamp
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, time$.TimeTicks, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AutofillDriver_DidFillAutofillFormData_Params.encodedSize = codec.kStructHeaderSize + 16;

  AutofillDriver_DidFillAutofillFormData_Params.decode = function(decoder) {
    var packed;
    var val = new AutofillDriver_DidFillAutofillFormData_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.form = decoder.decodeStructPointer(autofill_types$.FormData);
    val.timestamp = decoder.decodeStructPointer(time$.TimeTicks);
    return val;
  };

  AutofillDriver_DidFillAutofillFormData_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AutofillDriver_DidFillAutofillFormData_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(autofill_types$.FormData, val.form);
    encoder.encodeStructPointer(time$.TimeTicks, val.timestamp);
  };
  function AutofillDriver_DidPreviewAutofillFormData_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AutofillDriver_DidPreviewAutofillFormData_Params.prototype.initDefaults_ = function() {
  };
  AutofillDriver_DidPreviewAutofillFormData_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AutofillDriver_DidPreviewAutofillFormData_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AutofillDriver_DidPreviewAutofillFormData_Params.encodedSize = codec.kStructHeaderSize + 0;

  AutofillDriver_DidPreviewAutofillFormData_Params.decode = function(decoder) {
    var packed;
    var val = new AutofillDriver_DidPreviewAutofillFormData_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  AutofillDriver_DidPreviewAutofillFormData_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AutofillDriver_DidPreviewAutofillFormData_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function AutofillDriver_DidEndTextFieldEditing_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AutofillDriver_DidEndTextFieldEditing_Params.prototype.initDefaults_ = function() {
  };
  AutofillDriver_DidEndTextFieldEditing_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AutofillDriver_DidEndTextFieldEditing_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AutofillDriver_DidEndTextFieldEditing_Params.encodedSize = codec.kStructHeaderSize + 0;

  AutofillDriver_DidEndTextFieldEditing_Params.decode = function(decoder) {
    var packed;
    var val = new AutofillDriver_DidEndTextFieldEditing_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  AutofillDriver_DidEndTextFieldEditing_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AutofillDriver_DidEndTextFieldEditing_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function AutofillDriver_SetDataList_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AutofillDriver_SetDataList_Params.prototype.initDefaults_ = function() {
    this.values = null;
    this.labels = null;
  };
  AutofillDriver_SetDataList_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AutofillDriver_SetDataList_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AutofillDriver_SetDataList_Params.values
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(string16$.String16), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AutofillDriver_SetDataList_Params.labels
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 8, new codec.PointerTo(string16$.String16), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AutofillDriver_SetDataList_Params.encodedSize = codec.kStructHeaderSize + 16;

  AutofillDriver_SetDataList_Params.decode = function(decoder) {
    var packed;
    var val = new AutofillDriver_SetDataList_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.values = decoder.decodeArrayPointer(new codec.PointerTo(string16$.String16));
    val.labels = decoder.decodeArrayPointer(new codec.PointerTo(string16$.String16));
    return val;
  };

  AutofillDriver_SetDataList_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AutofillDriver_SetDataList_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(string16$.String16), val.values);
    encoder.encodeArrayPointer(new codec.PointerTo(string16$.String16), val.labels);
  };
  function PasswordManagerDriver_PasswordFormsParsed_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PasswordManagerDriver_PasswordFormsParsed_Params.prototype.initDefaults_ = function() {
    this.forms = null;
  };
  PasswordManagerDriver_PasswordFormsParsed_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PasswordManagerDriver_PasswordFormsParsed_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PasswordManagerDriver_PasswordFormsParsed_Params.forms
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(autofill_types$.PasswordForm), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PasswordManagerDriver_PasswordFormsParsed_Params.encodedSize = codec.kStructHeaderSize + 8;

  PasswordManagerDriver_PasswordFormsParsed_Params.decode = function(decoder) {
    var packed;
    var val = new PasswordManagerDriver_PasswordFormsParsed_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.forms = decoder.decodeArrayPointer(new codec.PointerTo(autofill_types$.PasswordForm));
    return val;
  };

  PasswordManagerDriver_PasswordFormsParsed_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PasswordManagerDriver_PasswordFormsParsed_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(autofill_types$.PasswordForm), val.forms);
  };
  function PasswordManagerDriver_PasswordFormsRendered_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PasswordManagerDriver_PasswordFormsRendered_Params.prototype.initDefaults_ = function() {
    this.visibleForms = null;
    this.didStopLoading = false;
  };
  PasswordManagerDriver_PasswordFormsRendered_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PasswordManagerDriver_PasswordFormsRendered_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PasswordManagerDriver_PasswordFormsRendered_Params.visibleForms
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(autofill_types$.PasswordForm), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  PasswordManagerDriver_PasswordFormsRendered_Params.encodedSize = codec.kStructHeaderSize + 16;

  PasswordManagerDriver_PasswordFormsRendered_Params.decode = function(decoder) {
    var packed;
    var val = new PasswordManagerDriver_PasswordFormsRendered_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.visibleForms = decoder.decodeArrayPointer(new codec.PointerTo(autofill_types$.PasswordForm));
    packed = decoder.readUint8();
    val.didStopLoading = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PasswordManagerDriver_PasswordFormsRendered_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PasswordManagerDriver_PasswordFormsRendered_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(autofill_types$.PasswordForm), val.visibleForms);
    packed = 0;
    packed |= (val.didStopLoading & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PasswordManagerDriver_PasswordFormSubmitted_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PasswordManagerDriver_PasswordFormSubmitted_Params.prototype.initDefaults_ = function() {
    this.passwordForm = null;
  };
  PasswordManagerDriver_PasswordFormSubmitted_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PasswordManagerDriver_PasswordFormSubmitted_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PasswordManagerDriver_PasswordFormSubmitted_Params.passwordForm
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, autofill_types$.PasswordForm, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PasswordManagerDriver_PasswordFormSubmitted_Params.encodedSize = codec.kStructHeaderSize + 8;

  PasswordManagerDriver_PasswordFormSubmitted_Params.decode = function(decoder) {
    var packed;
    var val = new PasswordManagerDriver_PasswordFormSubmitted_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.passwordForm = decoder.decodeStructPointer(autofill_types$.PasswordForm);
    return val;
  };

  PasswordManagerDriver_PasswordFormSubmitted_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PasswordManagerDriver_PasswordFormSubmitted_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(autofill_types$.PasswordForm, val.passwordForm);
  };
  function PasswordManagerDriver_ShowManualFallbackForSaving_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PasswordManagerDriver_ShowManualFallbackForSaving_Params.prototype.initDefaults_ = function() {
    this.passwordForm = null;
  };
  PasswordManagerDriver_ShowManualFallbackForSaving_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PasswordManagerDriver_ShowManualFallbackForSaving_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PasswordManagerDriver_ShowManualFallbackForSaving_Params.passwordForm
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, autofill_types$.PasswordForm, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PasswordManagerDriver_ShowManualFallbackForSaving_Params.encodedSize = codec.kStructHeaderSize + 8;

  PasswordManagerDriver_ShowManualFallbackForSaving_Params.decode = function(decoder) {
    var packed;
    var val = new PasswordManagerDriver_ShowManualFallbackForSaving_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.passwordForm = decoder.decodeStructPointer(autofill_types$.PasswordForm);
    return val;
  };

  PasswordManagerDriver_ShowManualFallbackForSaving_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PasswordManagerDriver_ShowManualFallbackForSaving_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(autofill_types$.PasswordForm, val.passwordForm);
  };
  function PasswordManagerDriver_HideManualFallbackForSaving_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PasswordManagerDriver_HideManualFallbackForSaving_Params.prototype.initDefaults_ = function() {
  };
  PasswordManagerDriver_HideManualFallbackForSaving_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PasswordManagerDriver_HideManualFallbackForSaving_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PasswordManagerDriver_HideManualFallbackForSaving_Params.encodedSize = codec.kStructHeaderSize + 0;

  PasswordManagerDriver_HideManualFallbackForSaving_Params.decode = function(decoder) {
    var packed;
    var val = new PasswordManagerDriver_HideManualFallbackForSaving_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PasswordManagerDriver_HideManualFallbackForSaving_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PasswordManagerDriver_HideManualFallbackForSaving_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PasswordManagerDriver_SameDocumentNavigation_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PasswordManagerDriver_SameDocumentNavigation_Params.prototype.initDefaults_ = function() {
    this.submissionIndicationEvent = 0;
  };
  PasswordManagerDriver_SameDocumentNavigation_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PasswordManagerDriver_SameDocumentNavigation_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PasswordManagerDriver_SameDocumentNavigation_Params.submissionIndicationEvent
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, autofill_types$.SubmissionIndicatorEvent);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PasswordManagerDriver_SameDocumentNavigation_Params.encodedSize = codec.kStructHeaderSize + 8;

  PasswordManagerDriver_SameDocumentNavigation_Params.decode = function(decoder) {
    var packed;
    var val = new PasswordManagerDriver_SameDocumentNavigation_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.submissionIndicationEvent = decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PasswordManagerDriver_SameDocumentNavigation_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PasswordManagerDriver_SameDocumentNavigation_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.submissionIndicationEvent);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PasswordManagerDriver_RecordSavePasswordProgress_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PasswordManagerDriver_RecordSavePasswordProgress_Params.prototype.initDefaults_ = function() {
    this.log = null;
  };
  PasswordManagerDriver_RecordSavePasswordProgress_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PasswordManagerDriver_RecordSavePasswordProgress_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PasswordManagerDriver_RecordSavePasswordProgress_Params.log
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PasswordManagerDriver_RecordSavePasswordProgress_Params.encodedSize = codec.kStructHeaderSize + 8;

  PasswordManagerDriver_RecordSavePasswordProgress_Params.decode = function(decoder) {
    var packed;
    var val = new PasswordManagerDriver_RecordSavePasswordProgress_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.log = decoder.decodeStruct(codec.String);
    return val;
  };

  PasswordManagerDriver_RecordSavePasswordProgress_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PasswordManagerDriver_RecordSavePasswordProgress_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.log);
  };
  function PasswordManagerDriver_UserModifiedPasswordField_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PasswordManagerDriver_UserModifiedPasswordField_Params.prototype.initDefaults_ = function() {
  };
  PasswordManagerDriver_UserModifiedPasswordField_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PasswordManagerDriver_UserModifiedPasswordField_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PasswordManagerDriver_UserModifiedPasswordField_Params.encodedSize = codec.kStructHeaderSize + 0;

  PasswordManagerDriver_UserModifiedPasswordField_Params.decode = function(decoder) {
    var packed;
    var val = new PasswordManagerDriver_UserModifiedPasswordField_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PasswordManagerDriver_UserModifiedPasswordField_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PasswordManagerDriver_UserModifiedPasswordField_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PasswordManagerDriver_UserModifiedNonPasswordField_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PasswordManagerDriver_UserModifiedNonPasswordField_Params.prototype.initDefaults_ = function() {
    this.rendererId = 0;
    this.value = null;
  };
  PasswordManagerDriver_UserModifiedNonPasswordField_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PasswordManagerDriver_UserModifiedNonPasswordField_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate PasswordManagerDriver_UserModifiedNonPasswordField_Params.value
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, string16$.String16, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PasswordManagerDriver_UserModifiedNonPasswordField_Params.encodedSize = codec.kStructHeaderSize + 16;

  PasswordManagerDriver_UserModifiedNonPasswordField_Params.decode = function(decoder) {
    var packed;
    var val = new PasswordManagerDriver_UserModifiedNonPasswordField_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.rendererId = decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.value = decoder.decodeStructPointer(string16$.String16);
    return val;
  };

  PasswordManagerDriver_UserModifiedNonPasswordField_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PasswordManagerDriver_UserModifiedNonPasswordField_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.rendererId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(string16$.String16, val.value);
  };
  function PasswordManagerDriver_ShowPasswordSuggestions_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PasswordManagerDriver_ShowPasswordSuggestions_Params.prototype.initDefaults_ = function() {
    this.textDirection = 0;
    this.options = 0;
    this.typedUsername = null;
    this.bounds = null;
  };
  PasswordManagerDriver_ShowPasswordSuggestions_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PasswordManagerDriver_ShowPasswordSuggestions_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PasswordManagerDriver_ShowPasswordSuggestions_Params.textDirection
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, text_direction$.TextDirection);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PasswordManagerDriver_ShowPasswordSuggestions_Params.typedUsername
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, string16$.String16, false);
    if (err !== validator.validationError.NONE)
        return err;



    // validate PasswordManagerDriver_ShowPasswordSuggestions_Params.bounds
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, geometry$.RectF, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PasswordManagerDriver_ShowPasswordSuggestions_Params.encodedSize = codec.kStructHeaderSize + 24;

  PasswordManagerDriver_ShowPasswordSuggestions_Params.decode = function(decoder) {
    var packed;
    var val = new PasswordManagerDriver_ShowPasswordSuggestions_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.textDirection = decoder.decodeStruct(codec.Int32);
    val.options = decoder.decodeStruct(codec.Int32);
    val.typedUsername = decoder.decodeStructPointer(string16$.String16);
    val.bounds = decoder.decodeStructPointer(geometry$.RectF);
    return val;
  };

  PasswordManagerDriver_ShowPasswordSuggestions_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PasswordManagerDriver_ShowPasswordSuggestions_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.textDirection);
    encoder.encodeStruct(codec.Int32, val.options);
    encoder.encodeStructPointer(string16$.String16, val.typedUsername);
    encoder.encodeStructPointer(geometry$.RectF, val.bounds);
  };
  function PasswordManagerDriver_ShowTouchToFill_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PasswordManagerDriver_ShowTouchToFill_Params.prototype.initDefaults_ = function() {
  };
  PasswordManagerDriver_ShowTouchToFill_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PasswordManagerDriver_ShowTouchToFill_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PasswordManagerDriver_ShowTouchToFill_Params.encodedSize = codec.kStructHeaderSize + 0;

  PasswordManagerDriver_ShowTouchToFill_Params.decode = function(decoder) {
    var packed;
    var val = new PasswordManagerDriver_ShowTouchToFill_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PasswordManagerDriver_ShowTouchToFill_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PasswordManagerDriver_ShowTouchToFill_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PasswordManagerDriver_CheckSafeBrowsingReputation_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PasswordManagerDriver_CheckSafeBrowsingReputation_Params.prototype.initDefaults_ = function() {
    this.formAction = null;
    this.frameUrl = null;
  };
  PasswordManagerDriver_CheckSafeBrowsingReputation_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PasswordManagerDriver_CheckSafeBrowsingReputation_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PasswordManagerDriver_CheckSafeBrowsingReputation_Params.formAction
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PasswordManagerDriver_CheckSafeBrowsingReputation_Params.frameUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PasswordManagerDriver_CheckSafeBrowsingReputation_Params.encodedSize = codec.kStructHeaderSize + 16;

  PasswordManagerDriver_CheckSafeBrowsingReputation_Params.decode = function(decoder) {
    var packed;
    var val = new PasswordManagerDriver_CheckSafeBrowsingReputation_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.formAction = decoder.decodeStructPointer(url$.Url);
    val.frameUrl = decoder.decodeStructPointer(url$.Url);
    return val;
  };

  PasswordManagerDriver_CheckSafeBrowsingReputation_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PasswordManagerDriver_CheckSafeBrowsingReputation_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.formAction);
    encoder.encodeStructPointer(url$.Url, val.frameUrl);
  };
  function PasswordManagerDriver_FocusedInputChanged_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PasswordManagerDriver_FocusedInputChanged_Params.prototype.initDefaults_ = function() {
    this.focusedFieldType = 0;
  };
  PasswordManagerDriver_FocusedInputChanged_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PasswordManagerDriver_FocusedInputChanged_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PasswordManagerDriver_FocusedInputChanged_Params.focusedFieldType
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, autofill_types$.FocusedFieldType);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PasswordManagerDriver_FocusedInputChanged_Params.encodedSize = codec.kStructHeaderSize + 8;

  PasswordManagerDriver_FocusedInputChanged_Params.decode = function(decoder) {
    var packed;
    var val = new PasswordManagerDriver_FocusedInputChanged_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.focusedFieldType = decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PasswordManagerDriver_FocusedInputChanged_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PasswordManagerDriver_FocusedInputChanged_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.focusedFieldType);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PasswordManagerDriver_LogFirstFillingResult_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PasswordManagerDriver_LogFirstFillingResult_Params.prototype.initDefaults_ = function() {
    this.formRendererId = 0;
    this.result = 0;
  };
  PasswordManagerDriver_LogFirstFillingResult_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PasswordManagerDriver_LogFirstFillingResult_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  PasswordManagerDriver_LogFirstFillingResult_Params.encodedSize = codec.kStructHeaderSize + 8;

  PasswordManagerDriver_LogFirstFillingResult_Params.decode = function(decoder) {
    var packed;
    var val = new PasswordManagerDriver_LogFirstFillingResult_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.formRendererId = decoder.decodeStruct(codec.Uint32);
    val.result = decoder.decodeStruct(codec.Int32);
    return val;
  };

  PasswordManagerDriver_LogFirstFillingResult_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PasswordManagerDriver_LogFirstFillingResult_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.formRendererId);
    encoder.encodeStruct(codec.Int32, val.result);
  };
  function PasswordGenerationDriver_GenerationAvailableForForm_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PasswordGenerationDriver_GenerationAvailableForForm_Params.prototype.initDefaults_ = function() {
    this.passwordForm = null;
  };
  PasswordGenerationDriver_GenerationAvailableForForm_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PasswordGenerationDriver_GenerationAvailableForForm_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PasswordGenerationDriver_GenerationAvailableForForm_Params.passwordForm
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, autofill_types$.PasswordForm, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PasswordGenerationDriver_GenerationAvailableForForm_Params.encodedSize = codec.kStructHeaderSize + 8;

  PasswordGenerationDriver_GenerationAvailableForForm_Params.decode = function(decoder) {
    var packed;
    var val = new PasswordGenerationDriver_GenerationAvailableForForm_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.passwordForm = decoder.decodeStructPointer(autofill_types$.PasswordForm);
    return val;
  };

  PasswordGenerationDriver_GenerationAvailableForForm_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PasswordGenerationDriver_GenerationAvailableForForm_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(autofill_types$.PasswordForm, val.passwordForm);
  };
  function PasswordGenerationDriver_AutomaticGenerationAvailable_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PasswordGenerationDriver_AutomaticGenerationAvailable_Params.prototype.initDefaults_ = function() {
    this.passwordGenerationUiData = null;
  };
  PasswordGenerationDriver_AutomaticGenerationAvailable_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PasswordGenerationDriver_AutomaticGenerationAvailable_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PasswordGenerationDriver_AutomaticGenerationAvailable_Params.passwordGenerationUiData
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, autofill_types$.PasswordGenerationUIData, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PasswordGenerationDriver_AutomaticGenerationAvailable_Params.encodedSize = codec.kStructHeaderSize + 8;

  PasswordGenerationDriver_AutomaticGenerationAvailable_Params.decode = function(decoder) {
    var packed;
    var val = new PasswordGenerationDriver_AutomaticGenerationAvailable_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.passwordGenerationUiData = decoder.decodeStructPointer(autofill_types$.PasswordGenerationUIData);
    return val;
  };

  PasswordGenerationDriver_AutomaticGenerationAvailable_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PasswordGenerationDriver_AutomaticGenerationAvailable_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(autofill_types$.PasswordGenerationUIData, val.passwordGenerationUiData);
  };
  function PasswordGenerationDriver_ShowPasswordEditingPopup_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PasswordGenerationDriver_ShowPasswordEditingPopup_Params.prototype.initDefaults_ = function() {
    this.bounds = null;
    this.passwordForm = null;
    this.fieldRendererId = 0;
  };
  PasswordGenerationDriver_ShowPasswordEditingPopup_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PasswordGenerationDriver_ShowPasswordEditingPopup_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PasswordGenerationDriver_ShowPasswordEditingPopup_Params.bounds
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, geometry$.RectF, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PasswordGenerationDriver_ShowPasswordEditingPopup_Params.passwordForm
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, autofill_types$.PasswordForm, false);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  PasswordGenerationDriver_ShowPasswordEditingPopup_Params.encodedSize = codec.kStructHeaderSize + 24;

  PasswordGenerationDriver_ShowPasswordEditingPopup_Params.decode = function(decoder) {
    var packed;
    var val = new PasswordGenerationDriver_ShowPasswordEditingPopup_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.bounds = decoder.decodeStructPointer(geometry$.RectF);
    val.passwordForm = decoder.decodeStructPointer(autofill_types$.PasswordForm);
    val.fieldRendererId = decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PasswordGenerationDriver_ShowPasswordEditingPopup_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PasswordGenerationDriver_ShowPasswordEditingPopup_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(geometry$.RectF, val.bounds);
    encoder.encodeStructPointer(autofill_types$.PasswordForm, val.passwordForm);
    encoder.encodeStruct(codec.Uint32, val.fieldRendererId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PasswordGenerationDriver_PasswordGenerationRejectedByTyping_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PasswordGenerationDriver_PasswordGenerationRejectedByTyping_Params.prototype.initDefaults_ = function() {
  };
  PasswordGenerationDriver_PasswordGenerationRejectedByTyping_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PasswordGenerationDriver_PasswordGenerationRejectedByTyping_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PasswordGenerationDriver_PasswordGenerationRejectedByTyping_Params.encodedSize = codec.kStructHeaderSize + 0;

  PasswordGenerationDriver_PasswordGenerationRejectedByTyping_Params.decode = function(decoder) {
    var packed;
    var val = new PasswordGenerationDriver_PasswordGenerationRejectedByTyping_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PasswordGenerationDriver_PasswordGenerationRejectedByTyping_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PasswordGenerationDriver_PasswordGenerationRejectedByTyping_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PasswordGenerationDriver_PresaveGeneratedPassword_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PasswordGenerationDriver_PresaveGeneratedPassword_Params.prototype.initDefaults_ = function() {
    this.passwordForm = null;
  };
  PasswordGenerationDriver_PresaveGeneratedPassword_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PasswordGenerationDriver_PresaveGeneratedPassword_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PasswordGenerationDriver_PresaveGeneratedPassword_Params.passwordForm
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, autofill_types$.PasswordForm, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PasswordGenerationDriver_PresaveGeneratedPassword_Params.encodedSize = codec.kStructHeaderSize + 8;

  PasswordGenerationDriver_PresaveGeneratedPassword_Params.decode = function(decoder) {
    var packed;
    var val = new PasswordGenerationDriver_PresaveGeneratedPassword_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.passwordForm = decoder.decodeStructPointer(autofill_types$.PasswordForm);
    return val;
  };

  PasswordGenerationDriver_PresaveGeneratedPassword_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PasswordGenerationDriver_PresaveGeneratedPassword_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(autofill_types$.PasswordForm, val.passwordForm);
  };
  function PasswordGenerationDriver_PasswordNoLongerGenerated_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PasswordGenerationDriver_PasswordNoLongerGenerated_Params.prototype.initDefaults_ = function() {
    this.passwordForm = null;
  };
  PasswordGenerationDriver_PasswordNoLongerGenerated_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PasswordGenerationDriver_PasswordNoLongerGenerated_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PasswordGenerationDriver_PasswordNoLongerGenerated_Params.passwordForm
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, autofill_types$.PasswordForm, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PasswordGenerationDriver_PasswordNoLongerGenerated_Params.encodedSize = codec.kStructHeaderSize + 8;

  PasswordGenerationDriver_PasswordNoLongerGenerated_Params.decode = function(decoder) {
    var packed;
    var val = new PasswordGenerationDriver_PasswordNoLongerGenerated_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.passwordForm = decoder.decodeStructPointer(autofill_types$.PasswordForm);
    return val;
  };

  PasswordGenerationDriver_PasswordNoLongerGenerated_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PasswordGenerationDriver_PasswordNoLongerGenerated_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(autofill_types$.PasswordForm, val.passwordForm);
  };
  function PasswordGenerationDriver_FrameWasScrolled_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PasswordGenerationDriver_FrameWasScrolled_Params.prototype.initDefaults_ = function() {
  };
  PasswordGenerationDriver_FrameWasScrolled_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PasswordGenerationDriver_FrameWasScrolled_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PasswordGenerationDriver_FrameWasScrolled_Params.encodedSize = codec.kStructHeaderSize + 0;

  PasswordGenerationDriver_FrameWasScrolled_Params.decode = function(decoder) {
    var packed;
    var val = new PasswordGenerationDriver_FrameWasScrolled_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PasswordGenerationDriver_FrameWasScrolled_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PasswordGenerationDriver_FrameWasScrolled_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PasswordGenerationDriver_GenerationElementLostFocus_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PasswordGenerationDriver_GenerationElementLostFocus_Params.prototype.initDefaults_ = function() {
  };
  PasswordGenerationDriver_GenerationElementLostFocus_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PasswordGenerationDriver_GenerationElementLostFocus_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PasswordGenerationDriver_GenerationElementLostFocus_Params.encodedSize = codec.kStructHeaderSize + 0;

  PasswordGenerationDriver_GenerationElementLostFocus_Params.decode = function(decoder) {
    var packed;
    var val = new PasswordGenerationDriver_GenerationElementLostFocus_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PasswordGenerationDriver_GenerationElementLostFocus_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PasswordGenerationDriver_GenerationElementLostFocus_Params.encodedSize);
    encoder.writeUint32(0);
  };
  var kAutofillDriver_FormsSeen_Name = 0;
  var kAutofillDriver_FormSubmitted_Name = 1;
  var kAutofillDriver_TextFieldDidChange_Name = 2;
  var kAutofillDriver_TextFieldDidScroll_Name = 3;
  var kAutofillDriver_SelectControlDidChange_Name = 4;
  var kAutofillDriver_SelectFieldOptionsDidChange_Name = 5;
  var kAutofillDriver_QueryFormFieldAutofill_Name = 6;
  var kAutofillDriver_HidePopup_Name = 7;
  var kAutofillDriver_FocusNoLongerOnForm_Name = 8;
  var kAutofillDriver_FocusOnFormField_Name = 9;
  var kAutofillDriver_DidFillAutofillFormData_Name = 10;
  var kAutofillDriver_DidPreviewAutofillFormData_Name = 11;
  var kAutofillDriver_DidEndTextFieldEditing_Name = 12;
  var kAutofillDriver_SetDataList_Name = 13;

  function AutofillDriverPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(AutofillDriver,
                                                   handleOrPtrInfo);
  }

  function AutofillDriverAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        AutofillDriver, associatedInterfacePtrInfo);
  }

  AutofillDriverAssociatedPtr.prototype =
      Object.create(AutofillDriverPtr.prototype);
  AutofillDriverAssociatedPtr.prototype.constructor =
      AutofillDriverAssociatedPtr;

  function AutofillDriverProxy(receiver) {
    this.receiver_ = receiver;
  }
  AutofillDriverPtr.prototype.formsSeen = function() {
    return AutofillDriverProxy.prototype.formsSeen
        .apply(this.ptr.getProxy(), arguments);
  };

  AutofillDriverProxy.prototype.formsSeen = function(forms, timestamp) {
    var params_ = new AutofillDriver_FormsSeen_Params();
    params_.forms = forms;
    params_.timestamp = timestamp;
    var builder = new codec.MessageV0Builder(
        kAutofillDriver_FormsSeen_Name,
        codec.align(AutofillDriver_FormsSeen_Params.encodedSize));
    builder.encodeStruct(AutofillDriver_FormsSeen_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  AutofillDriverPtr.prototype.formSubmitted = function() {
    return AutofillDriverProxy.prototype.formSubmitted
        .apply(this.ptr.getProxy(), arguments);
  };

  AutofillDriverProxy.prototype.formSubmitted = function(form, knownSuccess, source) {
    var params_ = new AutofillDriver_FormSubmitted_Params();
    params_.form = form;
    params_.knownSuccess = knownSuccess;
    params_.source = source;
    var builder = new codec.MessageV0Builder(
        kAutofillDriver_FormSubmitted_Name,
        codec.align(AutofillDriver_FormSubmitted_Params.encodedSize));
    builder.encodeStruct(AutofillDriver_FormSubmitted_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  AutofillDriverPtr.prototype.textFieldDidChange = function() {
    return AutofillDriverProxy.prototype.textFieldDidChange
        .apply(this.ptr.getProxy(), arguments);
  };

  AutofillDriverProxy.prototype.textFieldDidChange = function(form, field, boundingBox, timestamp) {
    var params_ = new AutofillDriver_TextFieldDidChange_Params();
    params_.form = form;
    params_.field = field;
    params_.boundingBox = boundingBox;
    params_.timestamp = timestamp;
    var builder = new codec.MessageV0Builder(
        kAutofillDriver_TextFieldDidChange_Name,
        codec.align(AutofillDriver_TextFieldDidChange_Params.encodedSize));
    builder.encodeStruct(AutofillDriver_TextFieldDidChange_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  AutofillDriverPtr.prototype.textFieldDidScroll = function() {
    return AutofillDriverProxy.prototype.textFieldDidScroll
        .apply(this.ptr.getProxy(), arguments);
  };

  AutofillDriverProxy.prototype.textFieldDidScroll = function(form, field, boundingBox) {
    var params_ = new AutofillDriver_TextFieldDidScroll_Params();
    params_.form = form;
    params_.field = field;
    params_.boundingBox = boundingBox;
    var builder = new codec.MessageV0Builder(
        kAutofillDriver_TextFieldDidScroll_Name,
        codec.align(AutofillDriver_TextFieldDidScroll_Params.encodedSize));
    builder.encodeStruct(AutofillDriver_TextFieldDidScroll_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  AutofillDriverPtr.prototype.selectControlDidChange = function() {
    return AutofillDriverProxy.prototype.selectControlDidChange
        .apply(this.ptr.getProxy(), arguments);
  };

  AutofillDriverProxy.prototype.selectControlDidChange = function(form, field, boundingBox) {
    var params_ = new AutofillDriver_SelectControlDidChange_Params();
    params_.form = form;
    params_.field = field;
    params_.boundingBox = boundingBox;
    var builder = new codec.MessageV0Builder(
        kAutofillDriver_SelectControlDidChange_Name,
        codec.align(AutofillDriver_SelectControlDidChange_Params.encodedSize));
    builder.encodeStruct(AutofillDriver_SelectControlDidChange_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  AutofillDriverPtr.prototype.selectFieldOptionsDidChange = function() {
    return AutofillDriverProxy.prototype.selectFieldOptionsDidChange
        .apply(this.ptr.getProxy(), arguments);
  };

  AutofillDriverProxy.prototype.selectFieldOptionsDidChange = function(form) {
    var params_ = new AutofillDriver_SelectFieldOptionsDidChange_Params();
    params_.form = form;
    var builder = new codec.MessageV0Builder(
        kAutofillDriver_SelectFieldOptionsDidChange_Name,
        codec.align(AutofillDriver_SelectFieldOptionsDidChange_Params.encodedSize));
    builder.encodeStruct(AutofillDriver_SelectFieldOptionsDidChange_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  AutofillDriverPtr.prototype.queryFormFieldAutofill = function() {
    return AutofillDriverProxy.prototype.queryFormFieldAutofill
        .apply(this.ptr.getProxy(), arguments);
  };

  AutofillDriverProxy.prototype.queryFormFieldAutofill = function(id, form, field, boundingBox, autoselectFirstSuggestion) {
    var params_ = new AutofillDriver_QueryFormFieldAutofill_Params();
    params_.id = id;
    params_.form = form;
    params_.field = field;
    params_.boundingBox = boundingBox;
    params_.autoselectFirstSuggestion = autoselectFirstSuggestion;
    var builder = new codec.MessageV0Builder(
        kAutofillDriver_QueryFormFieldAutofill_Name,
        codec.align(AutofillDriver_QueryFormFieldAutofill_Params.encodedSize));
    builder.encodeStruct(AutofillDriver_QueryFormFieldAutofill_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  AutofillDriverPtr.prototype.hidePopup = function() {
    return AutofillDriverProxy.prototype.hidePopup
        .apply(this.ptr.getProxy(), arguments);
  };

  AutofillDriverProxy.prototype.hidePopup = function() {
    var params_ = new AutofillDriver_HidePopup_Params();
    var builder = new codec.MessageV0Builder(
        kAutofillDriver_HidePopup_Name,
        codec.align(AutofillDriver_HidePopup_Params.encodedSize));
    builder.encodeStruct(AutofillDriver_HidePopup_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  AutofillDriverPtr.prototype.focusNoLongerOnForm = function() {
    return AutofillDriverProxy.prototype.focusNoLongerOnForm
        .apply(this.ptr.getProxy(), arguments);
  };

  AutofillDriverProxy.prototype.focusNoLongerOnForm = function() {
    var params_ = new AutofillDriver_FocusNoLongerOnForm_Params();
    var builder = new codec.MessageV0Builder(
        kAutofillDriver_FocusNoLongerOnForm_Name,
        codec.align(AutofillDriver_FocusNoLongerOnForm_Params.encodedSize));
    builder.encodeStruct(AutofillDriver_FocusNoLongerOnForm_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  AutofillDriverPtr.prototype.focusOnFormField = function() {
    return AutofillDriverProxy.prototype.focusOnFormField
        .apply(this.ptr.getProxy(), arguments);
  };

  AutofillDriverProxy.prototype.focusOnFormField = function(form, field, boundingBox) {
    var params_ = new AutofillDriver_FocusOnFormField_Params();
    params_.form = form;
    params_.field = field;
    params_.boundingBox = boundingBox;
    var builder = new codec.MessageV0Builder(
        kAutofillDriver_FocusOnFormField_Name,
        codec.align(AutofillDriver_FocusOnFormField_Params.encodedSize));
    builder.encodeStruct(AutofillDriver_FocusOnFormField_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  AutofillDriverPtr.prototype.didFillAutofillFormData = function() {
    return AutofillDriverProxy.prototype.didFillAutofillFormData
        .apply(this.ptr.getProxy(), arguments);
  };

  AutofillDriverProxy.prototype.didFillAutofillFormData = function(form, timestamp) {
    var params_ = new AutofillDriver_DidFillAutofillFormData_Params();
    params_.form = form;
    params_.timestamp = timestamp;
    var builder = new codec.MessageV0Builder(
        kAutofillDriver_DidFillAutofillFormData_Name,
        codec.align(AutofillDriver_DidFillAutofillFormData_Params.encodedSize));
    builder.encodeStruct(AutofillDriver_DidFillAutofillFormData_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  AutofillDriverPtr.prototype.didPreviewAutofillFormData = function() {
    return AutofillDriverProxy.prototype.didPreviewAutofillFormData
        .apply(this.ptr.getProxy(), arguments);
  };

  AutofillDriverProxy.prototype.didPreviewAutofillFormData = function() {
    var params_ = new AutofillDriver_DidPreviewAutofillFormData_Params();
    var builder = new codec.MessageV0Builder(
        kAutofillDriver_DidPreviewAutofillFormData_Name,
        codec.align(AutofillDriver_DidPreviewAutofillFormData_Params.encodedSize));
    builder.encodeStruct(AutofillDriver_DidPreviewAutofillFormData_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  AutofillDriverPtr.prototype.didEndTextFieldEditing = function() {
    return AutofillDriverProxy.prototype.didEndTextFieldEditing
        .apply(this.ptr.getProxy(), arguments);
  };

  AutofillDriverProxy.prototype.didEndTextFieldEditing = function() {
    var params_ = new AutofillDriver_DidEndTextFieldEditing_Params();
    var builder = new codec.MessageV0Builder(
        kAutofillDriver_DidEndTextFieldEditing_Name,
        codec.align(AutofillDriver_DidEndTextFieldEditing_Params.encodedSize));
    builder.encodeStruct(AutofillDriver_DidEndTextFieldEditing_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  AutofillDriverPtr.prototype.setDataList = function() {
    return AutofillDriverProxy.prototype.setDataList
        .apply(this.ptr.getProxy(), arguments);
  };

  AutofillDriverProxy.prototype.setDataList = function(values, labels) {
    var params_ = new AutofillDriver_SetDataList_Params();
    params_.values = values;
    params_.labels = labels;
    var builder = new codec.MessageV0Builder(
        kAutofillDriver_SetDataList_Name,
        codec.align(AutofillDriver_SetDataList_Params.encodedSize));
    builder.encodeStruct(AutofillDriver_SetDataList_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function AutofillDriverStub(delegate) {
    this.delegate_ = delegate;
  }
  AutofillDriverStub.prototype.formsSeen = function(forms, timestamp) {
    return this.delegate_ && this.delegate_.formsSeen && this.delegate_.formsSeen(forms, timestamp);
  }
  AutofillDriverStub.prototype.formSubmitted = function(form, knownSuccess, source) {
    return this.delegate_ && this.delegate_.formSubmitted && this.delegate_.formSubmitted(form, knownSuccess, source);
  }
  AutofillDriverStub.prototype.textFieldDidChange = function(form, field, boundingBox, timestamp) {
    return this.delegate_ && this.delegate_.textFieldDidChange && this.delegate_.textFieldDidChange(form, field, boundingBox, timestamp);
  }
  AutofillDriverStub.prototype.textFieldDidScroll = function(form, field, boundingBox) {
    return this.delegate_ && this.delegate_.textFieldDidScroll && this.delegate_.textFieldDidScroll(form, field, boundingBox);
  }
  AutofillDriverStub.prototype.selectControlDidChange = function(form, field, boundingBox) {
    return this.delegate_ && this.delegate_.selectControlDidChange && this.delegate_.selectControlDidChange(form, field, boundingBox);
  }
  AutofillDriverStub.prototype.selectFieldOptionsDidChange = function(form) {
    return this.delegate_ && this.delegate_.selectFieldOptionsDidChange && this.delegate_.selectFieldOptionsDidChange(form);
  }
  AutofillDriverStub.prototype.queryFormFieldAutofill = function(id, form, field, boundingBox, autoselectFirstSuggestion) {
    return this.delegate_ && this.delegate_.queryFormFieldAutofill && this.delegate_.queryFormFieldAutofill(id, form, field, boundingBox, autoselectFirstSuggestion);
  }
  AutofillDriverStub.prototype.hidePopup = function() {
    return this.delegate_ && this.delegate_.hidePopup && this.delegate_.hidePopup();
  }
  AutofillDriverStub.prototype.focusNoLongerOnForm = function() {
    return this.delegate_ && this.delegate_.focusNoLongerOnForm && this.delegate_.focusNoLongerOnForm();
  }
  AutofillDriverStub.prototype.focusOnFormField = function(form, field, boundingBox) {
    return this.delegate_ && this.delegate_.focusOnFormField && this.delegate_.focusOnFormField(form, field, boundingBox);
  }
  AutofillDriverStub.prototype.didFillAutofillFormData = function(form, timestamp) {
    return this.delegate_ && this.delegate_.didFillAutofillFormData && this.delegate_.didFillAutofillFormData(form, timestamp);
  }
  AutofillDriverStub.prototype.didPreviewAutofillFormData = function() {
    return this.delegate_ && this.delegate_.didPreviewAutofillFormData && this.delegate_.didPreviewAutofillFormData();
  }
  AutofillDriverStub.prototype.didEndTextFieldEditing = function() {
    return this.delegate_ && this.delegate_.didEndTextFieldEditing && this.delegate_.didEndTextFieldEditing();
  }
  AutofillDriverStub.prototype.setDataList = function(values, labels) {
    return this.delegate_ && this.delegate_.setDataList && this.delegate_.setDataList(values, labels);
  }

  AutofillDriverStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kAutofillDriver_FormsSeen_Name:
      var params = reader.decodeStruct(AutofillDriver_FormsSeen_Params);
      this.formsSeen(params.forms, params.timestamp);
      return true;
    case kAutofillDriver_FormSubmitted_Name:
      var params = reader.decodeStruct(AutofillDriver_FormSubmitted_Params);
      this.formSubmitted(params.form, params.knownSuccess, params.source);
      return true;
    case kAutofillDriver_TextFieldDidChange_Name:
      var params = reader.decodeStruct(AutofillDriver_TextFieldDidChange_Params);
      this.textFieldDidChange(params.form, params.field, params.boundingBox, params.timestamp);
      return true;
    case kAutofillDriver_TextFieldDidScroll_Name:
      var params = reader.decodeStruct(AutofillDriver_TextFieldDidScroll_Params);
      this.textFieldDidScroll(params.form, params.field, params.boundingBox);
      return true;
    case kAutofillDriver_SelectControlDidChange_Name:
      var params = reader.decodeStruct(AutofillDriver_SelectControlDidChange_Params);
      this.selectControlDidChange(params.form, params.field, params.boundingBox);
      return true;
    case kAutofillDriver_SelectFieldOptionsDidChange_Name:
      var params = reader.decodeStruct(AutofillDriver_SelectFieldOptionsDidChange_Params);
      this.selectFieldOptionsDidChange(params.form);
      return true;
    case kAutofillDriver_QueryFormFieldAutofill_Name:
      var params = reader.decodeStruct(AutofillDriver_QueryFormFieldAutofill_Params);
      this.queryFormFieldAutofill(params.id, params.form, params.field, params.boundingBox, params.autoselectFirstSuggestion);
      return true;
    case kAutofillDriver_HidePopup_Name:
      var params = reader.decodeStruct(AutofillDriver_HidePopup_Params);
      this.hidePopup();
      return true;
    case kAutofillDriver_FocusNoLongerOnForm_Name:
      var params = reader.decodeStruct(AutofillDriver_FocusNoLongerOnForm_Params);
      this.focusNoLongerOnForm();
      return true;
    case kAutofillDriver_FocusOnFormField_Name:
      var params = reader.decodeStruct(AutofillDriver_FocusOnFormField_Params);
      this.focusOnFormField(params.form, params.field, params.boundingBox);
      return true;
    case kAutofillDriver_DidFillAutofillFormData_Name:
      var params = reader.decodeStruct(AutofillDriver_DidFillAutofillFormData_Params);
      this.didFillAutofillFormData(params.form, params.timestamp);
      return true;
    case kAutofillDriver_DidPreviewAutofillFormData_Name:
      var params = reader.decodeStruct(AutofillDriver_DidPreviewAutofillFormData_Params);
      this.didPreviewAutofillFormData();
      return true;
    case kAutofillDriver_DidEndTextFieldEditing_Name:
      var params = reader.decodeStruct(AutofillDriver_DidEndTextFieldEditing_Params);
      this.didEndTextFieldEditing();
      return true;
    case kAutofillDriver_SetDataList_Name:
      var params = reader.decodeStruct(AutofillDriver_SetDataList_Params);
      this.setDataList(params.values, params.labels);
      return true;
    default:
      return false;
    }
  };

  AutofillDriverStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateAutofillDriverRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kAutofillDriver_FormsSeen_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = AutofillDriver_FormsSeen_Params;
      break;
      case kAutofillDriver_FormSubmitted_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = AutofillDriver_FormSubmitted_Params;
      break;
      case kAutofillDriver_TextFieldDidChange_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = AutofillDriver_TextFieldDidChange_Params;
      break;
      case kAutofillDriver_TextFieldDidScroll_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = AutofillDriver_TextFieldDidScroll_Params;
      break;
      case kAutofillDriver_SelectControlDidChange_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = AutofillDriver_SelectControlDidChange_Params;
      break;
      case kAutofillDriver_SelectFieldOptionsDidChange_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = AutofillDriver_SelectFieldOptionsDidChange_Params;
      break;
      case kAutofillDriver_QueryFormFieldAutofill_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = AutofillDriver_QueryFormFieldAutofill_Params;
      break;
      case kAutofillDriver_HidePopup_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = AutofillDriver_HidePopup_Params;
      break;
      case kAutofillDriver_FocusNoLongerOnForm_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = AutofillDriver_FocusNoLongerOnForm_Params;
      break;
      case kAutofillDriver_FocusOnFormField_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = AutofillDriver_FocusOnFormField_Params;
      break;
      case kAutofillDriver_DidFillAutofillFormData_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = AutofillDriver_DidFillAutofillFormData_Params;
      break;
      case kAutofillDriver_DidPreviewAutofillFormData_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = AutofillDriver_DidPreviewAutofillFormData_Params;
      break;
      case kAutofillDriver_DidEndTextFieldEditing_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = AutofillDriver_DidEndTextFieldEditing_Params;
      break;
      case kAutofillDriver_SetDataList_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = AutofillDriver_SetDataList_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateAutofillDriverResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var AutofillDriver = {
    name: 'autofill.mojom.AutofillDriver',
    kVersion: 0,
    ptrClass: AutofillDriverPtr,
    proxyClass: AutofillDriverProxy,
    stubClass: AutofillDriverStub,
    validateRequest: validateAutofillDriverRequest,
    validateResponse: null,
  };
  AutofillDriverStub.prototype.validator = validateAutofillDriverRequest;
  AutofillDriverProxy.prototype.validator = null;
  var kPasswordManagerDriver_PasswordFormsParsed_Name = 0;
  var kPasswordManagerDriver_PasswordFormsRendered_Name = 1;
  var kPasswordManagerDriver_PasswordFormSubmitted_Name = 2;
  var kPasswordManagerDriver_ShowManualFallbackForSaving_Name = 3;
  var kPasswordManagerDriver_HideManualFallbackForSaving_Name = 4;
  var kPasswordManagerDriver_SameDocumentNavigation_Name = 5;
  var kPasswordManagerDriver_RecordSavePasswordProgress_Name = 6;
  var kPasswordManagerDriver_UserModifiedPasswordField_Name = 7;
  var kPasswordManagerDriver_UserModifiedNonPasswordField_Name = 8;
  var kPasswordManagerDriver_ShowPasswordSuggestions_Name = 9;
  var kPasswordManagerDriver_ShowTouchToFill_Name = 10;
  var kPasswordManagerDriver_CheckSafeBrowsingReputation_Name = 11;
  var kPasswordManagerDriver_FocusedInputChanged_Name = 12;
  var kPasswordManagerDriver_LogFirstFillingResult_Name = 13;

  function PasswordManagerDriverPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(PasswordManagerDriver,
                                                   handleOrPtrInfo);
  }

  function PasswordManagerDriverAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        PasswordManagerDriver, associatedInterfacePtrInfo);
  }

  PasswordManagerDriverAssociatedPtr.prototype =
      Object.create(PasswordManagerDriverPtr.prototype);
  PasswordManagerDriverAssociatedPtr.prototype.constructor =
      PasswordManagerDriverAssociatedPtr;

  function PasswordManagerDriverProxy(receiver) {
    this.receiver_ = receiver;
  }
  PasswordManagerDriverPtr.prototype.passwordFormsParsed = function() {
    return PasswordManagerDriverProxy.prototype.passwordFormsParsed
        .apply(this.ptr.getProxy(), arguments);
  };

  PasswordManagerDriverProxy.prototype.passwordFormsParsed = function(forms) {
    var params_ = new PasswordManagerDriver_PasswordFormsParsed_Params();
    params_.forms = forms;
    var builder = new codec.MessageV0Builder(
        kPasswordManagerDriver_PasswordFormsParsed_Name,
        codec.align(PasswordManagerDriver_PasswordFormsParsed_Params.encodedSize));
    builder.encodeStruct(PasswordManagerDriver_PasswordFormsParsed_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PasswordManagerDriverPtr.prototype.passwordFormsRendered = function() {
    return PasswordManagerDriverProxy.prototype.passwordFormsRendered
        .apply(this.ptr.getProxy(), arguments);
  };

  PasswordManagerDriverProxy.prototype.passwordFormsRendered = function(visibleForms, didStopLoading) {
    var params_ = new PasswordManagerDriver_PasswordFormsRendered_Params();
    params_.visibleForms = visibleForms;
    params_.didStopLoading = didStopLoading;
    var builder = new codec.MessageV0Builder(
        kPasswordManagerDriver_PasswordFormsRendered_Name,
        codec.align(PasswordManagerDriver_PasswordFormsRendered_Params.encodedSize));
    builder.encodeStruct(PasswordManagerDriver_PasswordFormsRendered_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PasswordManagerDriverPtr.prototype.passwordFormSubmitted = function() {
    return PasswordManagerDriverProxy.prototype.passwordFormSubmitted
        .apply(this.ptr.getProxy(), arguments);
  };

  PasswordManagerDriverProxy.prototype.passwordFormSubmitted = function(passwordForm) {
    var params_ = new PasswordManagerDriver_PasswordFormSubmitted_Params();
    params_.passwordForm = passwordForm;
    var builder = new codec.MessageV0Builder(
        kPasswordManagerDriver_PasswordFormSubmitted_Name,
        codec.align(PasswordManagerDriver_PasswordFormSubmitted_Params.encodedSize));
    builder.encodeStruct(PasswordManagerDriver_PasswordFormSubmitted_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PasswordManagerDriverPtr.prototype.showManualFallbackForSaving = function() {
    return PasswordManagerDriverProxy.prototype.showManualFallbackForSaving
        .apply(this.ptr.getProxy(), arguments);
  };

  PasswordManagerDriverProxy.prototype.showManualFallbackForSaving = function(passwordForm) {
    var params_ = new PasswordManagerDriver_ShowManualFallbackForSaving_Params();
    params_.passwordForm = passwordForm;
    var builder = new codec.MessageV0Builder(
        kPasswordManagerDriver_ShowManualFallbackForSaving_Name,
        codec.align(PasswordManagerDriver_ShowManualFallbackForSaving_Params.encodedSize));
    builder.encodeStruct(PasswordManagerDriver_ShowManualFallbackForSaving_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PasswordManagerDriverPtr.prototype.hideManualFallbackForSaving = function() {
    return PasswordManagerDriverProxy.prototype.hideManualFallbackForSaving
        .apply(this.ptr.getProxy(), arguments);
  };

  PasswordManagerDriverProxy.prototype.hideManualFallbackForSaving = function() {
    var params_ = new PasswordManagerDriver_HideManualFallbackForSaving_Params();
    var builder = new codec.MessageV0Builder(
        kPasswordManagerDriver_HideManualFallbackForSaving_Name,
        codec.align(PasswordManagerDriver_HideManualFallbackForSaving_Params.encodedSize));
    builder.encodeStruct(PasswordManagerDriver_HideManualFallbackForSaving_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PasswordManagerDriverPtr.prototype.sameDocumentNavigation = function() {
    return PasswordManagerDriverProxy.prototype.sameDocumentNavigation
        .apply(this.ptr.getProxy(), arguments);
  };

  PasswordManagerDriverProxy.prototype.sameDocumentNavigation = function(submissionIndicationEvent) {
    var params_ = new PasswordManagerDriver_SameDocumentNavigation_Params();
    params_.submissionIndicationEvent = submissionIndicationEvent;
    var builder = new codec.MessageV0Builder(
        kPasswordManagerDriver_SameDocumentNavigation_Name,
        codec.align(PasswordManagerDriver_SameDocumentNavigation_Params.encodedSize));
    builder.encodeStruct(PasswordManagerDriver_SameDocumentNavigation_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PasswordManagerDriverPtr.prototype.recordSavePasswordProgress = function() {
    return PasswordManagerDriverProxy.prototype.recordSavePasswordProgress
        .apply(this.ptr.getProxy(), arguments);
  };

  PasswordManagerDriverProxy.prototype.recordSavePasswordProgress = function(log) {
    var params_ = new PasswordManagerDriver_RecordSavePasswordProgress_Params();
    params_.log = log;
    var builder = new codec.MessageV0Builder(
        kPasswordManagerDriver_RecordSavePasswordProgress_Name,
        codec.align(PasswordManagerDriver_RecordSavePasswordProgress_Params.encodedSize));
    builder.encodeStruct(PasswordManagerDriver_RecordSavePasswordProgress_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PasswordManagerDriverPtr.prototype.userModifiedPasswordField = function() {
    return PasswordManagerDriverProxy.prototype.userModifiedPasswordField
        .apply(this.ptr.getProxy(), arguments);
  };

  PasswordManagerDriverProxy.prototype.userModifiedPasswordField = function() {
    var params_ = new PasswordManagerDriver_UserModifiedPasswordField_Params();
    var builder = new codec.MessageV0Builder(
        kPasswordManagerDriver_UserModifiedPasswordField_Name,
        codec.align(PasswordManagerDriver_UserModifiedPasswordField_Params.encodedSize));
    builder.encodeStruct(PasswordManagerDriver_UserModifiedPasswordField_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PasswordManagerDriverPtr.prototype.userModifiedNonPasswordField = function() {
    return PasswordManagerDriverProxy.prototype.userModifiedNonPasswordField
        .apply(this.ptr.getProxy(), arguments);
  };

  PasswordManagerDriverProxy.prototype.userModifiedNonPasswordField = function(rendererId, value) {
    var params_ = new PasswordManagerDriver_UserModifiedNonPasswordField_Params();
    params_.rendererId = rendererId;
    params_.value = value;
    var builder = new codec.MessageV0Builder(
        kPasswordManagerDriver_UserModifiedNonPasswordField_Name,
        codec.align(PasswordManagerDriver_UserModifiedNonPasswordField_Params.encodedSize));
    builder.encodeStruct(PasswordManagerDriver_UserModifiedNonPasswordField_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PasswordManagerDriverPtr.prototype.showPasswordSuggestions = function() {
    return PasswordManagerDriverProxy.prototype.showPasswordSuggestions
        .apply(this.ptr.getProxy(), arguments);
  };

  PasswordManagerDriverProxy.prototype.showPasswordSuggestions = function(textDirection, typedUsername, options, bounds) {
    var params_ = new PasswordManagerDriver_ShowPasswordSuggestions_Params();
    params_.textDirection = textDirection;
    params_.typedUsername = typedUsername;
    params_.options = options;
    params_.bounds = bounds;
    var builder = new codec.MessageV0Builder(
        kPasswordManagerDriver_ShowPasswordSuggestions_Name,
        codec.align(PasswordManagerDriver_ShowPasswordSuggestions_Params.encodedSize));
    builder.encodeStruct(PasswordManagerDriver_ShowPasswordSuggestions_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PasswordManagerDriverPtr.prototype.showTouchToFill = function() {
    return PasswordManagerDriverProxy.prototype.showTouchToFill
        .apply(this.ptr.getProxy(), arguments);
  };

  PasswordManagerDriverProxy.prototype.showTouchToFill = function() {
    var params_ = new PasswordManagerDriver_ShowTouchToFill_Params();
    var builder = new codec.MessageV0Builder(
        kPasswordManagerDriver_ShowTouchToFill_Name,
        codec.align(PasswordManagerDriver_ShowTouchToFill_Params.encodedSize));
    builder.encodeStruct(PasswordManagerDriver_ShowTouchToFill_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PasswordManagerDriverPtr.prototype.checkSafeBrowsingReputation = function() {
    return PasswordManagerDriverProxy.prototype.checkSafeBrowsingReputation
        .apply(this.ptr.getProxy(), arguments);
  };

  PasswordManagerDriverProxy.prototype.checkSafeBrowsingReputation = function(formAction, frameUrl) {
    var params_ = new PasswordManagerDriver_CheckSafeBrowsingReputation_Params();
    params_.formAction = formAction;
    params_.frameUrl = frameUrl;
    var builder = new codec.MessageV0Builder(
        kPasswordManagerDriver_CheckSafeBrowsingReputation_Name,
        codec.align(PasswordManagerDriver_CheckSafeBrowsingReputation_Params.encodedSize));
    builder.encodeStruct(PasswordManagerDriver_CheckSafeBrowsingReputation_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PasswordManagerDriverPtr.prototype.focusedInputChanged = function() {
    return PasswordManagerDriverProxy.prototype.focusedInputChanged
        .apply(this.ptr.getProxy(), arguments);
  };

  PasswordManagerDriverProxy.prototype.focusedInputChanged = function(focusedFieldType) {
    var params_ = new PasswordManagerDriver_FocusedInputChanged_Params();
    params_.focusedFieldType = focusedFieldType;
    var builder = new codec.MessageV0Builder(
        kPasswordManagerDriver_FocusedInputChanged_Name,
        codec.align(PasswordManagerDriver_FocusedInputChanged_Params.encodedSize));
    builder.encodeStruct(PasswordManagerDriver_FocusedInputChanged_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PasswordManagerDriverPtr.prototype.logFirstFillingResult = function() {
    return PasswordManagerDriverProxy.prototype.logFirstFillingResult
        .apply(this.ptr.getProxy(), arguments);
  };

  PasswordManagerDriverProxy.prototype.logFirstFillingResult = function(formRendererId, result) {
    var params_ = new PasswordManagerDriver_LogFirstFillingResult_Params();
    params_.formRendererId = formRendererId;
    params_.result = result;
    var builder = new codec.MessageV0Builder(
        kPasswordManagerDriver_LogFirstFillingResult_Name,
        codec.align(PasswordManagerDriver_LogFirstFillingResult_Params.encodedSize));
    builder.encodeStruct(PasswordManagerDriver_LogFirstFillingResult_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function PasswordManagerDriverStub(delegate) {
    this.delegate_ = delegate;
  }
  PasswordManagerDriverStub.prototype.passwordFormsParsed = function(forms) {
    return this.delegate_ && this.delegate_.passwordFormsParsed && this.delegate_.passwordFormsParsed(forms);
  }
  PasswordManagerDriverStub.prototype.passwordFormsRendered = function(visibleForms, didStopLoading) {
    return this.delegate_ && this.delegate_.passwordFormsRendered && this.delegate_.passwordFormsRendered(visibleForms, didStopLoading);
  }
  PasswordManagerDriverStub.prototype.passwordFormSubmitted = function(passwordForm) {
    return this.delegate_ && this.delegate_.passwordFormSubmitted && this.delegate_.passwordFormSubmitted(passwordForm);
  }
  PasswordManagerDriverStub.prototype.showManualFallbackForSaving = function(passwordForm) {
    return this.delegate_ && this.delegate_.showManualFallbackForSaving && this.delegate_.showManualFallbackForSaving(passwordForm);
  }
  PasswordManagerDriverStub.prototype.hideManualFallbackForSaving = function() {
    return this.delegate_ && this.delegate_.hideManualFallbackForSaving && this.delegate_.hideManualFallbackForSaving();
  }
  PasswordManagerDriverStub.prototype.sameDocumentNavigation = function(submissionIndicationEvent) {
    return this.delegate_ && this.delegate_.sameDocumentNavigation && this.delegate_.sameDocumentNavigation(submissionIndicationEvent);
  }
  PasswordManagerDriverStub.prototype.recordSavePasswordProgress = function(log) {
    return this.delegate_ && this.delegate_.recordSavePasswordProgress && this.delegate_.recordSavePasswordProgress(log);
  }
  PasswordManagerDriverStub.prototype.userModifiedPasswordField = function() {
    return this.delegate_ && this.delegate_.userModifiedPasswordField && this.delegate_.userModifiedPasswordField();
  }
  PasswordManagerDriverStub.prototype.userModifiedNonPasswordField = function(rendererId, value) {
    return this.delegate_ && this.delegate_.userModifiedNonPasswordField && this.delegate_.userModifiedNonPasswordField(rendererId, value);
  }
  PasswordManagerDriverStub.prototype.showPasswordSuggestions = function(textDirection, typedUsername, options, bounds) {
    return this.delegate_ && this.delegate_.showPasswordSuggestions && this.delegate_.showPasswordSuggestions(textDirection, typedUsername, options, bounds);
  }
  PasswordManagerDriverStub.prototype.showTouchToFill = function() {
    return this.delegate_ && this.delegate_.showTouchToFill && this.delegate_.showTouchToFill();
  }
  PasswordManagerDriverStub.prototype.checkSafeBrowsingReputation = function(formAction, frameUrl) {
    return this.delegate_ && this.delegate_.checkSafeBrowsingReputation && this.delegate_.checkSafeBrowsingReputation(formAction, frameUrl);
  }
  PasswordManagerDriverStub.prototype.focusedInputChanged = function(focusedFieldType) {
    return this.delegate_ && this.delegate_.focusedInputChanged && this.delegate_.focusedInputChanged(focusedFieldType);
  }
  PasswordManagerDriverStub.prototype.logFirstFillingResult = function(formRendererId, result) {
    return this.delegate_ && this.delegate_.logFirstFillingResult && this.delegate_.logFirstFillingResult(formRendererId, result);
  }

  PasswordManagerDriverStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPasswordManagerDriver_PasswordFormsParsed_Name:
      var params = reader.decodeStruct(PasswordManagerDriver_PasswordFormsParsed_Params);
      this.passwordFormsParsed(params.forms);
      return true;
    case kPasswordManagerDriver_PasswordFormsRendered_Name:
      var params = reader.decodeStruct(PasswordManagerDriver_PasswordFormsRendered_Params);
      this.passwordFormsRendered(params.visibleForms, params.didStopLoading);
      return true;
    case kPasswordManagerDriver_PasswordFormSubmitted_Name:
      var params = reader.decodeStruct(PasswordManagerDriver_PasswordFormSubmitted_Params);
      this.passwordFormSubmitted(params.passwordForm);
      return true;
    case kPasswordManagerDriver_ShowManualFallbackForSaving_Name:
      var params = reader.decodeStruct(PasswordManagerDriver_ShowManualFallbackForSaving_Params);
      this.showManualFallbackForSaving(params.passwordForm);
      return true;
    case kPasswordManagerDriver_HideManualFallbackForSaving_Name:
      var params = reader.decodeStruct(PasswordManagerDriver_HideManualFallbackForSaving_Params);
      this.hideManualFallbackForSaving();
      return true;
    case kPasswordManagerDriver_SameDocumentNavigation_Name:
      var params = reader.decodeStruct(PasswordManagerDriver_SameDocumentNavigation_Params);
      this.sameDocumentNavigation(params.submissionIndicationEvent);
      return true;
    case kPasswordManagerDriver_RecordSavePasswordProgress_Name:
      var params = reader.decodeStruct(PasswordManagerDriver_RecordSavePasswordProgress_Params);
      this.recordSavePasswordProgress(params.log);
      return true;
    case kPasswordManagerDriver_UserModifiedPasswordField_Name:
      var params = reader.decodeStruct(PasswordManagerDriver_UserModifiedPasswordField_Params);
      this.userModifiedPasswordField();
      return true;
    case kPasswordManagerDriver_UserModifiedNonPasswordField_Name:
      var params = reader.decodeStruct(PasswordManagerDriver_UserModifiedNonPasswordField_Params);
      this.userModifiedNonPasswordField(params.rendererId, params.value);
      return true;
    case kPasswordManagerDriver_ShowPasswordSuggestions_Name:
      var params = reader.decodeStruct(PasswordManagerDriver_ShowPasswordSuggestions_Params);
      this.showPasswordSuggestions(params.textDirection, params.typedUsername, params.options, params.bounds);
      return true;
    case kPasswordManagerDriver_ShowTouchToFill_Name:
      var params = reader.decodeStruct(PasswordManagerDriver_ShowTouchToFill_Params);
      this.showTouchToFill();
      return true;
    case kPasswordManagerDriver_CheckSafeBrowsingReputation_Name:
      var params = reader.decodeStruct(PasswordManagerDriver_CheckSafeBrowsingReputation_Params);
      this.checkSafeBrowsingReputation(params.formAction, params.frameUrl);
      return true;
    case kPasswordManagerDriver_FocusedInputChanged_Name:
      var params = reader.decodeStruct(PasswordManagerDriver_FocusedInputChanged_Params);
      this.focusedInputChanged(params.focusedFieldType);
      return true;
    case kPasswordManagerDriver_LogFirstFillingResult_Name:
      var params = reader.decodeStruct(PasswordManagerDriver_LogFirstFillingResult_Params);
      this.logFirstFillingResult(params.formRendererId, params.result);
      return true;
    default:
      return false;
    }
  };

  PasswordManagerDriverStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validatePasswordManagerDriverRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kPasswordManagerDriver_PasswordFormsParsed_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PasswordManagerDriver_PasswordFormsParsed_Params;
      break;
      case kPasswordManagerDriver_PasswordFormsRendered_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PasswordManagerDriver_PasswordFormsRendered_Params;
      break;
      case kPasswordManagerDriver_PasswordFormSubmitted_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PasswordManagerDriver_PasswordFormSubmitted_Params;
      break;
      case kPasswordManagerDriver_ShowManualFallbackForSaving_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PasswordManagerDriver_ShowManualFallbackForSaving_Params;
      break;
      case kPasswordManagerDriver_HideManualFallbackForSaving_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PasswordManagerDriver_HideManualFallbackForSaving_Params;
      break;
      case kPasswordManagerDriver_SameDocumentNavigation_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PasswordManagerDriver_SameDocumentNavigation_Params;
      break;
      case kPasswordManagerDriver_RecordSavePasswordProgress_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PasswordManagerDriver_RecordSavePasswordProgress_Params;
      break;
      case kPasswordManagerDriver_UserModifiedPasswordField_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PasswordManagerDriver_UserModifiedPasswordField_Params;
      break;
      case kPasswordManagerDriver_UserModifiedNonPasswordField_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PasswordManagerDriver_UserModifiedNonPasswordField_Params;
      break;
      case kPasswordManagerDriver_ShowPasswordSuggestions_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PasswordManagerDriver_ShowPasswordSuggestions_Params;
      break;
      case kPasswordManagerDriver_ShowTouchToFill_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PasswordManagerDriver_ShowTouchToFill_Params;
      break;
      case kPasswordManagerDriver_CheckSafeBrowsingReputation_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PasswordManagerDriver_CheckSafeBrowsingReputation_Params;
      break;
      case kPasswordManagerDriver_FocusedInputChanged_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PasswordManagerDriver_FocusedInputChanged_Params;
      break;
      case kPasswordManagerDriver_LogFirstFillingResult_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PasswordManagerDriver_LogFirstFillingResult_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validatePasswordManagerDriverResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var PasswordManagerDriver = {
    name: 'autofill.mojom.PasswordManagerDriver',
    kVersion: 0,
    ptrClass: PasswordManagerDriverPtr,
    proxyClass: PasswordManagerDriverProxy,
    stubClass: PasswordManagerDriverStub,
    validateRequest: validatePasswordManagerDriverRequest,
    validateResponse: null,
  };
  PasswordManagerDriverStub.prototype.validator = validatePasswordManagerDriverRequest;
  PasswordManagerDriverProxy.prototype.validator = null;
  var kPasswordGenerationDriver_GenerationAvailableForForm_Name = 0;
  var kPasswordGenerationDriver_AutomaticGenerationAvailable_Name = 1;
  var kPasswordGenerationDriver_ShowPasswordEditingPopup_Name = 2;
  var kPasswordGenerationDriver_PasswordGenerationRejectedByTyping_Name = 3;
  var kPasswordGenerationDriver_PresaveGeneratedPassword_Name = 4;
  var kPasswordGenerationDriver_PasswordNoLongerGenerated_Name = 5;
  var kPasswordGenerationDriver_FrameWasScrolled_Name = 6;
  var kPasswordGenerationDriver_GenerationElementLostFocus_Name = 7;

  function PasswordGenerationDriverPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(PasswordGenerationDriver,
                                                   handleOrPtrInfo);
  }

  function PasswordGenerationDriverAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        PasswordGenerationDriver, associatedInterfacePtrInfo);
  }

  PasswordGenerationDriverAssociatedPtr.prototype =
      Object.create(PasswordGenerationDriverPtr.prototype);
  PasswordGenerationDriverAssociatedPtr.prototype.constructor =
      PasswordGenerationDriverAssociatedPtr;

  function PasswordGenerationDriverProxy(receiver) {
    this.receiver_ = receiver;
  }
  PasswordGenerationDriverPtr.prototype.generationAvailableForForm = function() {
    return PasswordGenerationDriverProxy.prototype.generationAvailableForForm
        .apply(this.ptr.getProxy(), arguments);
  };

  PasswordGenerationDriverProxy.prototype.generationAvailableForForm = function(passwordForm) {
    var params_ = new PasswordGenerationDriver_GenerationAvailableForForm_Params();
    params_.passwordForm = passwordForm;
    var builder = new codec.MessageV0Builder(
        kPasswordGenerationDriver_GenerationAvailableForForm_Name,
        codec.align(PasswordGenerationDriver_GenerationAvailableForForm_Params.encodedSize));
    builder.encodeStruct(PasswordGenerationDriver_GenerationAvailableForForm_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PasswordGenerationDriverPtr.prototype.automaticGenerationAvailable = function() {
    return PasswordGenerationDriverProxy.prototype.automaticGenerationAvailable
        .apply(this.ptr.getProxy(), arguments);
  };

  PasswordGenerationDriverProxy.prototype.automaticGenerationAvailable = function(passwordGenerationUiData) {
    var params_ = new PasswordGenerationDriver_AutomaticGenerationAvailable_Params();
    params_.passwordGenerationUiData = passwordGenerationUiData;
    var builder = new codec.MessageV0Builder(
        kPasswordGenerationDriver_AutomaticGenerationAvailable_Name,
        codec.align(PasswordGenerationDriver_AutomaticGenerationAvailable_Params.encodedSize));
    builder.encodeStruct(PasswordGenerationDriver_AutomaticGenerationAvailable_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PasswordGenerationDriverPtr.prototype.showPasswordEditingPopup = function() {
    return PasswordGenerationDriverProxy.prototype.showPasswordEditingPopup
        .apply(this.ptr.getProxy(), arguments);
  };

  PasswordGenerationDriverProxy.prototype.showPasswordEditingPopup = function(bounds, passwordForm, fieldRendererId) {
    var params_ = new PasswordGenerationDriver_ShowPasswordEditingPopup_Params();
    params_.bounds = bounds;
    params_.passwordForm = passwordForm;
    params_.fieldRendererId = fieldRendererId;
    var builder = new codec.MessageV0Builder(
        kPasswordGenerationDriver_ShowPasswordEditingPopup_Name,
        codec.align(PasswordGenerationDriver_ShowPasswordEditingPopup_Params.encodedSize));
    builder.encodeStruct(PasswordGenerationDriver_ShowPasswordEditingPopup_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PasswordGenerationDriverPtr.prototype.passwordGenerationRejectedByTyping = function() {
    return PasswordGenerationDriverProxy.prototype.passwordGenerationRejectedByTyping
        .apply(this.ptr.getProxy(), arguments);
  };

  PasswordGenerationDriverProxy.prototype.passwordGenerationRejectedByTyping = function() {
    var params_ = new PasswordGenerationDriver_PasswordGenerationRejectedByTyping_Params();
    var builder = new codec.MessageV0Builder(
        kPasswordGenerationDriver_PasswordGenerationRejectedByTyping_Name,
        codec.align(PasswordGenerationDriver_PasswordGenerationRejectedByTyping_Params.encodedSize));
    builder.encodeStruct(PasswordGenerationDriver_PasswordGenerationRejectedByTyping_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PasswordGenerationDriverPtr.prototype.presaveGeneratedPassword = function() {
    return PasswordGenerationDriverProxy.prototype.presaveGeneratedPassword
        .apply(this.ptr.getProxy(), arguments);
  };

  PasswordGenerationDriverProxy.prototype.presaveGeneratedPassword = function(passwordForm) {
    var params_ = new PasswordGenerationDriver_PresaveGeneratedPassword_Params();
    params_.passwordForm = passwordForm;
    var builder = new codec.MessageV0Builder(
        kPasswordGenerationDriver_PresaveGeneratedPassword_Name,
        codec.align(PasswordGenerationDriver_PresaveGeneratedPassword_Params.encodedSize));
    builder.encodeStruct(PasswordGenerationDriver_PresaveGeneratedPassword_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PasswordGenerationDriverPtr.prototype.passwordNoLongerGenerated = function() {
    return PasswordGenerationDriverProxy.prototype.passwordNoLongerGenerated
        .apply(this.ptr.getProxy(), arguments);
  };

  PasswordGenerationDriverProxy.prototype.passwordNoLongerGenerated = function(passwordForm) {
    var params_ = new PasswordGenerationDriver_PasswordNoLongerGenerated_Params();
    params_.passwordForm = passwordForm;
    var builder = new codec.MessageV0Builder(
        kPasswordGenerationDriver_PasswordNoLongerGenerated_Name,
        codec.align(PasswordGenerationDriver_PasswordNoLongerGenerated_Params.encodedSize));
    builder.encodeStruct(PasswordGenerationDriver_PasswordNoLongerGenerated_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PasswordGenerationDriverPtr.prototype.frameWasScrolled = function() {
    return PasswordGenerationDriverProxy.prototype.frameWasScrolled
        .apply(this.ptr.getProxy(), arguments);
  };

  PasswordGenerationDriverProxy.prototype.frameWasScrolled = function() {
    var params_ = new PasswordGenerationDriver_FrameWasScrolled_Params();
    var builder = new codec.MessageV0Builder(
        kPasswordGenerationDriver_FrameWasScrolled_Name,
        codec.align(PasswordGenerationDriver_FrameWasScrolled_Params.encodedSize));
    builder.encodeStruct(PasswordGenerationDriver_FrameWasScrolled_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PasswordGenerationDriverPtr.prototype.generationElementLostFocus = function() {
    return PasswordGenerationDriverProxy.prototype.generationElementLostFocus
        .apply(this.ptr.getProxy(), arguments);
  };

  PasswordGenerationDriverProxy.prototype.generationElementLostFocus = function() {
    var params_ = new PasswordGenerationDriver_GenerationElementLostFocus_Params();
    var builder = new codec.MessageV0Builder(
        kPasswordGenerationDriver_GenerationElementLostFocus_Name,
        codec.align(PasswordGenerationDriver_GenerationElementLostFocus_Params.encodedSize));
    builder.encodeStruct(PasswordGenerationDriver_GenerationElementLostFocus_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function PasswordGenerationDriverStub(delegate) {
    this.delegate_ = delegate;
  }
  PasswordGenerationDriverStub.prototype.generationAvailableForForm = function(passwordForm) {
    return this.delegate_ && this.delegate_.generationAvailableForForm && this.delegate_.generationAvailableForForm(passwordForm);
  }
  PasswordGenerationDriverStub.prototype.automaticGenerationAvailable = function(passwordGenerationUiData) {
    return this.delegate_ && this.delegate_.automaticGenerationAvailable && this.delegate_.automaticGenerationAvailable(passwordGenerationUiData);
  }
  PasswordGenerationDriverStub.prototype.showPasswordEditingPopup = function(bounds, passwordForm, fieldRendererId) {
    return this.delegate_ && this.delegate_.showPasswordEditingPopup && this.delegate_.showPasswordEditingPopup(bounds, passwordForm, fieldRendererId);
  }
  PasswordGenerationDriverStub.prototype.passwordGenerationRejectedByTyping = function() {
    return this.delegate_ && this.delegate_.passwordGenerationRejectedByTyping && this.delegate_.passwordGenerationRejectedByTyping();
  }
  PasswordGenerationDriverStub.prototype.presaveGeneratedPassword = function(passwordForm) {
    return this.delegate_ && this.delegate_.presaveGeneratedPassword && this.delegate_.presaveGeneratedPassword(passwordForm);
  }
  PasswordGenerationDriverStub.prototype.passwordNoLongerGenerated = function(passwordForm) {
    return this.delegate_ && this.delegate_.passwordNoLongerGenerated && this.delegate_.passwordNoLongerGenerated(passwordForm);
  }
  PasswordGenerationDriverStub.prototype.frameWasScrolled = function() {
    return this.delegate_ && this.delegate_.frameWasScrolled && this.delegate_.frameWasScrolled();
  }
  PasswordGenerationDriverStub.prototype.generationElementLostFocus = function() {
    return this.delegate_ && this.delegate_.generationElementLostFocus && this.delegate_.generationElementLostFocus();
  }

  PasswordGenerationDriverStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPasswordGenerationDriver_GenerationAvailableForForm_Name:
      var params = reader.decodeStruct(PasswordGenerationDriver_GenerationAvailableForForm_Params);
      this.generationAvailableForForm(params.passwordForm);
      return true;
    case kPasswordGenerationDriver_AutomaticGenerationAvailable_Name:
      var params = reader.decodeStruct(PasswordGenerationDriver_AutomaticGenerationAvailable_Params);
      this.automaticGenerationAvailable(params.passwordGenerationUiData);
      return true;
    case kPasswordGenerationDriver_ShowPasswordEditingPopup_Name:
      var params = reader.decodeStruct(PasswordGenerationDriver_ShowPasswordEditingPopup_Params);
      this.showPasswordEditingPopup(params.bounds, params.passwordForm, params.fieldRendererId);
      return true;
    case kPasswordGenerationDriver_PasswordGenerationRejectedByTyping_Name:
      var params = reader.decodeStruct(PasswordGenerationDriver_PasswordGenerationRejectedByTyping_Params);
      this.passwordGenerationRejectedByTyping();
      return true;
    case kPasswordGenerationDriver_PresaveGeneratedPassword_Name:
      var params = reader.decodeStruct(PasswordGenerationDriver_PresaveGeneratedPassword_Params);
      this.presaveGeneratedPassword(params.passwordForm);
      return true;
    case kPasswordGenerationDriver_PasswordNoLongerGenerated_Name:
      var params = reader.decodeStruct(PasswordGenerationDriver_PasswordNoLongerGenerated_Params);
      this.passwordNoLongerGenerated(params.passwordForm);
      return true;
    case kPasswordGenerationDriver_FrameWasScrolled_Name:
      var params = reader.decodeStruct(PasswordGenerationDriver_FrameWasScrolled_Params);
      this.frameWasScrolled();
      return true;
    case kPasswordGenerationDriver_GenerationElementLostFocus_Name:
      var params = reader.decodeStruct(PasswordGenerationDriver_GenerationElementLostFocus_Params);
      this.generationElementLostFocus();
      return true;
    default:
      return false;
    }
  };

  PasswordGenerationDriverStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validatePasswordGenerationDriverRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kPasswordGenerationDriver_GenerationAvailableForForm_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PasswordGenerationDriver_GenerationAvailableForForm_Params;
      break;
      case kPasswordGenerationDriver_AutomaticGenerationAvailable_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PasswordGenerationDriver_AutomaticGenerationAvailable_Params;
      break;
      case kPasswordGenerationDriver_ShowPasswordEditingPopup_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PasswordGenerationDriver_ShowPasswordEditingPopup_Params;
      break;
      case kPasswordGenerationDriver_PasswordGenerationRejectedByTyping_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PasswordGenerationDriver_PasswordGenerationRejectedByTyping_Params;
      break;
      case kPasswordGenerationDriver_PresaveGeneratedPassword_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PasswordGenerationDriver_PresaveGeneratedPassword_Params;
      break;
      case kPasswordGenerationDriver_PasswordNoLongerGenerated_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PasswordGenerationDriver_PasswordNoLongerGenerated_Params;
      break;
      case kPasswordGenerationDriver_FrameWasScrolled_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PasswordGenerationDriver_FrameWasScrolled_Params;
      break;
      case kPasswordGenerationDriver_GenerationElementLostFocus_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PasswordGenerationDriver_GenerationElementLostFocus_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validatePasswordGenerationDriverResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var PasswordGenerationDriver = {
    name: 'autofill.mojom.PasswordGenerationDriver',
    kVersion: 0,
    ptrClass: PasswordGenerationDriverPtr,
    proxyClass: PasswordGenerationDriverProxy,
    stubClass: PasswordGenerationDriverStub,
    validateRequest: validatePasswordGenerationDriverRequest,
    validateResponse: null,
  };
  PasswordGenerationDriverStub.prototype.validator = validatePasswordGenerationDriverRequest;
  PasswordGenerationDriverProxy.prototype.validator = null;
  exports.AutofillDriver = AutofillDriver;
  exports.AutofillDriverPtr = AutofillDriverPtr;
  exports.AutofillDriverAssociatedPtr = AutofillDriverAssociatedPtr;
  exports.PasswordManagerDriver = PasswordManagerDriver;
  exports.PasswordManagerDriverPtr = PasswordManagerDriverPtr;
  exports.PasswordManagerDriverAssociatedPtr = PasswordManagerDriverAssociatedPtr;
  exports.PasswordGenerationDriver = PasswordGenerationDriver;
  exports.PasswordGenerationDriverPtr = PasswordGenerationDriverPtr;
  exports.PasswordGenerationDriverAssociatedPtr = PasswordGenerationDriverAssociatedPtr;
})();