// chrome/test/data/webui/web_ui_test.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'chrome/test/data/webui/web_ui_test.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('webUiTest.mojom');



  function TestRunner_TestComplete_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestRunner_TestComplete_Params.prototype.initDefaults_ = function() {
    this.failureMessage = null;
  };
  TestRunner_TestComplete_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestRunner_TestComplete_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestRunner_TestComplete_Params.failureMessage
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, true)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestRunner_TestComplete_Params.encodedSize = codec.kStructHeaderSize + 8;

  TestRunner_TestComplete_Params.decode = function(decoder) {
    var packed;
    var val = new TestRunner_TestComplete_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.failureMessage = decoder.decodeStruct(codec.NullableString);
    return val;
  };

  TestRunner_TestComplete_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestRunner_TestComplete_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.NullableString, val.failureMessage);
  };
  var kTestRunner_TestComplete_Name = 0;

  function TestRunnerPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(TestRunner,
                                                   handleOrPtrInfo);
  }

  function TestRunnerAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        TestRunner, associatedInterfacePtrInfo);
  }

  TestRunnerAssociatedPtr.prototype =
      Object.create(TestRunnerPtr.prototype);
  TestRunnerAssociatedPtr.prototype.constructor =
      TestRunnerAssociatedPtr;

  function TestRunnerProxy(receiver) {
    this.receiver_ = receiver;
  }
  TestRunnerPtr.prototype.testComplete = function() {
    return TestRunnerProxy.prototype.testComplete
        .apply(this.ptr.getProxy(), arguments);
  };

  TestRunnerProxy.prototype.testComplete = function(failureMessage) {
    var params_ = new TestRunner_TestComplete_Params();
    params_.failureMessage = failureMessage;
    var builder = new codec.MessageV0Builder(
        kTestRunner_TestComplete_Name,
        codec.align(TestRunner_TestComplete_Params.encodedSize));
    builder.encodeStruct(TestRunner_TestComplete_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function TestRunnerStub(delegate) {
    this.delegate_ = delegate;
  }
  TestRunnerStub.prototype.testComplete = function(failureMessage) {
    return this.delegate_ && this.delegate_.testComplete && this.delegate_.testComplete(failureMessage);
  }

  TestRunnerStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kTestRunner_TestComplete_Name:
      var params = reader.decodeStruct(TestRunner_TestComplete_Params);
      this.testComplete(params.failureMessage);
      return true;
    default:
      return false;
    }
  };

  TestRunnerStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateTestRunnerRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kTestRunner_TestComplete_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = TestRunner_TestComplete_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateTestRunnerResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var TestRunner = {
    name: 'web_ui_test.mojom.TestRunner',
    kVersion: 0,
    ptrClass: TestRunnerPtr,
    proxyClass: TestRunnerProxy,
    stubClass: TestRunnerStub,
    validateRequest: validateTestRunnerRequest,
    validateResponse: null,
  };
  TestRunnerStub.prototype.validator = validateTestRunnerRequest;
  TestRunnerProxy.prototype.validator = null;
  exports.TestRunner = TestRunner;
  exports.TestRunnerPtr = TestRunnerPtr;
  exports.TestRunnerAssociatedPtr = TestRunnerAssociatedPtr;
})();