// chrome/common/mhtml_page_notifier.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'chrome/common/mhtml_page_notifier.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('offlinePages.mojom');
  var time$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/time.mojom', '../../mojo/public/mojom/base/time.mojom.js');
  }
  var mhtml_load_result$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/loader/mhtml_load_result.mojom', '../../third_party/blink/public/mojom/loader/mhtml_load_result.mojom.js');
  }
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../url/mojom/url.mojom.js');
  }



  function MhtmlPageNotifier_NotifyMhtmlPageLoadAttempted_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MhtmlPageNotifier_NotifyMhtmlPageLoadAttempted_Params.prototype.initDefaults_ = function() {
    this.loadResult = 0;
    this.url = null;
    this.date = null;
  };
  MhtmlPageNotifier_NotifyMhtmlPageLoadAttempted_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MhtmlPageNotifier_NotifyMhtmlPageLoadAttempted_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MhtmlPageNotifier_NotifyMhtmlPageLoadAttempted_Params.loadResult
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, mhtml_load_result$.MHTMLLoadResult);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MhtmlPageNotifier_NotifyMhtmlPageLoadAttempted_Params.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MhtmlPageNotifier_NotifyMhtmlPageLoadAttempted_Params.date
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, time$.Time, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  MhtmlPageNotifier_NotifyMhtmlPageLoadAttempted_Params.encodedSize = codec.kStructHeaderSize + 24;

  MhtmlPageNotifier_NotifyMhtmlPageLoadAttempted_Params.decode = function(decoder) {
    var packed;
    var val = new MhtmlPageNotifier_NotifyMhtmlPageLoadAttempted_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.loadResult = decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.url = decoder.decodeStructPointer(url$.Url);
    val.date = decoder.decodeStructPointer(time$.Time);
    return val;
  };

  MhtmlPageNotifier_NotifyMhtmlPageLoadAttempted_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MhtmlPageNotifier_NotifyMhtmlPageLoadAttempted_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.loadResult);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(url$.Url, val.url);
    encoder.encodeStructPointer(time$.Time, val.date);
  };
  var kMhtmlPageNotifier_NotifyMhtmlPageLoadAttempted_Name = 0;

  function MhtmlPageNotifierPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(MhtmlPageNotifier,
                                                   handleOrPtrInfo);
  }

  function MhtmlPageNotifierAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        MhtmlPageNotifier, associatedInterfacePtrInfo);
  }

  MhtmlPageNotifierAssociatedPtr.prototype =
      Object.create(MhtmlPageNotifierPtr.prototype);
  MhtmlPageNotifierAssociatedPtr.prototype.constructor =
      MhtmlPageNotifierAssociatedPtr;

  function MhtmlPageNotifierProxy(receiver) {
    this.receiver_ = receiver;
  }
  MhtmlPageNotifierPtr.prototype.notifyMhtmlPageLoadAttempted = function() {
    return MhtmlPageNotifierProxy.prototype.notifyMhtmlPageLoadAttempted
        .apply(this.ptr.getProxy(), arguments);
  };

  MhtmlPageNotifierProxy.prototype.notifyMhtmlPageLoadAttempted = function(loadResult, url, date) {
    var params_ = new MhtmlPageNotifier_NotifyMhtmlPageLoadAttempted_Params();
    params_.loadResult = loadResult;
    params_.url = url;
    params_.date = date;
    var builder = new codec.MessageV0Builder(
        kMhtmlPageNotifier_NotifyMhtmlPageLoadAttempted_Name,
        codec.align(MhtmlPageNotifier_NotifyMhtmlPageLoadAttempted_Params.encodedSize));
    builder.encodeStruct(MhtmlPageNotifier_NotifyMhtmlPageLoadAttempted_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function MhtmlPageNotifierStub(delegate) {
    this.delegate_ = delegate;
  }
  MhtmlPageNotifierStub.prototype.notifyMhtmlPageLoadAttempted = function(loadResult, url, date) {
    return this.delegate_ && this.delegate_.notifyMhtmlPageLoadAttempted && this.delegate_.notifyMhtmlPageLoadAttempted(loadResult, url, date);
  }

  MhtmlPageNotifierStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kMhtmlPageNotifier_NotifyMhtmlPageLoadAttempted_Name:
      var params = reader.decodeStruct(MhtmlPageNotifier_NotifyMhtmlPageLoadAttempted_Params);
      this.notifyMhtmlPageLoadAttempted(params.loadResult, params.url, params.date);
      return true;
    default:
      return false;
    }
  };

  MhtmlPageNotifierStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateMhtmlPageNotifierRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kMhtmlPageNotifier_NotifyMhtmlPageLoadAttempted_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = MhtmlPageNotifier_NotifyMhtmlPageLoadAttempted_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateMhtmlPageNotifierResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var MhtmlPageNotifier = {
    name: 'offline_pages.mojom.MhtmlPageNotifier',
    kVersion: 0,
    ptrClass: MhtmlPageNotifierPtr,
    proxyClass: MhtmlPageNotifierProxy,
    stubClass: MhtmlPageNotifierStub,
    validateRequest: validateMhtmlPageNotifierRequest,
    validateResponse: null,
  };
  MhtmlPageNotifierStub.prototype.validator = validateMhtmlPageNotifierRequest;
  MhtmlPageNotifierProxy.prototype.validator = null;
  exports.MhtmlPageNotifier = MhtmlPageNotifier;
  exports.MhtmlPageNotifierPtr = MhtmlPageNotifierPtr;
  exports.MhtmlPageNotifierAssociatedPtr = MhtmlPageNotifierAssociatedPtr;
})();