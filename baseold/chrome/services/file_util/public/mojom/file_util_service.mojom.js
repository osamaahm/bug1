// chrome/services/file_util/public/mojom/file_util_service.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'chrome/services/file_util/public/mojom/file_util_service.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('chrome.mojom');




  function FileUtilServicePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(FileUtilService,
                                                   handleOrPtrInfo);
  }

  function FileUtilServiceAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        FileUtilService, associatedInterfacePtrInfo);
  }

  FileUtilServiceAssociatedPtr.prototype =
      Object.create(FileUtilServicePtr.prototype);
  FileUtilServiceAssociatedPtr.prototype.constructor =
      FileUtilServiceAssociatedPtr;

  function FileUtilServiceProxy(receiver) {
    this.receiver_ = receiver;
  }

  function FileUtilServiceStub(delegate) {
    this.delegate_ = delegate;
  }

  FileUtilServiceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  FileUtilServiceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateFileUtilServiceRequest(messageValidator) {
    return validator.validationError.NONE;
  }

  function validateFileUtilServiceResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var FileUtilService = {
    name: 'chrome.mojom.FileUtilService',
    kVersion: 0,
    ptrClass: FileUtilServicePtr,
    proxyClass: FileUtilServiceProxy,
    stubClass: FileUtilServiceStub,
    validateRequest: validateFileUtilServiceRequest,
    validateResponse: null,
  };
  FileUtilServiceStub.prototype.validator = validateFileUtilServiceRequest;
  FileUtilServiceProxy.prototype.validator = null;
  exports.FileUtilService = FileUtilService;
  exports.FileUtilServicePtr = FileUtilServicePtr;
  exports.FileUtilServiceAssociatedPtr = FileUtilServiceAssociatedPtr;
})();